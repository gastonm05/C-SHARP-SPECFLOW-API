// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CCC_API.Features.Messages
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Messages")]
    public partial class MessagesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Messages.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Messages", "\tIn order to verify message publication to social media networks\r\n\tI schedule a m" +
                    "essage with different input to all the available social media platforms", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Characters accepted boundaries testing for publishing api")]
        [NUnit.Framework.CategoryAttribute("socialmedia")]
        [NUnit.Framework.TestCaseAttribute("Twitter", "now", "", "280", "", "", "false", "true", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("Twitter", "now", "", "281", "", "", "false", "true", "InternalServerError", null)]
        [NUnit.Framework.TestCaseAttribute("FacebookFanPage", "now", "", "10000", "", "", "false", "true", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("FacebookFanPage", "now", "", "10010", "", "", "false", "true", "OK", null)]

        public virtual void CharactersAcceptedBoundariesTestingForPublishingApi(string platform, string time, string time_Zone, string text_Length, string image, string page_Url, string linked, string shorten_Urls, string response_Code, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "socialmedia"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Characters accepted boundaries testing for publishing api", @__tags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
testRunner.Given("I login as \'socialmedia User5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
testRunner.When(string.Format("I schedule a message to send on {0}, {1} to {2} with a text length of {3}, and im" +
                        "age {4}, linked {5}, from page {6}, shorten url service {7} and {8} as expected " +
                        "response code", time, time_Zone, platform, text_Length, image, linked, page_Url, shorten_Urls, response_Code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Scheduling a message with empty content should return an error")]
        [NUnit.Framework.CategoryAttribute("socialmedia")]
        [NUnit.Framework.TestCaseAttribute("FacebookFanPage", "now", "", "0", "", "", "false", "true", "BadRequest", null)]
        public virtual void SchedulingAMessageWithEmptyContentShouldReturnAnError(string platform, string time, string time_Zone, string text_Length, string image, string page_Url, string linked, string shorten_Urls, string response_Code, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "socialmedia"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scheduling a message with empty content should return an error", @__tags);
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
testRunner.Given("I login as \'socialmedia User7\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 34
testRunner.When(string.Format("I schedule a message to send on {0}, {1} to {2} with a text length of {3}, and im" +
                        "age {4}, linked {5}, from page {6}, shorten url service {7} and {8} as expected " +
                        "response code", time, time_Zone, platform, text_Length, image, linked, page_Url, shorten_Urls, response_Code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Schedule a message with different type of images attached")]
        [NUnit.Framework.CategoryAttribute("socialmedia")]
        [NUnit.Framework.TestCaseAttribute("FacebookFanPage", "now", "", "10", "http://cision-wp-files.s3.amazonaws.com/us/wp-content/uploads/2016/02/02152640/lo" +
            "go-60px.png", "", "false", "true", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("Twitter", "now", "", "10", "https://media.giphy.com/media/T8Dhl1KPyzRqU/giphy.gif", "", "false", "true", "OK", null)]
        public virtual void ScheduleAMessageWithDifferentTypeOfImagesAttached(string platform, string time, string time_Zone, string text_Length, string image, string page_Url, string linked, string shorten_Urls, string response_Code, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "socialmedia"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Schedule a message with different type of images attached", @__tags);
#line 44
this.ScenarioSetup(scenarioInfo);
#line 45
testRunner.Given("I login as \'socialmedia User4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 46
testRunner.When(string.Format("I schedule a message to send on {0}, {1} to {2} with a text length of {3}, and im" +
                        "age {4}, linked {5}, from page {6}, shorten url service {7} and {8} as expected " +
                        "response code", time, time_Zone, platform, text_Length, image, linked, page_Url, shorten_Urls, response_Code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Schedule a message with different type images linked")]
        [NUnit.Framework.CategoryAttribute("socialmedia")]
        [NUnit.Framework.TestCaseAttribute("FacebookFanPage", "now", "", "10", "http://cdn.osxdaily.com/wp-content/uploads/2013/07/dancing-banana.gif", "http://osxdaily.com/2013/07/25/send-receive-animated-gifs-iphone/", "true", "true", "OK", null)]
       
        public virtual void ScheduleAMessageWithDifferentTypeImagesLinked(string platform, string time, string time_Zone, string text_Length, string image, string page_Url, string linked, string shorten_Urls, string response_Code, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "socialmedia"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Schedule a message with different type images linked", @__tags);
#line 67
this.ScenarioSetup(scenarioInfo);
#line 68
testRunner.Given("I login as \'socialmedia User3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 69
testRunner.When(string.Format("I schedule a message to send on {0}, {1} to {2} with a text length of {3}, and im" +
                        "age {4}, linked {5}, from page {6}, shorten url service {7} and {8} as expected " +
                        "response code", time, time_Zone, platform, text_Length, image, linked, page_Url, shorten_Urls, response_Code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Schedule a message time validations")]
        [NUnit.Framework.CategoryAttribute("socialmedia")]
        [NUnit.Framework.TestCaseAttribute("FacebookFanPage", "nextYear", "Eastern Standard Time", "10", "https://processing.org/tutorials/pixels/imgs/tint1.jpg", "https://processing.org/tutorials/pixels/", "true", "true", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("Twitter", "nextYear", "Mountain Standard Time", "10", "https://processing.org/tutorials/pixels/imgs/tint3.jpg", "https://processing.org/tutorials/pixels/", "true", "true", "OK", null)]
             public virtual void ScheduleAMessageTimeValidations(string platform, string time, string time_Zone, string text_Length, string image, string page_Url, string linked, string shorten_Urls, string response_Code, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "socialmedia"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Schedule a message time validations", @__tags);
#line 90
this.ScenarioSetup(scenarioInfo);
#line 91
testRunner.Given("I login as \'socialmedia User4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 92
testRunner.When(string.Format("I schedule a message to send on {0}, {1} to {2} with a text length of {3}, and im" +
                        "age {4}, linked {5}, from page {6}, shorten url service {7} and {8} as expected " +
                        "response code", time, time_Zone, platform, text_Length, image, linked, page_Url, shorten_Urls, response_Code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
