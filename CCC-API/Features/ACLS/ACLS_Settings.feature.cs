// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CCC_API.Features.ACLS
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Settings - ACLS Endpoint")]
    public partial class Settings_ACLSEndpointFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ACLS_Settings.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Settings - ACLS Endpoint", "\tTo verify that a list of permissions retrieved\r\n\tAs a valid CCC user\r\n\tI want to" +
                    " call the Settings ACLS endpoint with all possible type of users.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate successful endpoint response for a Standard User")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void ValidateSuccessfulEndpointResponseForAStandardUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate successful endpoint response for a Standard User", new string[] {
                        "acl"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I login as \'API Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table1.AddRow(new string[] {
                        "Access",
                        "",
                        "",
                        "IsGranted",
                        "True"});
            table1.AddRow(new string[] {
                        "AllUsers",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table1.AddRow(new string[] {
                        "AllUsers",
                        "Ops",
                        "",
                        "CanEditExpirationDate",
                        "False"});
            table1.AddRow(new string[] {
                        "AllUsers",
                        "Ops",
                        "",
                        "CanEditPermissions",
                        "False"});
            table1.AddRow(new string[] {
                        "AllUsers",
                        "Ops",
                        "",
                        "CanCreate",
                        "False"});
            table1.AddRow(new string[] {
                        "AllUsers",
                        "Ops",
                        "",
                        "CanEdit",
                        "False"});
            table1.AddRow(new string[] {
                        "AllUsers",
                        "Ops",
                        "",
                        "CanDelete",
                        "False"});
            table1.AddRow(new string[] {
                        "MyUser",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table1.AddRow(new string[] {
                        "MyUser",
                        "Ops",
                        "",
                        "CanEditExpirationDate",
                        "True"});
            table1.AddRow(new string[] {
                        "MyUser",
                        "Ops",
                        "",
                        "CanEditPermissions",
                        "True"});
            table1.AddRow(new string[] {
                        "MyUser",
                        "Ops",
                        "",
                        "CanCreate",
                        "False"});
            table1.AddRow(new string[] {
                        "MyUser",
                        "Ops",
                        "",
                        "CanEdit",
                        "True"});
            table1.AddRow(new string[] {
                        "MyUser",
                        "Ops",
                        "",
                        "CanDelete",
                        "False"});
            table1.AddRow(new string[] {
                        "NewsAlertManagement",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table1.AddRow(new string[] {
                        "MediaMonitoringSearchesManagement",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table1.AddRow(new string[] {
                        "AnalyticsProfileManagement",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table1.AddRow(new string[] {
                        "AnalyticsProfileManagement",
                        "Ops",
                        "",
                        "CanCreate",
                        "False"});
            table1.AddRow(new string[] {
                        "AnalyticsProfileManagement",
                        "Ops",
                        "",
                        "CanEdit",
                        "False"});
            table1.AddRow(new string[] {
                        "AnalyticsProfileManagement",
                        "Ops",
                        "",
                        "CanDelete",
                        "False"});
            table1.AddRow(new string[] {
                        "OMCAccountId",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table1.AddRow(new string[] {
                        "SocialMediaManagement",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table1.AddRow(new string[] {
                        "SocialMediaManagement",
                        "Ops",
                        "",
                        "CanCreate",
                        "False"});
            table1.AddRow(new string[] {
                        "SocialMediaManagement",
                        "Ops",
                        "",
                        "CanEdit",
                        "False"});
            table1.AddRow(new string[] {
                        "SocialMediaManagement",
                        "Ops",
                        "",
                        "CanDelete",
                        "False"});
            table1.AddRow(new string[] {
                        "Labs",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
#line 11
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table1, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate successful endpoint response for a Read-only User")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void ValidateSuccessfulEndpointResponseForARead_OnlyUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate successful endpoint response for a Read-only User", new string[] {
                        "acl"});
#line 40
this.ScenarioSetup(scenarioInfo);
#line 41
 testRunner.Given("I login as \'API Read-Only User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table2.AddRow(new string[] {
                        "Access",
                        "",
                        "",
                        "IsGranted",
                        "True"});
            table2.AddRow(new string[] {
                        "AllUsers",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table2.AddRow(new string[] {
                        "AllUsers",
                        "Ops",
                        "",
                        "CanEditExpirationDate",
                        "False"});
            table2.AddRow(new string[] {
                        "AllUsers",
                        "Ops",
                        "",
                        "CanEditPermissions",
                        "False"});
            table2.AddRow(new string[] {
                        "AllUsers",
                        "Ops",
                        "",
                        "CanCreate",
                        "False"});
            table2.AddRow(new string[] {
                        "AllUsers",
                        "Ops",
                        "",
                        "CanEdit",
                        "False"});
            table2.AddRow(new string[] {
                        "AllUsers",
                        "Ops",
                        "",
                        "CanDelete",
                        "False"});
            table2.AddRow(new string[] {
                        "MyUser",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table2.AddRow(new string[] {
                        "MyUser",
                        "Ops",
                        "",
                        "CanEditExpirationDate",
                        "True"});
            table2.AddRow(new string[] {
                        "MyUser",
                        "Ops",
                        "",
                        "CanEditPermissions",
                        "True"});
            table2.AddRow(new string[] {
                        "MyUser",
                        "Ops",
                        "",
                        "CanCreate",
                        "False"});
            table2.AddRow(new string[] {
                        "MyUser",
                        "Ops",
                        "",
                        "CanEdit",
                        "True"});
            table2.AddRow(new string[] {
                        "MyUser",
                        "Ops",
                        "",
                        "CanDelete",
                        "False"});
            table2.AddRow(new string[] {
                        "NewsAlertManagement",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table2.AddRow(new string[] {
                        "MediaMonitoringSearchesManagement",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table2.AddRow(new string[] {
                        "AnalyticsProfileManagement",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table2.AddRow(new string[] {
                        "AnalyticsProfileManagement",
                        "Ops",
                        "",
                        "CanCreate",
                        "False"});
            table2.AddRow(new string[] {
                        "AnalyticsProfileManagement",
                        "Ops",
                        "",
                        "CanEdit",
                        "False"});
            table2.AddRow(new string[] {
                        "AnalyticsProfileManagement",
                        "Ops",
                        "",
                        "CanDelete",
                        "False"});
            table2.AddRow(new string[] {
                        "OMCAccountId",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table2.AddRow(new string[] {
                        "SocialMediaManagement",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table2.AddRow(new string[] {
                        "SocialMediaManagement",
                        "Ops",
                        "",
                        "CanCreate",
                        "False"});
            table2.AddRow(new string[] {
                        "SocialMediaManagement",
                        "Ops",
                        "",
                        "CanEdit",
                        "False"});
            table2.AddRow(new string[] {
                        "SocialMediaManagement",
                        "Ops",
                        "",
                        "CanDelete",
                        "False"});
            table2.AddRow(new string[] {
                        "Labs",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
#line 44
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table2, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate successful endpoint response for a Manager User")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void ValidateSuccessfulEndpointResponseForAManagerUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate successful endpoint response for a Manager User", new string[] {
                        "acl"});
#line 72
this.ScenarioSetup(scenarioInfo);
#line 73
 testRunner.Given("I login as \'API Manager User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 74
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table3.AddRow(new string[] {
                        "Access",
                        "",
                        "",
                        "IsGranted",
                        "True"});
            table3.AddRow(new string[] {
                        "AllUsers",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table3.AddRow(new string[] {
                        "AllUsers",
                        "Ops",
                        "",
                        "CanEditExpirationDate",
                        "True"});
            table3.AddRow(new string[] {
                        "AllUsers",
                        "Ops",
                        "",
                        "CanEditPermissions",
                        "True"});
            table3.AddRow(new string[] {
                        "AllUsers",
                        "Ops",
                        "",
                        "CanCreate",
                        "True"});
            table3.AddRow(new string[] {
                        "AllUsers",
                        "Ops",
                        "",
                        "CanEdit",
                        "True"});
            table3.AddRow(new string[] {
                        "AllUsers",
                        "Ops",
                        "",
                        "CanDelete",
                        "False"});
            table3.AddRow(new string[] {
                        "MyUser",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table3.AddRow(new string[] {
                        "MyUser",
                        "Ops",
                        "",
                        "CanEditExpirationDate",
                        "True"});
            table3.AddRow(new string[] {
                        "MyUser",
                        "Ops",
                        "",
                        "CanEditPermissions",
                        "True"});
            table3.AddRow(new string[] {
                        "MyUser",
                        "Ops",
                        "",
                        "CanCreate",
                        "False"});
            table3.AddRow(new string[] {
                        "MyUser",
                        "Ops",
                        "",
                        "CanEdit",
                        "True"});
            table3.AddRow(new string[] {
                        "MyUser",
                        "Ops",
                        "",
                        "CanDelete",
                        "False"});
            table3.AddRow(new string[] {
                        "NewsAlertManagement",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table3.AddRow(new string[] {
                        "MediaMonitoringSearchesManagement",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table3.AddRow(new string[] {
                        "AnalyticsProfileManagement",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table3.AddRow(new string[] {
                        "AnalyticsProfileManagement",
                        "Ops",
                        "",
                        "CanCreate",
                        "False"});
            table3.AddRow(new string[] {
                        "AnalyticsProfileManagement",
                        "Ops",
                        "",
                        "CanEdit",
                        "True"});
            table3.AddRow(new string[] {
                        "AnalyticsProfileManagement",
                        "Ops",
                        "",
                        "CanDelete",
                        "False"});
            table3.AddRow(new string[] {
                        "OMCAccountId",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table3.AddRow(new string[] {
                        "SocialMediaManagement",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table3.AddRow(new string[] {
                        "SocialMediaManagement",
                        "Ops",
                        "",
                        "CanCreate",
                        "True"});
            table3.AddRow(new string[] {
                        "SocialMediaManagement",
                        "Ops",
                        "",
                        "CanEdit",
                        "True"});
            table3.AddRow(new string[] {
                        "SocialMediaManagement",
                        "Ops",
                        "",
                        "CanDelete",
                        "True"});
            table3.AddRow(new string[] {
                        "Labs",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
#line 76
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate successful endpoint response for a Manager User for Distribution ACLS pe" +
            "rmissions and Settings ACLS permissions for a OMC Enabled OMC company")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void ValidateSuccessfulEndpointResponseForAManagerUserForDistributionACLSPermissionsAndSettingsACLSPermissionsForAOMCEnabledOMCCompany()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate successful endpoint response for a Manager User for Distribution ACLS pe" +
                    "rmissions and Settings ACLS permissions for a OMC Enabled OMC company", new string[] {
                        "acl",
                        "Ignore"});
#line 105
this.ScenarioSetup(scenarioInfo);
#line 106
 testRunner.Given("I login as \'OMC Enabled Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 107
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table4.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "HasOMC",
                        "False"});
#line 109
 testRunner.And("ACLS permissions for Distribution should be:", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table5.AddRow(new string[] {
                        "OMCAccountId",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table5.AddRow(new string[] {
                        "OMCAccountId",
                        "Access",
                        "",
                        "StatusCode",
                        "0"});
            table5.AddRow(new string[] {
                        "OMCAccountId",
                        "Access",
                        "",
                        "Status",
                        "Access Granted"});
#line 112
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate successful endpoint response for a Manager User for Distribution ACLS pe" +
            "rmissions and Settings ACLS permissions for a OMC Disabled OMC company")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void ValidateSuccessfulEndpointResponseForAManagerUserForDistributionACLSPermissionsAndSettingsACLSPermissionsForAOMCDisabledOMCCompany()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate successful endpoint response for a Manager User for Distribution ACLS pe" +
                    "rmissions and Settings ACLS permissions for a OMC Disabled OMC company", new string[] {
                        "acl",
                        "Ignore"});
#line 118
this.ScenarioSetup(scenarioInfo);
#line 119
 testRunner.Given("I login as \'OMC Disabled Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 120
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 121
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table6.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "HasOMC",
                        "False"});
#line 122
 testRunner.And("ACLS permissions for Distribution should be:", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table7.AddRow(new string[] {
                        "OMCAccountId",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table7.AddRow(new string[] {
                        "OMCAccountId",
                        "Access",
                        "",
                        "StatusCode",
                        "1"});
            table7.AddRow(new string[] {
                        "OMCAccountId",
                        "Access",
                        "",
                        "Status",
                        "Permission Denied"});
#line 125
        testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table7, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate successful endpoint response for a Manager User for Distribution ACLS pe" +
            "rmissions  for a OMC Enabled OMC company with a disabled OMC Datagroup")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("OMC")]
        public virtual void ValidateSuccessfulEndpointResponseForAManagerUserForDistributionACLSPermissionsForAOMCEnabledOMCCompanyWithADisabledOMCDatagroup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate successful endpoint response for a Manager User for Distribution ACLS pe" +
                    "rmissions  for a OMC Enabled OMC company with a disabled OMC Datagroup", new string[] {
                        "acl",
                        "OMC",
                        "Ignore"});
#line 132
this.ScenarioSetup(scenarioInfo);
#line 133
 testRunner.Given("I login as \'Impact Enabled Company with No Company id or DataGroup id set - Manag" +
                    "er\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 134
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 135
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table8.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "HasOMC",
                        "False"});
#line 136
 testRunner.And("ACLS permissions for Distribution should be:", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate successful endpoint response for a Manager User for News ACLS permission" +
            "s")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void ValidateSuccessfulEndpointResponseForAManagerUserForNewsACLSPermissions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate successful endpoint response for a Manager User for News ACLS permission" +
                    "s", new string[] {
                        "acl"});
#line 141
this.ScenarioSetup(scenarioInfo);
#line 142
 testRunner.Given("I login as \'API Manager User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 143
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 144
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table9.AddRow(new string[] {
                        "Analytics",
                        "",
                        "",
                        "HasScoring",
                        "True"});
            table9.AddRow(new string[] {
                        "Analytics",
                        "",
                        "",
                        "HasToning",
                        "True"});
            table9.AddRow(new string[] {
                        "Analytics",
                        "",
                        "",
                        "HasToningOverride",
                        "False"});
            table9.AddRow(new string[] {
                        "Analytics",
                        "",
                        "",
                        "HasScoring",
                        "True"});
#line 145
 testRunner.And("ACLS permissions for News should be:", ((string)(null)), table9, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate a Manager User from a Visible ON company has proper set of permissions t" +
            "o activate \"Create New Searches\" feature")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void ValidateAManagerUserFromAVisibleONCompanyHasProperSetOfPermissionsToActivateCreateNewSearchesFeature()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate a Manager User from a Visible ON company has proper set of permissions t" +
                    "o activate \"Create New Searches\" feature", new string[] {
                        "acl"});
#line 152
this.ScenarioSetup(scenarioInfo);
#line 153
 testRunner.Given("I login as \'Visible ON Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 154
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 155
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table10.AddRow(new string[] {
                        "Access",
                        "",
                        "",
                        "IsGranted",
                        "True"});
            table10.AddRow(new string[] {
                        "AllUsers",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table10.AddRow(new string[] {
                        "AllUsers",
                        "Ops",
                        "",
                        "CanEditExpirationDate",
                        "True"});
            table10.AddRow(new string[] {
                        "AllUsers",
                        "Ops",
                        "",
                        "CanEditPermissions",
                        "True"});
            table10.AddRow(new string[] {
                        "AllUsers",
                        "Ops",
                        "",
                        "CanCreate",
                        "True"});
            table10.AddRow(new string[] {
                        "AllUsers",
                        "Ops",
                        "",
                        "CanEdit",
                        "True"});
            table10.AddRow(new string[] {
                        "AllUsers",
                        "Ops",
                        "",
                        "CanDelete",
                        "False"});
            table10.AddRow(new string[] {
                        "MyUser",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table10.AddRow(new string[] {
                        "MyUser",
                        "Ops",
                        "",
                        "CanEditExpirationDate",
                        "True"});
            table10.AddRow(new string[] {
                        "MyUser",
                        "Ops",
                        "",
                        "CanEditPermissions",
                        "True"});
            table10.AddRow(new string[] {
                        "MyUser",
                        "Ops",
                        "",
                        "CanCreate",
                        "False"});
            table10.AddRow(new string[] {
                        "MyUser",
                        "Ops",
                        "",
                        "CanEdit",
                        "True"});
            table10.AddRow(new string[] {
                        "MyUser",
                        "Ops",
                        "",
                        "CanDelete",
                        "False"});
            table10.AddRow(new string[] {
                        "MediaMonitoringSearchesManagement",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table10.AddRow(new string[] {
                        "MediaMonitoringSearchesManagement",
                        "Ops",
                        "",
                        "CanCreate",
                        "True"});
#line 156
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table10, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Manager User should NOT be allowed to see \'create new dashboard\' button with a " +
            "company has HideAnalyticsNewDashboardButton = True")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void AManagerUserShouldNOTBeAllowedToSeeCreateNewDashboardButtonWithACompanyHasHideAnalyticsNewDashboardButtonTrue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Manager User should NOT be allowed to see \'create new dashboard\' button with a " +
                    "company has HideAnalyticsNewDashboardButton = True", new string[] {
                        "acl",
                        "Ignore"});
#line 175
this.ScenarioSetup(scenarioInfo);
#line 176
 testRunner.Given("I login as \'SMB Package Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 177
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 178
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table11.AddRow(new string[] {
                        "Dashboards",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table11.AddRow(new string[] {
                        "Dashboards",
                        "Access",
                        "",
                        "Status",
                        "Access Granted"});
            table11.AddRow(new string[] {
                        "Dashboards",
                        "Access",
                        "",
                        "StatusCode",
                        "0"});
            table11.AddRow(new string[] {
                        "Dashboards",
                        "Ops",
                        "",
                        "CanEdit",
                        "True"});
            table11.AddRow(new string[] {
                        "Dashboards",
                        "Ops",
                        "",
                        "CanCreate",
                        "False"});
            table11.AddRow(new string[] {
                        "Dashboards",
                        "Ops",
                        "",
                        "CanDelete",
                        "False"});
#line 179
 testRunner.And("ACLS permissions for Analytics should be:", ((string)(null)), table11, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Manager User should NOT be allowed to see the \'doc\' option for the analytics da" +
            "shboard report (only PDF is allowed) with a company has AnalysisDocumentDownload" +
            "FormatDisabled = True")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void AManagerUserShouldNOTBeAllowedToSeeTheDocOptionForTheAnalyticsDashboardReportOnlyPDFIsAllowedWithACompanyHasAnalysisDocumentDownloadFormatDisabledTrue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Manager User should NOT be allowed to see the \'doc\' option for the analytics da" +
                    "shboard report (only PDF is allowed) with a company has AnalysisDocumentDownload" +
                    "FormatDisabled = True", new string[] {
                        "acl",
                        "Ignore"});
#line 189
this.ScenarioSetup(scenarioInfo);
#line 190
 testRunner.Given("I login as \'SMB Package Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 191
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 192
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table12.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "AnalysisDocumentDownloadFormatDisabled",
                        "True"});
#line 193
 testRunner.And("ACLS permissions for Analytics should be:", ((string)(null)), table12, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Manager User should NOT be allowed to see \'All news search\' button with a compa" +
            "ny has HideNewsArchive = True")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void AManagerUserShouldNOTBeAllowedToSeeAllNewsSearchButtonWithACompanyHasHideNewsArchiveTrue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Manager User should NOT be allowed to see \'All news search\' button with a compa" +
                    "ny has HideNewsArchive = True", new string[] {
                        "acl",
                        "Ignore"});
#line 198
this.ScenarioSetup(scenarioInfo);
#line 199
 testRunner.Given("I login as \'SMB Package Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 200
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 201
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table13.AddRow(new string[] {
                        "Archive",
                        "",
                        "",
                        "CanView",
                        "False"});
            table13.AddRow(new string[] {
                        "Archive",
                        "",
                        "",
                        "CanExportToNews",
                        "False"});
            table13.AddRow(new string[] {
                        "Archive",
                        "",
                        "",
                        "CanPreview",
                        "True"});
#line 202
 testRunner.And("ACLS permissions for News should be:", ((string)(null)), table13, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Manager User should NOT be allowed to see \'Generate Report\' button in email dis" +
            "tributions when a company has GenerateReportEnabled = False")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void AManagerUserShouldNOTBeAllowedToSeeGenerateReportButtonInEmailDistributionsWhenACompanyHasGenerateReportEnabledFalse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Manager User should NOT be allowed to see \'Generate Report\' button in email dis" +
                    "tributions when a company has GenerateReportEnabled = False", new string[] {
                        "acl",
                        "Ignore"});
#line 209
this.ScenarioSetup(scenarioInfo);
#line 210
 testRunner.Given("I login as \'SMB Package Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 211
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 212
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table14.AddRow(new string[] {
                        "Email",
                        "",
                        "",
                        "CanGenerateReport",
                        "False"});
#line 213
 testRunner.And("ACLS permissions for Distribution should be:", ((string)(null)), table14, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Manager User should be allowed to see Smart Tags page in Settings Area for a co" +
            "mpany has Automatic News Typing (Smart Tags) enabled.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void AManagerUserShouldBeAllowedToSeeSmartTagsPageInSettingsAreaForACompanyHasAutomaticNewsTypingSmartTagsEnabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Manager User should be allowed to see Smart Tags page in Settings Area for a co" +
                    "mpany has Automatic News Typing (Smart Tags) enabled.", new string[] {
                        "acl",
                        "Ignore"});
#line 218
this.ScenarioSetup(scenarioInfo);
#line 219
 testRunner.Given("I login as \'Smart Tag ON Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 220
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 221
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table15.AddRow(new string[] {
                        "SmartTags",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table15.AddRow(new string[] {
                        "SmartTags",
                        "Access",
                        "",
                        "Status",
                        "Access Granted"});
            table15.AddRow(new string[] {
                        "SmartTags",
                        "Access",
                        "",
                        "StatusCode",
                        "0"});
#line 222
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table15, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Sysadmin User should be allowed to see Smart Tags page in Settings Area for a c" +
            "ompany has Automatic News Typing (Smart Tags) enabled.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void ASysadminUserShouldBeAllowedToSeeSmartTagsPageInSettingsAreaForACompanyHasAutomaticNewsTypingSmartTagsEnabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Sysadmin User should be allowed to see Smart Tags page in Settings Area for a c" +
                    "ompany has Automatic News Typing (Smart Tags) enabled.", new string[] {
                        "acl",
                        "Ignore"});
#line 229
this.ScenarioSetup(scenarioInfo);
#line 230
 testRunner.Given("I login as \'Smart Tag ON Company - SysAdmin User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 231
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 232
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table16.AddRow(new string[] {
                        "SmartTags",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table16.AddRow(new string[] {
                        "SmartTags",
                        "Access",
                        "",
                        "Status",
                        "Access Granted"});
            table16.AddRow(new string[] {
                        "SmartTags",
                        "Access",
                        "",
                        "StatusCode",
                        "0"});
#line 233
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table16, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a AE Manager User should be allowed to see Smart Tags page in Settings Area for a" +
            " company has Automatic News Typing (Smart Tags) enabled.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void AAEManagerUserShouldBeAllowedToSeeSmartTagsPageInSettingsAreaForACompanyHasAutomaticNewsTypingSmartTagsEnabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a AE Manager User should be allowed to see Smart Tags page in Settings Area for a" +
                    " company has Automatic News Typing (Smart Tags) enabled.", new string[] {
                        "acl",
                        "Ignore"});
#line 240
this.ScenarioSetup(scenarioInfo);
#line 241
 testRunner.Given("I login as \'Smart Tag ON Company - AE Manager User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 242
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 243
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table17.AddRow(new string[] {
                        "SmartTags",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table17.AddRow(new string[] {
                        "SmartTags",
                        "Access",
                        "",
                        "Status",
                        "Access Granted"});
            table17.AddRow(new string[] {
                        "SmartTags",
                        "Access",
                        "",
                        "StatusCode",
                        "0"});
#line 244
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table17, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Manager User should NOT be allowed to see Smart Tags page in Settings Area for " +
            "a company has NOT Automatic News Typing (Smart Tags) enabled.")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void AManagerUserShouldNOTBeAllowedToSeeSmartTagsPageInSettingsAreaForACompanyHasNOTAutomaticNewsTypingSmartTagsEnabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Manager User should NOT be allowed to see Smart Tags page in Settings Area for " +
                    "a company has NOT Automatic News Typing (Smart Tags) enabled.", new string[] {
                        "acl"});
#line 251
this.ScenarioSetup(scenarioInfo);
#line 252
 testRunner.Given("I login as \'SMB Package Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 253
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 254
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table18.AddRow(new string[] {
                        "SmartTags",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table18.AddRow(new string[] {
                        "SmartTags",
                        "Access",
                        "",
                        "Status",
                        "Permission Denied"});
            table18.AddRow(new string[] {
                        "SmartTags",
                        "Access",
                        "",
                        "StatusCode",
                        "1"});
#line 255
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table18, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Standard User should NOT be allowed to see Smart Tags page in Settings Area for" +
            " a company that has Automatic News Typing (Smart Tags) enabled.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void AStandardUserShouldNOTBeAllowedToSeeSmartTagsPageInSettingsAreaForACompanyThatHasAutomaticNewsTypingSmartTagsEnabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Standard User should NOT be allowed to see Smart Tags page in Settings Area for" +
                    " a company that has Automatic News Typing (Smart Tags) enabled.", new string[] {
                        "acl",
                        "Ignore"});
#line 262
this.ScenarioSetup(scenarioInfo);
#line 263
 testRunner.Given("I login as \'Smart Tag ON Company - Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 264
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 265
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table19.AddRow(new string[] {
                        "SmartTags",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table19.AddRow(new string[] {
                        "SmartTags",
                        "Access",
                        "",
                        "Status",
                        "Permission Denied"});
            table19.AddRow(new string[] {
                        "SmartTags",
                        "Access",
                        "",
                        "StatusCode",
                        "1"});
#line 266
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table19, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Read-Only User should NOT be allowed to see Smart Tags page in Settings Area fo" +
            "r a company that has Automatic News Typing (Smart Tags) enabled.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void ARead_OnlyUserShouldNOTBeAllowedToSeeSmartTagsPageInSettingsAreaForACompanyThatHasAutomaticNewsTypingSmartTagsEnabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Read-Only User should NOT be allowed to see Smart Tags page in Settings Area fo" +
                    "r a company that has Automatic News Typing (Smart Tags) enabled.", new string[] {
                        "acl",
                        "Ignore"});
#line 273
this.ScenarioSetup(scenarioInfo);
#line 274
 testRunner.Given("I login as \'Smart Tag ON Company - Read-Only User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 275
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 276
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table20.AddRow(new string[] {
                        "SmartTags",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table20.AddRow(new string[] {
                        "SmartTags",
                        "Access",
                        "",
                        "Status",
                        "Permission Denied"});
            table20.AddRow(new string[] {
                        "SmartTags",
                        "Access",
                        "",
                        "StatusCode",
                        "1"});
#line 277
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table20, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Manager User should be allowed to see Advance Password Reset Page in Login Area" +
            " for a company has Advance Password feature enabled.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void AManagerUserShouldBeAllowedToSeeAdvancePasswordResetPageInLoginAreaForACompanyHasAdvancePasswordFeatureEnabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Manager User should be allowed to see Advance Password Reset Page in Login Area" +
                    " for a company has Advance Password feature enabled.", new string[] {
                        "acl",
                        "Ignore"});
#line 284
this.ScenarioSetup(scenarioInfo);
#line 285
 testRunner.Given("I login as \'Advance Password enabled Company - Sysadmin User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 286
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 287
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table21.AddRow(new string[] {
                        "HasAdvancedSecurity",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table21.AddRow(new string[] {
                        "HasAdvancedSecurity",
                        "Access",
                        "",
                        "Status",
                        "Access Granted"});
            table21.AddRow(new string[] {
                        "HasAdvancedSecurity",
                        "Access",
                        "",
                        "StatusCode",
                        "0"});
#line 288
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table21, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Standard User should be allowed to see Advance Password Reset Page in Login Are" +
            "a for a company has Advance Password feature enabled.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void AStandardUserShouldBeAllowedToSeeAdvancePasswordResetPageInLoginAreaForACompanyHasAdvancePasswordFeatureEnabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Standard User should be allowed to see Advance Password Reset Page in Login Are" +
                    "a for a company has Advance Password feature enabled.", new string[] {
                        "acl",
                        "Ignore"});
#line 294
this.ScenarioSetup(scenarioInfo);
#line 295
 testRunner.Given("I login as \'Advance Password enabled Company - Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 296
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 297
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table22.AddRow(new string[] {
                        "HasAdvancedSecurity",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table22.AddRow(new string[] {
                        "HasAdvancedSecurity",
                        "Access",
                        "",
                        "Status",
                        "Access Granted"});
            table22.AddRow(new string[] {
                        "HasAdvancedSecurity",
                        "Access",
                        "",
                        "StatusCode",
                        "0"});
#line 298
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table22, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a ReadOnly User should be allowed to see Advance Password Reset Page in Login Are" +
            "a for a company has Advance Password feature enabled.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void AReadOnlyUserShouldBeAllowedToSeeAdvancePasswordResetPageInLoginAreaForACompanyHasAdvancePasswordFeatureEnabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a ReadOnly User should be allowed to see Advance Password Reset Page in Login Are" +
                    "a for a company has Advance Password feature enabled.", new string[] {
                        "acl",
                        "Ignore"});
#line 304
this.ScenarioSetup(scenarioInfo);
#line 305
 testRunner.Given("I login as \'Advance Password enabled Company - ReadOnly User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 306
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 307
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table23.AddRow(new string[] {
                        "HasAdvancedSecurity",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table23.AddRow(new string[] {
                        "HasAdvancedSecurity",
                        "Access",
                        "",
                        "Status",
                        "Access Granted"});
            table23.AddRow(new string[] {
                        "HasAdvancedSecurity",
                        "Access",
                        "",
                        "StatusCode",
                        "0"});
#line 308
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table23, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Sysadmin User should NOT be allowed to see Advance Password Reset Page in Login" +
            " Area for a company has Advance Password feature disabled.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void ASysadminUserShouldNOTBeAllowedToSeeAdvancePasswordResetPageInLoginAreaForACompanyHasAdvancePasswordFeatureDisabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Sysadmin User should NOT be allowed to see Advance Password Reset Page in Login" +
                    " Area for a company has Advance Password feature disabled.", new string[] {
                        "acl",
                        "Ignore"});
#line 314
this.ScenarioSetup(scenarioInfo);
#line 315
 testRunner.Given("I login as \'Smart Tag ON Company - SysAdmin User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 316
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 317
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table24.AddRow(new string[] {
                        "HasAdvancedSecurity",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table24.AddRow(new string[] {
                        "HasAdvancedSecurity",
                        "Access",
                        "",
                        "Status",
                        "Feature Not Enabled"});
            table24.AddRow(new string[] {
                        "HasAdvancedSecurity",
                        "Access",
                        "",
                        "StatusCode",
                        "2"});
#line 318
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table24, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Manager User should NOT be allowed to see Wire Distribution Page in Settings Ar" +
            "ea for a company has PressReleaseImpactEnabled feature disabled.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Impact")]
        public virtual void AManagerUserShouldNOTBeAllowedToSeeWireDistributionPageInSettingsAreaForACompanyHasPressReleaseImpactEnabledFeatureDisabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Manager User should NOT be allowed to see Wire Distribution Page in Settings Ar" +
                    "ea for a company has PressReleaseImpactEnabled feature disabled.", new string[] {
                        "acl",
                        "Impact",
                        "Ignore"});
#line 325
this.ScenarioSetup(scenarioInfo);
#line 326
 testRunner.Given("I login as \'Smart Tag ON Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 327
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 328
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table25.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table25.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Access",
                        "",
                        "Status",
                        "Feature Not Enabled"});
            table25.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Access",
                        "",
                        "StatusCode",
                        "2"});
            table25.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Ops",
                        "",
                        "CanView",
                        "False"});
            table25.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Ops",
                        "",
                        "CanCreate",
                        "False"});
            table25.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Ops",
                        "",
                        "CanEdit",
                        "False"});
            table25.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Ops",
                        "",
                        "CanDelete",
                        "False"});
#line 329
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table25, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a SysAdmin User should NOT be allowed to see Wire Distribution Page in Settings A" +
            "rea for a company has PressReleaseImpactEnabled feature enabled.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Impact")]
        public virtual void ASysAdminUserShouldNOTBeAllowedToSeeWireDistributionPageInSettingsAreaForACompanyHasPressReleaseImpactEnabledFeatureEnabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a SysAdmin User should NOT be allowed to see Wire Distribution Page in Settings A" +
                    "rea for a company has PressReleaseImpactEnabled feature enabled.", new string[] {
                        "acl",
                        "Impact",
                        "Ignore"});
#line 339
this.ScenarioSetup(scenarioInfo);
#line 340
 testRunner.Given("I login as \'Press Release Impact Enabled Company - Sysadmin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 341
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 342
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table26.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table26.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Access",
                        "",
                        "Status",
                        "Feature Not Enabled"});
            table26.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Access",
                        "",
                        "StatusCode",
                        "2"});
            table26.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Ops",
                        "",
                        "CanView",
                        "False"});
            table26.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Ops",
                        "",
                        "CanCreate",
                        "False"});
            table26.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Ops",
                        "",
                        "CanEdit",
                        "False"});
            table26.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Ops",
                        "",
                        "CanDelete",
                        "False"});
#line 343
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table26, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Standard User should NOT be allowed to see Wire Distribution Page in Settings A" +
            "rea for a company has PressReleaseImpactEnabled feature enabled.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Impact")]
        public virtual void AStandardUserShouldNOTBeAllowedToSeeWireDistributionPageInSettingsAreaForACompanyHasPressReleaseImpactEnabledFeatureEnabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Standard User should NOT be allowed to see Wire Distribution Page in Settings A" +
                    "rea for a company has PressReleaseImpactEnabled feature enabled.", new string[] {
                        "acl",
                        "Impact",
                        "Ignore"});
#line 353
this.ScenarioSetup(scenarioInfo);
#line 354
 testRunner.Given("I login as \'Press Release Impact Enabled Company - Standard\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 355
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 356
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table27.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table27.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Access",
                        "",
                        "Status",
                        "Feature Not Enabled"});
            table27.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Access",
                        "",
                        "StatusCode",
                        "2"});
            table27.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Ops",
                        "",
                        "CanView",
                        "False"});
            table27.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Ops",
                        "",
                        "CanCreate",
                        "False"});
            table27.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Ops",
                        "",
                        "CanEdit",
                        "False"});
            table27.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Ops",
                        "",
                        "CanDelete",
                        "False"});
#line 357
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table27, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a ReadOnly User should NOT be allowed to see Wire Distribution Page in Settings A" +
            "rea for a company has PressReleaseImpactEnabled feature enabled.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Impact")]
        public virtual void AReadOnlyUserShouldNOTBeAllowedToSeeWireDistributionPageInSettingsAreaForACompanyHasPressReleaseImpactEnabledFeatureEnabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a ReadOnly User should NOT be allowed to see Wire Distribution Page in Settings A" +
                    "rea for a company has PressReleaseImpactEnabled feature enabled.", new string[] {
                        "acl",
                        "Impact",
                        "Ignore"});
#line 368
this.ScenarioSetup(scenarioInfo);
#line 369
 testRunner.Given("I login as \'Press Release Impact Enabled Company - ReadOnly\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 370
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 371
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table28.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table28.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Access",
                        "",
                        "Status",
                        "Feature Not Enabled"});
            table28.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Access",
                        "",
                        "StatusCode",
                        "2"});
            table28.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Ops",
                        "",
                        "CanView",
                        "False"});
            table28.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Ops",
                        "",
                        "CanCreate",
                        "False"});
            table28.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Ops",
                        "",
                        "CanEdit",
                        "False"});
            table28.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Ops",
                        "",
                        "CanDelete",
                        "False"});
#line 372
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table28, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Manager User should be allowed to see Wire Distribution Page in Settings Area f" +
            "or a company has PressReleaseImpactEnabled feature enabled.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Impact")]
        public virtual void AManagerUserShouldBeAllowedToSeeWireDistributionPageInSettingsAreaForACompanyHasPressReleaseImpactEnabledFeatureEnabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Manager User should be allowed to see Wire Distribution Page in Settings Area f" +
                    "or a company has PressReleaseImpactEnabled feature enabled.", new string[] {
                        "acl",
                        "Impact",
                        "Ignore"});
#line 382
this.ScenarioSetup(scenarioInfo);
#line 383
 testRunner.Given("I login as \'Press Release Impact Enabled Company - Manager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 384
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 385
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table29.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table29.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Access",
                        "",
                        "Status",
                        "Access Granted"});
            table29.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Access",
                        "",
                        "StatusCode",
                        "0"});
            table29.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Ops",
                        "",
                        "CanView",
                        "True"});
            table29.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Ops",
                        "",
                        "CanCreate",
                        "True"});
            table29.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Ops",
                        "",
                        "CanEdit",
                        "True"});
            table29.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Ops",
                        "",
                        "CanDelete",
                        "True"});
#line 386
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table29, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a AE User should be allowed to see Wire Distribution Page in Settings Area for a " +
            "company has PressReleaseImpactEnabled feature enabled.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Impact")]
        public virtual void AAEUserShouldBeAllowedToSeeWireDistributionPageInSettingsAreaForACompanyHasPressReleaseImpactEnabledFeatureEnabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a AE User should be allowed to see Wire Distribution Page in Settings Area for a " +
                    "company has PressReleaseImpactEnabled feature enabled.", new string[] {
                        "acl",
                        "Impact",
                        "Ignore"});
#line 396
this.ScenarioSetup(scenarioInfo);
#line 397
 testRunner.Given("I login as \'Press Release Impact Enabled Company - AE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 398
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 399
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table30.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table30.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Access",
                        "",
                        "Status",
                        "Access Granted"});
            table30.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Access",
                        "",
                        "StatusCode",
                        "0"});
            table30.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Ops",
                        "",
                        "CanView",
                        "True"});
            table30.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Ops",
                        "",
                        "CanCreate",
                        "True"});
            table30.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Ops",
                        "",
                        "CanEdit",
                        "True"});
            table30.AddRow(new string[] {
                        "PressReleaseImpact",
                        "Ops",
                        "",
                        "CanDelete",
                        "True"});
#line 400
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table30, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Manager User should be allowed to see Impact Tab in nav bar Area for a company " +
            "has PressReleaseImpactEnabled feature enabled and DataGroup set to use Company W" +
            "ire Distribution Account ID")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Impact")]
        public virtual void AManagerUserShouldBeAllowedToSeeImpactTabInNavBarAreaForACompanyHasPressReleaseImpactEnabledFeatureEnabledAndDataGroupSetToUseCompanyWireDistributionAccountID()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Manager User should be allowed to see Impact Tab in nav bar Area for a company " +
                    "has PressReleaseImpactEnabled feature enabled and DataGroup set to use Company W" +
                    "ire Distribution Account ID", new string[] {
                        "acl",
                        "Impact",
                        "Ignore"});
#line 411
this.ScenarioSetup(scenarioInfo);
#line 412
 testRunner.Given("I login as \'Impact Tab Enabled per DataGroup Company - (Default)\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 413
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 414
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table31.AddRow(new string[] {
                        "Access",
                        "",
                        "",
                        "IsGranted",
                        "True"});
            table31.AddRow(new string[] {
                        "Access",
                        "",
                        "",
                        "Status",
                        "Access Granted"});
            table31.AddRow(new string[] {
                        "Access",
                        "",
                        "",
                        "StatusCode",
                        "0"});
#line 415
 testRunner.And("ACLS permissions for Impact should be:", ((string)(null)), table31, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Manager User should be allowed to see Impact Tab in nav bar Area for a company " +
            "has PressReleaseImpactEnabled feature enabled and DataGroup set to use it\'s own " +
            "Wire Distribution Account ID")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Impact")]
        public virtual void AManagerUserShouldBeAllowedToSeeImpactTabInNavBarAreaForACompanyHasPressReleaseImpactEnabledFeatureEnabledAndDataGroupSetToUseItsOwnWireDistributionAccountID()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Manager User should be allowed to see Impact Tab in nav bar Area for a company " +
                    "has PressReleaseImpactEnabled feature enabled and DataGroup set to use it\'s own " +
                    "Wire Distribution Account ID", new string[] {
                        "acl",
                        "Impact",
                        "Ignore"});
#line 421
this.ScenarioSetup(scenarioInfo);
#line 422
 testRunner.Given("I login as \'Impact Tab Enabled per DataGroup Company - ImpactEnabledDataGroup\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 423
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 424
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table32.AddRow(new string[] {
                        "Access",
                        "",
                        "",
                        "IsGranted",
                        "True"});
            table32.AddRow(new string[] {
                        "Access",
                        "",
                        "",
                        "Status",
                        "Access Granted"});
            table32.AddRow(new string[] {
                        "Access",
                        "",
                        "",
                        "StatusCode",
                        "0"});
#line 425
 testRunner.And("ACLS permissions for Impact should be:", ((string)(null)), table32, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Manager User should NOT be allowed to see Impact Tab in nav bar Area for a comp" +
            "any has PressReleaseImpactEnabled feature enabled but DataGroup set as disabled " +
            "for Wire Distribution.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Impact")]
        public virtual void AManagerUserShouldNOTBeAllowedToSeeImpactTabInNavBarAreaForACompanyHasPressReleaseImpactEnabledFeatureEnabledButDataGroupSetAsDisabledForWireDistribution_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Manager User should NOT be allowed to see Impact Tab in nav bar Area for a comp" +
                    "any has PressReleaseImpactEnabled feature enabled but DataGroup set as disabled " +
                    "for Wire Distribution.", new string[] {
                        "acl",
                        "Impact",
                        "Ignore"});
#line 431
this.ScenarioSetup(scenarioInfo);
#line 432
 testRunner.Given("I login as \'Impact Tab Enabled per DataGroup Company - DGDisabledforImpact\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 433
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 434
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table33.AddRow(new string[] {
                        "Access",
                        "",
                        "",
                        "IsGranted",
                        "False"});
            table33.AddRow(new string[] {
                        "Access",
                        "",
                        "",
                        "Status",
                        "Permission Denied"});
            table33.AddRow(new string[] {
                        "Access",
                        "",
                        "",
                        "StatusCode",
                        "1"});
#line 435
 testRunner.And("ACLS permissions for Impact should be:", ((string)(null)), table33, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Manager User should be allowed to see Automated News Output Page in Settings Ar" +
            "ea for a company has News-FtpExport-Enabled feature enabled.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("FTP")]
        public virtual void AManagerUserShouldBeAllowedToSeeAutomatedNewsOutputPageInSettingsAreaForACompanyHasNews_FtpExport_EnabledFeatureEnabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Manager User should be allowed to see Automated News Output Page in Settings Ar" +
                    "ea for a company has News-FtpExport-Enabled feature enabled.", new string[] {
                        "acl",
                        "FTP",
                        "Ignore"});
#line 442
this.ScenarioSetup(scenarioInfo);
#line 443
 testRunner.Given("I login as \'FTP Export Enabled Company - Manager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 444
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 445
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table34.AddRow(new string[] {
                        "FtpExport",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table34.AddRow(new string[] {
                        "FtpExport",
                        "Access",
                        "",
                        "Status",
                        "Access Granted"});
            table34.AddRow(new string[] {
                        "FtpExport",
                        "Access",
                        "",
                        "StatusCode",
                        "0"});
            table34.AddRow(new string[] {
                        "FtpExport",
                        "Ops",
                        "",
                        "CanView",
                        "True"});
            table34.AddRow(new string[] {
                        "FtpExport",
                        "Ops",
                        "",
                        "CanCreate",
                        "False"});
            table34.AddRow(new string[] {
                        "FtpExport",
                        "Ops",
                        "",
                        "CanEdit",
                        "True"});
            table34.AddRow(new string[] {
                        "FtpExport",
                        "Ops",
                        "",
                        "CanDelete",
                        "False"});
#line 446
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table34, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a System Admin User should be allowed to see Automated News Output Page in Settin" +
            "gs Area for a company has News-FtpExport-Enabled feature enabled.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("FTP")]
        public virtual void ASystemAdminUserShouldBeAllowedToSeeAutomatedNewsOutputPageInSettingsAreaForACompanyHasNews_FtpExport_EnabledFeatureEnabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a System Admin User should be allowed to see Automated News Output Page in Settin" +
                    "gs Area for a company has News-FtpExport-Enabled feature enabled.", new string[] {
                        "acl",
                        "FTP",
                        "Ignore"});
#line 457
this.ScenarioSetup(scenarioInfo);
#line 458
 testRunner.Given("I login as \'FTP Export Enabled Company - SysAdmin User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 459
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 460
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table35.AddRow(new string[] {
                        "FtpExport",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table35.AddRow(new string[] {
                        "FtpExport",
                        "Access",
                        "",
                        "Status",
                        "Access Granted"});
            table35.AddRow(new string[] {
                        "FtpExport",
                        "Access",
                        "",
                        "StatusCode",
                        "0"});
            table35.AddRow(new string[] {
                        "FtpExport",
                        "Ops",
                        "",
                        "CanView",
                        "True"});
            table35.AddRow(new string[] {
                        "FtpExport",
                        "Ops",
                        "",
                        "CanCreate",
                        "False"});
            table35.AddRow(new string[] {
                        "FtpExport",
                        "Ops",
                        "",
                        "CanEdit",
                        "True"});
            table35.AddRow(new string[] {
                        "FtpExport",
                        "Ops",
                        "",
                        "CanDelete",
                        "False"});
#line 461
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table35, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a AE User should be allowed to see Automated News Output Page in Settings Area fo" +
            "r a company has News-FtpExport-Enabled feature enabled.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("FTP")]
        public virtual void AAEUserShouldBeAllowedToSeeAutomatedNewsOutputPageInSettingsAreaForACompanyHasNews_FtpExport_EnabledFeatureEnabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a AE User should be allowed to see Automated News Output Page in Settings Area fo" +
                    "r a company has News-FtpExport-Enabled feature enabled.", new string[] {
                        "acl",
                        "FTP",
                        "Ignore"});
#line 472
this.ScenarioSetup(scenarioInfo);
#line 473
 testRunner.Given("I login as \'FTP Export Enabled Company - AE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 474
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 475
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table36.AddRow(new string[] {
                        "FtpExport",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table36.AddRow(new string[] {
                        "FtpExport",
                        "Access",
                        "",
                        "Status",
                        "Access Granted"});
            table36.AddRow(new string[] {
                        "FtpExport",
                        "Access",
                        "",
                        "StatusCode",
                        "0"});
            table36.AddRow(new string[] {
                        "FtpExport",
                        "Ops",
                        "",
                        "CanView",
                        "True"});
            table36.AddRow(new string[] {
                        "FtpExport",
                        "Ops",
                        "",
                        "CanCreate",
                        "False"});
            table36.AddRow(new string[] {
                        "FtpExport",
                        "Ops",
                        "",
                        "CanEdit",
                        "True"});
            table36.AddRow(new string[] {
                        "FtpExport",
                        "Ops",
                        "",
                        "CanDelete",
                        "False"});
#line 476
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table36, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Manager User should NOT be allowed to see Automated News Output Page in Setting" +
            "s Area for a company has News-FtpExport-Enabled feature disabled.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("FTP")]
        public virtual void AManagerUserShouldNOTBeAllowedToSeeAutomatedNewsOutputPageInSettingsAreaForACompanyHasNews_FtpExport_EnabledFeatureDisabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Manager User should NOT be allowed to see Automated News Output Page in Setting" +
                    "s Area for a company has News-FtpExport-Enabled feature disabled.", new string[] {
                        "acl",
                        "FTP",
                        "Ignore"});
#line 487
this.ScenarioSetup(scenarioInfo);
#line 488
 testRunner.Given("I login as \'Press Release Impact Enabled Company - Manager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 489
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 490
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table37.AddRow(new string[] {
                        "FtpExport",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table37.AddRow(new string[] {
                        "FtpExport",
                        "Access",
                        "",
                        "Status",
                        "Feature Not Enabled"});
            table37.AddRow(new string[] {
                        "FtpExport",
                        "Access",
                        "",
                        "StatusCode",
                        "2"});
            table37.AddRow(new string[] {
                        "FtpExport",
                        "Ops",
                        "",
                        "CanView",
                        "False"});
            table37.AddRow(new string[] {
                        "FtpExport",
                        "Ops",
                        "",
                        "CanCreate",
                        "False"});
            table37.AddRow(new string[] {
                        "FtpExport",
                        "Ops",
                        "",
                        "CanEdit",
                        "False"});
            table37.AddRow(new string[] {
                        "FtpExport",
                        "Ops",
                        "",
                        "CanDelete",
                        "False"});
#line 491
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table37, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Standard User should NOT be allowed to see Automated News Output Page in Settin" +
            "gs Area for a company has News-FtpExport-Enabled feature disabled.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("FTP")]
        public virtual void AStandardUserShouldNOTBeAllowedToSeeAutomatedNewsOutputPageInSettingsAreaForACompanyHasNews_FtpExport_EnabledFeatureDisabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Standard User should NOT be allowed to see Automated News Output Page in Settin" +
                    "gs Area for a company has News-FtpExport-Enabled feature disabled.", new string[] {
                        "acl",
                        "FTP",
                        "Ignore"});
#line 502
this.ScenarioSetup(scenarioInfo);
#line 503
 testRunner.Given("I login as \'FTP Export Enabled Company - Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 504
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 505
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table38.AddRow(new string[] {
                        "FtpExport",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table38.AddRow(new string[] {
                        "FtpExport",
                        "Access",
                        "",
                        "Status",
                        "Feature Not Enabled"});
            table38.AddRow(new string[] {
                        "FtpExport",
                        "Access",
                        "",
                        "StatusCode",
                        "2"});
            table38.AddRow(new string[] {
                        "FtpExport",
                        "Ops",
                        "",
                        "CanView",
                        "False"});
            table38.AddRow(new string[] {
                        "FtpExport",
                        "Ops",
                        "",
                        "CanCreate",
                        "False"});
            table38.AddRow(new string[] {
                        "FtpExport",
                        "Ops",
                        "",
                        "CanEdit",
                        "False"});
            table38.AddRow(new string[] {
                        "FtpExport",
                        "Ops",
                        "",
                        "CanDelete",
                        "False"});
#line 506
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table38, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Read Only User should NOT be allowed to see Automated News Output Page in Setti" +
            "ngs Area for a company has News-FtpExport-Enabled feature disabled.")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("FTP")]
        public virtual void AReadOnlyUserShouldNOTBeAllowedToSeeAutomatedNewsOutputPageInSettingsAreaForACompanyHasNews_FtpExport_EnabledFeatureDisabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Read Only User should NOT be allowed to see Automated News Output Page in Setti" +
                    "ngs Area for a company has News-FtpExport-Enabled feature disabled.", new string[] {
                        "acl",
                        "FTP"});
#line 517
this.ScenarioSetup(scenarioInfo);
#line 518
 testRunner.Given("I login as \'FTP Export Enabled Company - Readonly User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 519
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 520
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table39.AddRow(new string[] {
                        "FtpExport",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table39.AddRow(new string[] {
                        "FtpExport",
                        "Access",
                        "",
                        "Status",
                        "Feature Not Enabled"});
            table39.AddRow(new string[] {
                        "FtpExport",
                        "Access",
                        "",
                        "StatusCode",
                        "2"});
            table39.AddRow(new string[] {
                        "FtpExport",
                        "Ops",
                        "",
                        "CanView",
                        "False"});
            table39.AddRow(new string[] {
                        "FtpExport",
                        "Ops",
                        "",
                        "CanCreate",
                        "False"});
            table39.AddRow(new string[] {
                        "FtpExport",
                        "Ops",
                        "",
                        "CanEdit",
                        "False"});
            table39.AddRow(new string[] {
                        "FtpExport",
                        "Ops",
                        "",
                        "CanDelete",
                        "False"});
#line 521
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table39, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Manager can edit any user PRNewswire User ID when the company does not have Wir" +
            "e Distribution Account ID.")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void AManagerCanEditAnyUserPRNewswireUserIDWhenTheCompanyDoesNotHaveWireDistributionAccountID_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Manager can edit any user PRNewswire User ID when the company does not have Wir" +
                    "e Distribution Account ID.", new string[] {
                        "acl"});
#line 532
this.ScenarioSetup(scenarioInfo);
#line 533
 testRunner.Given("I login as \'PR News Wire Enabled - Without Wire Distribution Account ID - Manager" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 534
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 535
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table40.AddRow(new string[] {
                        "OMCAccountId",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table40.AddRow(new string[] {
                        "OMCAccountId",
                        "Access",
                        "",
                        "Status",
                        "Access Granted"});
            table40.AddRow(new string[] {
                        "OMCAccountId",
                        "Access",
                        "",
                        "StatusCode",
                        "0"});
#line 536
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table40, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Standard User cannot edit PRNewswire User ID when the company does not have Wir" +
            "e Distribution Account ID.")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void AStandardUserCannotEditPRNewswireUserIDWhenTheCompanyDoesNotHaveWireDistributionAccountID_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Standard User cannot edit PRNewswire User ID when the company does not have Wir" +
                    "e Distribution Account ID.", new string[] {
                        "acl"});
#line 543
this.ScenarioSetup(scenarioInfo);
#line 544
 testRunner.Given("I login as \'PR News Wire Enabled - Without Wire Distribution Account ID - Standar" +
                    "d User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 545
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 546
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table41.AddRow(new string[] {
                        "OMCAccountId",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table41.AddRow(new string[] {
                        "OMCAccountId",
                        "Access",
                        "",
                        "Status",
                        "Permission Denied"});
            table41.AddRow(new string[] {
                        "OMCAccountId",
                        "Access",
                        "",
                        "StatusCode",
                        "1"});
#line 547
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table41, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Read Only user cannot edit PRNewswire User ID when the company does not have Wi" +
            "re Distribution Account ID.")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void AReadOnlyUserCannotEditPRNewswireUserIDWhenTheCompanyDoesNotHaveWireDistributionAccountID_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Read Only user cannot edit PRNewswire User ID when the company does not have Wi" +
                    "re Distribution Account ID.", new string[] {
                        "acl"});
#line 554
this.ScenarioSetup(scenarioInfo);
#line 555
 testRunner.Given("I login as \'PR News Wire Enabled - Without Wire Distribution Account ID - Read On" +
                    "ly\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 556
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 557
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table42.AddRow(new string[] {
                        "OMCAccountId",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table42.AddRow(new string[] {
                        "OMCAccountId",
                        "Access",
                        "",
                        "Status",
                        "Permission Denied"});
            table42.AddRow(new string[] {
                        "OMCAccountId",
                        "Access",
                        "",
                        "StatusCode",
                        "1"});
#line 558
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table42, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a AE user cannot edit PRNewswire User ID when the company does not have Wire Dist" +
            "ribution Account ID.")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void AAEUserCannotEditPRNewswireUserIDWhenTheCompanyDoesNotHaveWireDistributionAccountID_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a AE user cannot edit PRNewswire User ID when the company does not have Wire Dist" +
                    "ribution Account ID.", new string[] {
                        "acl"});
#line 565
this.ScenarioSetup(scenarioInfo);
#line 566
 testRunner.Given("I login as \'PR News Wire Enabled - Without Wire Distribution Account ID - AE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 567
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 568
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table43.AddRow(new string[] {
                        "OMCAccountId",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table43.AddRow(new string[] {
                        "OMCAccountId",
                        "Access",
                        "",
                        "Status",
                        "Permission Denied"});
            table43.AddRow(new string[] {
                        "OMCAccountId",
                        "Access",
                        "",
                        "StatusCode",
                        "1"});
#line 569
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table43, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a Manager User should be allow to see Earned Media Searches in Keyword Searches p" +
            "age from Settings Area")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Impact")]
        [NUnit.Framework.CategoryAttribute("EarnedMedia")]
        public virtual void AManagerUserShouldBeAllowToSeeEarnedMediaSearchesInKeywordSearchesPageFromSettingsArea()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a Manager User should be allow to see Earned Media Searches in Keyword Searches p" +
                    "age from Settings Area", new string[] {
                        "acl",
                        "Impact",
                        "EarnedMedia"});
#line 576
this.ScenarioSetup(scenarioInfo);
#line 577
 testRunner.Given("I login as \'Earned Media Enabled Company - Manager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 578
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 579
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table44.AddRow(new string[] {
                        "EarnedMediaImpact",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table44.AddRow(new string[] {
                        "EarnedMediaImpact",
                        "Access",
                        "",
                        "Status",
                        "Access Granted"});
            table44.AddRow(new string[] {
                        "EarnedMediaImpact",
                        "Access",
                        "",
                        "StatusCode",
                        "0"});
#line 580
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table44, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a sysadmin User should be allow to see Earned Media Searches in Keyword Searches " +
            "page from Settings Area")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Impact")]
        [NUnit.Framework.CategoryAttribute("EarnedMedia")]
        public virtual void ASysadminUserShouldBeAllowToSeeEarnedMediaSearchesInKeywordSearchesPageFromSettingsArea()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a sysadmin User should be allow to see Earned Media Searches in Keyword Searches " +
                    "page from Settings Area", new string[] {
                        "acl",
                        "Impact",
                        "EarnedMedia"});
#line 587
this.ScenarioSetup(scenarioInfo);
#line 588
 testRunner.Given("I login as \'Earned Media Enabled Company - Sysadmin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 589
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 590
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table45.AddRow(new string[] {
                        "EarnedMediaImpact",
                        "Access",
                        "",
                        "IsGranted",
                        "True"});
            table45.AddRow(new string[] {
                        "EarnedMediaImpact",
                        "Access",
                        "",
                        "Status",
                        "Access Granted"});
            table45.AddRow(new string[] {
                        "EarnedMediaImpact",
                        "Access",
                        "",
                        "StatusCode",
                        "0"});
#line 591
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table45, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a standard User should NOT be allow to see Earned Media Searches in Keyword Searc" +
            "hes page from Settings Area")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Impact")]
        [NUnit.Framework.CategoryAttribute("EarnedMedia")]
        public virtual void AStandardUserShouldNOTBeAllowToSeeEarnedMediaSearchesInKeywordSearchesPageFromSettingsArea()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a standard User should NOT be allow to see Earned Media Searches in Keyword Searc" +
                    "hes page from Settings Area", new string[] {
                        "acl",
                        "Impact",
                        "EarnedMedia"});
#line 598
this.ScenarioSetup(scenarioInfo);
#line 599
 testRunner.Given("I login as \'Earned Media Enabled Company - Standard\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 600
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 601
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table46.AddRow(new string[] {
                        "EarnedMediaImpact",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table46.AddRow(new string[] {
                        "EarnedMediaImpact",
                        "Access",
                        "",
                        "Status",
                        "Permission Denied"});
            table46.AddRow(new string[] {
                        "EarnedMediaImpact",
                        "Access",
                        "",
                        "StatusCode",
                        "1"});
#line 602
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table46, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a readonly User should NOT be allow to see Earned Media Searches in Keyword Searc" +
            "hes page from Settings Area")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Impact")]
        [NUnit.Framework.CategoryAttribute("EarnedMedia")]
        public virtual void AReadonlyUserShouldNOTBeAllowToSeeEarnedMediaSearchesInKeywordSearchesPageFromSettingsArea()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a readonly User should NOT be allow to see Earned Media Searches in Keyword Searc" +
                    "hes page from Settings Area", new string[] {
                        "acl",
                        "Impact",
                        "EarnedMedia"});
#line 609
this.ScenarioSetup(scenarioInfo);
#line 610
 testRunner.Given("I login as \'Earned Media Enabled Company - ReadOnly\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 611
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 612
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table47.AddRow(new string[] {
                        "EarnedMediaImpact",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table47.AddRow(new string[] {
                        "EarnedMediaImpact",
                        "Access",
                        "",
                        "Status",
                        "Permission Denied"});
            table47.AddRow(new string[] {
                        "EarnedMediaImpact",
                        "Access",
                        "",
                        "StatusCode",
                        "1"});
#line 613
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table47, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a AE User should NOT be allow to see Earned Media Searches in Keyword Searches pa" +
            "ge from Settings Area")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Impact")]
        [NUnit.Framework.CategoryAttribute("EarnedMedia")]
        public virtual void AAEUserShouldNOTBeAllowToSeeEarnedMediaSearchesInKeywordSearchesPageFromSettingsArea()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a AE User should NOT be allow to see Earned Media Searches in Keyword Searches pa" +
                    "ge from Settings Area", new string[] {
                        "acl",
                        "Impact",
                        "EarnedMedia"});
#line 620
this.ScenarioSetup(scenarioInfo);
#line 621
 testRunner.Given("I login as \'Earned Media Enabled Company - AE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 622
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 623
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table48.AddRow(new string[] {
                        "EarnedMediaImpact",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table48.AddRow(new string[] {
                        "EarnedMediaImpact",
                        "Access",
                        "",
                        "Status",
                        "Permission Denied"});
            table48.AddRow(new string[] {
                        "EarnedMediaImpact",
                        "Access",
                        "",
                        "StatusCode",
                        "1"});
#line 624
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table48, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A read only user should not have access to Settings Alert Management")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void AReadOnlyUserShouldNotHaveAccessToSettingsAlertManagement()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A read only user should not have access to Settings Alert Management", new string[] {
                        "acl",
                        "Ignore"});
#line 631
this.ScenarioSetup(scenarioInfo);
#line 634
 testRunner.Given("I login as \'ACL ReadOnly User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 635
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 636
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table49.AddRow(new string[] {
                        "NewsAlertManagement",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table49.AddRow(new string[] {
                        "NewsAlertManagement",
                        "Access",
                        "",
                        "Status",
                        "Permission Denied"});
            table49.AddRow(new string[] {
                        "NewsAlertManagement",
                        "Access",
                        "",
                        "StatusCode",
                        "1"});
#line 637
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table49, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A User will not have access to Settings Alert Management when SettingsAlertsManag" +
            "ement is False")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void AUserWillNotHaveAccessToSettingsAlertManagementWhenSettingsAlertsManagementIsFalse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A User will not have access to Settings Alert Management when SettingsAlertsManag" +
                    "ement is False", new string[] {
                        "acl",
                        "Ignore"});
#line 644
this.ScenarioSetup(scenarioInfo);
#line 647
 testRunner.Given("I login as \'Manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 648
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 649
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table50.AddRow(new string[] {
                        "NewsAlertManagement",
                        "Access",
                        "",
                        "IsGranted",
                        "False"});
            table50.AddRow(new string[] {
                        "NewsAlertManagement",
                        "Access",
                        "",
                        "Status",
                        "Permission Denied"});
            table50.AddRow(new string[] {
                        "NewsAlertManagement",
                        "Access",
                        "",
                        "StatusCode",
                        "1"});
#line 650
 testRunner.And("ACLS permissions for Settings should be:", ((string)(null)), table50, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A User with Reconnect Configured Should be able to see this settings enabled")]
        [NUnit.Framework.CategoryAttribute("acl")]
        public virtual void AUserWithReconnectConfiguredShouldBeAbleToSeeThisSettingsEnabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A User with Reconnect Configured Should be able to see this settings enabled", new string[] {
                        "acl"});
#line 658
this.ScenarioSetup(scenarioInfo);
#line 659
 testRunner.Given("I login as \'Reconnect User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 660
 testRunner.When("I perform a GET ACLS permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 661
 testRunner.Then("ACLS Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "subProperty",
                        "subPropertyOther",
                        "permission",
                        "value"});
            table51.AddRow(new string[] {
                        "ReConnect",
                        "",
                        "",
                        "CanCreate",
                        "False"});
            table51.AddRow(new string[] {
                        "ReConnect",
                        "",
                        "",
                        "CanDelete",
                        "False"});
            table51.AddRow(new string[] {
                        "ReConnect",
                        "",
                        "",
                        "CanEdit",
                        "False"});
            table51.AddRow(new string[] {
                        "ReConnect",
                        "",
                        "",
                        "CanView",
                        "True"});
            table51.AddRow(new string[] {
                        "ReConnect",
                        "",
                        "",
                        "IsDemo",
                        "False"});
            table51.AddRow(new string[] {
                        "ReConnect",
                        "",
                        "",
                        "ShowFeaturedImage",
                        "True"});
            table51.AddRow(new string[] {
                        "ReConnect",
                        "Services",
                        "",
                        "HasAccessToCisionNews",
                        "True"});
#line 662
 testRunner.And("ACLS permissions for Distribution should be:", ((string)(null)), table51, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

