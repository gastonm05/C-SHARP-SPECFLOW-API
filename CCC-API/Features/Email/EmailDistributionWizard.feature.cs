// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CCC_API.Features.Email
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("EmailDistributionWizard")]
    public partial class EmailDistributionWizardFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EmailDistributionWizard.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "EmailDistributionWizard", "\tIn order to send email distributions\r\n\tAs a user\r\n\tI should be able to create my" +
                    " emails", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Email > Convert word document to html")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("publishers")]
        [NUnit.Framework.CategoryAttribute("email_distribution")]
        [NUnit.Framework.TestCaseAttribute("FormattedText.docx", "FormattedDocxTextExp.txt", null)]
        [NUnit.Framework.TestCaseAttribute("FormattedText.doc", "FormattedDocTextExp.txt", null)]
        public virtual void EmailConvertWordDocumentToHtml(string typeFile, string expFile, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "publishers",
                    "email_distribution",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Email > Convert word document to html", @__tags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("shared session for \'standard\' user with edition \'Publishers manager user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When(string.Format("I post a word file \'{0}\' to the worddoctohtml endpoint", typeFile), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then(string.Format("the response should be html code that can be compared to expected \'{0}\'", expFile), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Email > Save Html template")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("publishers")]
        [NUnit.Framework.CategoryAttribute("email_distribution")]
        public virtual void EmailSaveHtmlTemplate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Email > Save Html template", new string[] {
                        "publishers",
                        "email_distribution",
                        "ignore"});
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.Given("I remember file \'IlluminaHtmlTemplate.txt\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.Given("shared session for \'standard\' user with edition \'Publishers manager user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.When("I post html code \'IlluminaHtmlTemplate.txt\' to htmltemplates/user endpoint with \'" +
                    "some\' name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("html template is saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 23
 testRunner.And("I can find html template among custom templates \'IlluminaHtmlTemplate.txt\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.And("I can see html template thumbnail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.And("I delete html template Publishers admin user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Email > Edit Html template")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("publishers")]
        [NUnit.Framework.CategoryAttribute("email_distribution")]
        public virtual void EmailEditHtmlTemplate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Email > Edit Html template", new string[] {
                        "publishers",
                        "email_distribution",
                        "ignore"});
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.Given("I remember file \'IlluminaHtmlTemplate.txt\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
 testRunner.Given("session for \'system_admin\' user with edition \'Manager user Campaign-Enabled compa" +
                    "ny\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
 testRunner.Given("I create email html template \'IlluminaHtmlTemplate.txt\' with name \'50\' chars", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
 testRunner.When("I edit (put) html template", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then("the operation \'htmltemplates/user response\' is \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 34
 testRunner.Then("I can find html template among custom templates \'IlluminaHtmlTemplate.txt\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 35
 testRunner.And("I delete html template", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Email > Delete Html template")]
        [NUnit.Framework.CategoryAttribute("publishers")]
        [NUnit.Framework.CategoryAttribute("email_distribution")]
        public virtual void EmailDeleteHtmlTemplate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Email > Delete Html template", new string[] {
                        "publishers",
                        "email_distribution"});
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.Given("I remember file \'IlluminaHtmlTemplate.txt\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
 testRunner.Given("shared session for \'system_admin\' user with edition \'ESAManager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
 testRunner.Given("I create email html template \'IlluminaHtmlTemplate.txt\' with name \'10\' chars", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
 testRunner.When("I delete html template", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
 testRunner.Then("the operation \'htmltemplates/user response\' is \'204\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 44
 testRunner.Then("I cannot find html template among custom templates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Email > Submit Email With Additional Recipients")]
        [NUnit.Framework.CategoryAttribute("publishers")]
        [NUnit.Framework.CategoryAttribute("email_distribution")]
        [NUnit.Framework.TestCaseAttribute("now", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("in future", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("now", "yes", "yes", null)]
        public virtual void EmailSubmitEmailWithAdditionalRecipients(string schedule_Type, string contacts, string outlets, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "publishers",
                    "email_distribution"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Email > Submit Email With Additional Recipients", @__tags);
#line 47
this.ScenarioSetup(scenarioInfo);
#line 48
 testRunner.Given("shared session for \'standard\' user with edition \'Manager user Campaign-Enabled co" +
                    "mpany\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "email"});
            table1.AddRow(new string[] {
                        "oleh.123.ilnytskyi@cision.com"});
            table1.AddRow(new string[] {
                        "test-9876543210@gmail.com"});
            table1.AddRow(new string[] {
                        "tst.tst=tst@o2.co.uk"});
            table1.AddRow(new string[] {
                        "i_want@to.travel"});
            table1.AddRow(new string[] {
                        "so+me@localhost"});
            table1.AddRow(new string[] {
                        "!#$%&*+-/=?^_`very@very-wierd.dot.dot.com"});
            table1.AddRow(new string[] {
                        "t-t@yahoo.co.jp"});
#line 49
 testRunner.Given("a few common email addresses:", ((string)(null)), table1, "Given ");
#line 58
 testRunner.Given("I remember avaliable email credits for the company", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 59
 testRunner.When(string.Format("I create email distribution to \'{0}\' \'{1}\' with additional recipients with schedu" +
                        "le type \'{2}\'", contacts, outlets, schedule_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
 testRunner.And("company credits are charged for unique emails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Email > Unique email count")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("publishers")]
        [NUnit.Framework.CategoryAttribute("email_distribution")]
        [NUnit.Framework.TestCaseAttribute("contacts,outlets,additional", null)]
        [NUnit.Framework.TestCaseAttribute("additional", null)]
        [NUnit.Framework.TestCaseAttribute("contacts", null)]
        [NUnit.Framework.TestCaseAttribute("outlets", null)]
        public virtual void EmailUniqueEmailCount(string recipients, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "publishers",
                    "email_distribution",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Email > Unique email count", @__tags);
#line 69
this.ScenarioSetup(scenarioInfo);
#line 70
 testRunner.Given("shared session for \'standard\' user with edition \'Manager user Campaign-Enabled co" +
                    "mpany\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "email"});
            table2.AddRow(new string[] {
                        "oleh.123.ilnytskyi@cision.com"});
            table2.AddRow(new string[] {
                        "test-9876543210@gmail.com"});
            table2.AddRow(new string[] {
                        "som$other@o2.co.uk"});
            table2.AddRow(new string[] {
                        "duplicate@dot.dot.dot"});
            table2.AddRow(new string[] {
                        "duplicate@dot.dot.dot"});
#line 71
 testRunner.Given("a few common email addresses:", ((string)(null)), table2, "Given ");
#line 78
 testRunner.When(string.Format("I perform POST to email/distribution/uniqueemailcount with \'{0}\'", recipients), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 79
 testRunner.Then("I see a number of unique emails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Email > Email with SendCopy, OverrideAddress, Analytics Tracking")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("publishers")]
        [NUnit.Framework.CategoryAttribute("email_distribution")]
        [NUnit.Framework.CategoryAttribute("email_analytics")]
        [NUnit.Framework.TestCaseAttribute("Publishers manager user", "standard", "true", "in future", "true", "GoogleAnalytics", "{\"utm_source\":\"cision\",\"utm_medium\":\"200x100banner\",\"utm_campaign\":\"jobs\",\"utm_te" +
            "rm\":\"seo_services\",\"utm_content\":\"content\"}", null)]
        [NUnit.Framework.TestCaseAttribute("Manager user Campaign-Enabled company", "standard", "true", "now", "false", "Eloqua", "{\"campaign_source\":\"eloqua\",\"campaign_name\":\"eloqua\"}", null)]
        [NUnit.Framework.TestCaseAttribute("Publishers social company, custom fields", "standard", "false", "in future", "false", "AdobeMarketingCloud", "{\"keyword\":\"email\",\"categoryID\":\"email\"}", null)]
        [NUnit.Framework.TestCaseAttribute("Publishers manager user", "system_admin", "true", "in future", "true", "Hubspot", "{\"utm_source\":\"purchased_last-30-days\",\"utm_content\":\"20-off-offer\",\"utm_medium\":" +
            "\"email\",\"utm_campaign\":\"BMX15\",\"utm_term\":\"bicycles\"}", null)]
        [NUnit.Framework.TestCaseAttribute("Publishers manager user", "standard", "false", "in future", "false", "Other", "{\"utm_medium\":\"display\",\"utm_source\":\"cision.com\",\"utm_content\":\"SearchLandArticl" +
            "e\"}", null)]
        public virtual void EmailEmailWithSendCopyOverrideAddressAnalyticsTracking(string edition, string permission, string override_Address, string schedule_Type, string send_Copy, string tracking_Type, string parameters, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "publishers",
                    "email_distribution",
                    "email_analytics",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Email > Email with SendCopy, OverrideAddress, Analytics Tracking", @__tags);
#line 88
this.ScenarioSetup(scenarioInfo);
#line 89
 testRunner.Given(string.Format("shared session for \'{0}\' user with edition \'{1}\'", permission, edition), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 90
 testRunner.When(string.Format("I POST email distribution with \'{0}\', \'{1}\', \'{2}\', tracking type: \'{3}\', \'{4}\'", schedule_Type, send_Copy, override_Address, tracking_Type, parameters), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 91
 testRunner.And("I retrieve distribution infromation from tables Distribution, DistributionEmail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
 testRunner.Then(string.Format("distribution has tracking type: \'{0}\' and parameters: \'{1}\' in DB", tracking_Type, parameters), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 93
 testRunner.And("distribution has other parameters saved in DB to tables Distribution, Distributio" +
                    "nEmail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Email > Schedule email distribution > Unschedule")]
        [NUnit.Framework.CategoryAttribute("publishers")]
        [NUnit.Framework.CategoryAttribute("email_distribution")]
        [NUnit.Framework.CategoryAttribute("ownership")]
        [NUnit.Framework.TestCaseAttribute("Publishers manager user", "standard", "GMT Standard Time", "contacts", null)]
        [NUnit.Framework.TestCaseAttribute("Publishers manager user", "system_admin", "W. Europe Standard Time", "contacts,outlets", null)]
        public virtual void EmailScheduleEmailDistributionUnschedule(string edition, string permission, string timezone, string recipients, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "publishers",
                    "email_distribution",
                    "ownership"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Email > Schedule email distribution > Unschedule", @__tags);
#line 104
this.ScenarioSetup(scenarioInfo);
#line 105
 testRunner.Given(string.Format("session for \'{0}\' user with edition \'{1}\'", permission, edition), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 106
 testRunner.When(string.Format("I schedule (POST) email distribution with: {0}, {1}", timezone, recipients), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 107
 testRunner.Then("scheduled \'Email\' activity contains correct publication state, content, date time" +
                    ", owner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 108
 testRunner.When("I unschedule (POST) email distribution", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 109
 testRunner.Then("can find activity of \'Email\' and \'Draft\' activity listed among published activiti" +
                    "es", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Email > Design your Email > Merge Fields")]
        [NUnit.Framework.CategoryAttribute("publishers")]
        [NUnit.Framework.CategoryAttribute("email_distribution")]
        [NUnit.Framework.TestCaseAttribute("Publishers manager user", "standard", "MediaContact", "EmailMergeFieldsContacts.json", null)]
        [NUnit.Framework.TestCaseAttribute("Publishers manager user", "system_admin", "MediaOutlet", "EmailMergeFieldsOutlets.json", null)]
        [NUnit.Framework.TestCaseAttribute("Manager user Campaign-Enabled company", "standard", "MediaContact,MediaOutlet", "EmailMergeFieldsContactsOutlets.json", null)]
        public virtual void EmailDesignYourEmailMergeFields(string edition, string permission, string recipients_Type, string file, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "publishers",
                    "email_distribution"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Email > Design your Email > Merge Fields", @__tags);
#line 117
this.ScenarioSetup(scenarioInfo);
#line 118
 testRunner.Given(string.Format("I remember file \'{0}\'", file), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 119
 testRunner.And(string.Format("shared session for \'{0}\' user with edition \'{1}\'", permission, edition), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 120
 testRunner.When(string.Format("I GET email merge fields for \'{0}\'", recipients_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 121
 testRunner.Then(string.Format("response contains merge fields from file \'{0}\'", file), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

