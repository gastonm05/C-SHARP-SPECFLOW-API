// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CCC_API.Features.Settings.UserManagement
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UserManagement")]
    public partial class UserManagementFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UserManagement.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UserManagement", "\tTo verify UserManagement section it\'s working properly we validate all possible " +
                    "scenarios \r\n\tin the creation and modification of users using all availables User" +
                    " Types.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate that a User can save his selected default page")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("UserManagement")]
        public virtual void ValidateThatAUserCanSaveHisSelectedDefaultPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate that a User can save his selected default page", new string[] {
                        "acl",
                        "UserManagement"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("the API test data \'UserManagerData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And("I login as \'User Management Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.When("I perform a GET for management/user/management  endpoint to get existing OMC user" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.And("I perform a PUT for management/user/management endpoint to set \'news.since\' as de" +
                    "fault page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.Then("I verify PUT transaction was successfully completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate that a Sysadmin User can reset his password using Forgot Password flow f" +
            "or a company with Advance Security Password enabled.")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("UserManagement")]
        [NUnit.Framework.CategoryAttribute("Password")]
        [NUnit.Framework.CategoryAttribute("Forgot")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("Reset")]
        public virtual void ValidateThatASysadminUserCanResetHisPasswordUsingForgotPasswordFlowForACompanyWithAdvanceSecurityPasswordEnabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate that a Sysadmin User can reset his password using Forgot Password flow f" +
                    "or a company with Advance Security Password enabled.", new string[] {
                        "acl",
                        "UserManagement",
                        "Password",
                        "Forgot",
                        "Settings",
                        "Reset"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("the API test data \'ForgotPasswordData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.And("I perform a POST to api/v1/management/user/password/forgot endpoint to start rese" +
                    "t password flow", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.Then("Forgot Password Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
 testRunner.And("I get from DB recently created UserAccountResetPasswordid for this user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.When("I perform a POST on Reset Password Endpoint using \'Advanced\' password security", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
 testRunner.Then("Reset Password Endpoint response should be \'200\' and status code be \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate that a Sysadmin User can reset his password using Forgot Password flow f" +
            "or a company with Advance Security Password disabled.")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("UserManagement")]
        [NUnit.Framework.CategoryAttribute("Password")]
        [NUnit.Framework.CategoryAttribute("Forgot")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("Reset")]
        public virtual void ValidateThatASysadminUserCanResetHisPasswordUsingForgotPasswordFlowForACompanyWithAdvanceSecurityPasswordDisabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate that a Sysadmin User can reset his password using Forgot Password flow f" +
                    "or a company with Advance Security Password disabled.", new string[] {
                        "acl",
                        "UserManagement",
                        "Password",
                        "Forgot",
                        "Settings",
                        "Reset"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("the API test data \'ForgotPasswordRegularData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
 testRunner.And("I perform a POST to api/v1/management/user/password/forgot endpoint to start rese" +
                    "t password flow", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.Then("Forgot Password Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 27
 testRunner.And("I get from DB recently created UserAccountResetPasswordid for this user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.When("I perform a POST on Reset Password Endpoint using \'Regular\' password security", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("Reset Password Endpoint response should be \'200\' and status code be \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate that a Sysadmin User cannot reset his password using a password without " +
            "haveing at least 8 charsfor a company with Advance Security Password enabled.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("UserManagement")]
        [NUnit.Framework.CategoryAttribute("Password")]
        [NUnit.Framework.CategoryAttribute("Forgot")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("Reset")]
        public virtual void ValidateThatASysadminUserCannotResetHisPasswordUsingAPasswordWithoutHaveingAtLeast8CharsforACompanyWithAdvanceSecurityPasswordEnabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate that a Sysadmin User cannot reset his password using a password without " +
                    "haveing at least 8 charsfor a company with Advance Security Password enabled.", new string[] {
                        "acl",
                        "UserManagement",
                        "Password",
                        "Forgot",
                        "Settings",
                        "Reset",
                        "Ignore"});
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
 testRunner.Given("the API test data \'ForgotPasswordData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 34
 testRunner.And("I perform a POST to api/v1/management/user/password/forgot endpoint to start rese" +
                    "t password flow", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.Then("Forgot Password Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 36
 testRunner.And("I get from DB recently created UserAccountResetPasswordid for this user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.When("I perform a POST on Reset Password Endpoint using \'Regular\' password security", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
 testRunner.Then("Reset Password Endpoint response should be \'200\' and status code be \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate that a Sysadmin User cannot reset his password using a password without " +
            "any number char for a company with Advance Security Password enabled.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("UserManagement")]
        [NUnit.Framework.CategoryAttribute("Password")]
        [NUnit.Framework.CategoryAttribute("Forgot")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("Reset")]
        public virtual void ValidateThatASysadminUserCannotResetHisPasswordUsingAPasswordWithoutAnyNumberCharForACompanyWithAdvanceSecurityPasswordEnabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate that a Sysadmin User cannot reset his password using a password without " +
                    "any number char for a company with Advance Security Password enabled.", new string[] {
                        "acl",
                        "UserManagement",
                        "Password",
                        "Forgot",
                        "Settings",
                        "Reset",
                        "Ignore"});
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("the API test data \'ForgotPasswordData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
 testRunner.And("I perform a POST to api/v1/management/user/password/forgot endpoint to start rese" +
                    "t password flow", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.Then("Forgot Password Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 45
 testRunner.And("I get from DB recently created UserAccountResetPasswordid for this user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.When("I perform a POST on Reset Password Endpoint using \'AnyNumberChar\' password securi" +
                    "ty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
 testRunner.Then("Reset Password Endpoint response should be \'200\' and status code be \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate that a Sysadmin User cannot reset his password using a password without " +
            "any letter char (A or a) for a company with Advance Security Password enabled.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("UserManagement")]
        [NUnit.Framework.CategoryAttribute("Password")]
        [NUnit.Framework.CategoryAttribute("Forgot")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("Reset")]
        public virtual void ValidateThatASysadminUserCannotResetHisPasswordUsingAPasswordWithoutAnyLetterCharAOrAForACompanyWithAdvanceSecurityPasswordEnabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate that a Sysadmin User cannot reset his password using a password without " +
                    "any letter char (A or a) for a company with Advance Security Password enabled.", new string[] {
                        "acl",
                        "UserManagement",
                        "Password",
                        "Forgot",
                        "Settings",
                        "Reset",
                        "Ignore"});
#line 50
this.ScenarioSetup(scenarioInfo);
#line 51
 testRunner.Given("the API test data \'ForgotPasswordData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 52
 testRunner.And("I perform a POST to api/v1/management/user/password/forgot endpoint to start rese" +
                    "t password flow", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.Then("Forgot Password Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 54
 testRunner.And("I get from DB recently created UserAccountResetPasswordid for this user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
 testRunner.When("I perform a POST on Reset Password Endpoint using \'AnyLetterChar\' password securi" +
                    "ty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
 testRunner.Then("Reset Password Endpoint response should be \'200\' and status code be \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate that a Sysadmin User cannot reset his password using a same as current p" +
            "assword for a company with Advance Security Password enabled.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("UserManagement")]
        [NUnit.Framework.CategoryAttribute("Password")]
        [NUnit.Framework.CategoryAttribute("Forgot")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("Reset")]
        public virtual void ValidateThatASysadminUserCannotResetHisPasswordUsingASameAsCurrentPasswordForACompanyWithAdvanceSecurityPasswordEnabled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate that a Sysadmin User cannot reset his password using a same as current p" +
                    "assword for a company with Advance Security Password enabled.", new string[] {
                        "acl",
                        "UserManagement",
                        "Password",
                        "Forgot",
                        "Settings",
                        "Reset",
                        "Ignore"});
#line 59
this.ScenarioSetup(scenarioInfo);
#line 60
 testRunner.Given("the API test data \'ForgotPasswordSameData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 61
 testRunner.And("I perform a POST to api/v1/management/user/password/forgot endpoint to start rese" +
                    "t password flow", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.Then("Forgot Password Endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 63
 testRunner.And("I get from DB recently created UserAccountResetPasswordid for this user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
 testRunner.When("I perform a POST on Reset Password Endpoint using \'SamePassword\' password securit" +
                    "y", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
 testRunner.Then("Reset Password Endpoint response should be \'200\' and status code be \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

