// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CCC_API.Features.Settings.KeywordSearches
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("KeywordSearches")]
    public partial class KeywordSearchesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "KeywordSearches.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "KeywordSearches", @"	To verify that KeywordSearches can be created, retrieved, modified and deleted
	As a valid CCC user from a Visible ON company with parameter c3keywordsearchesenabled set to true
	I want to call the MediaMonitoring endpoint - api/v1/management/monitoring", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An Admin User can create, list, and edit a Keyword Searches using both AND and OR" +
            " Keywords")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("KeywordSearches")]
        [NUnit.Framework.CategoryAttribute("NeedsCleanup")]
        public virtual void AnAdminUserCanCreateListAndEditAKeywordSearchesUsingBothANDAndORKeywords()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An Admin User can create, list, and edit a Keyword Searches using both AND and OR" +
                    " Keywords", new string[] {
                        "acl",
                        "Settings",
                        "KeywordSearches",
                        "NeedsCleanup",
                        "Ignore"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I login as \'ACL Keyword Automation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("the API test data \'KeywordSearchesTestData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
  testRunner.When("I perform a POST on MediaMonitoring endpoint to create a \'SAMPLE\' Keyword Search " +
                    "with \'ANDandOR\' Keywords with a search name with \'200\' characters and search ter" +
                    "m \'A AND B AND Z\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.And("I perform a POST on MediaMonitoring endpoint to create a \'NEW\' Keyword Search wit" +
                    "h \'ANDandOR\' Keywords with a search name with \'200\' characters and search term \'" +
                    "A AND B AND Z\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.Then("MediaMonitoring endpoint POST response code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 13
 testRunner.When("I perform a GET on MediaMonitoring endpoint for \'(Default)\' datagroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
 testRunner.Then("MediaMonitoring endpoint GET response code should be 200 for \'(Default)\' datagrou" +
                    "p", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 15
 testRunner.And("Verify that Name matchs with just created Keyword Search for \'(Default)\' datagrou" +
                    "p", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.When("I perform a PUT on MediaMonitoring endpoint to update just created Keyword Search" +
                    ".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.Then("MediaMonitoring endpoint PUT response code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
 testRunner.And("Modified Name and Keyword matchs with just updated Keyword Search for a \'ANDandOR" +
                    "\' search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An Admin User can create, list, and edit a Keyword Searches using only OR Keyword" +
            "s")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("KeywordSearches")]
        [NUnit.Framework.CategoryAttribute("NeedsCleanup")]
        public virtual void AnAdminUserCanCreateListAndEditAKeywordSearchesUsingOnlyORKeywords()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An Admin User can create, list, and edit a Keyword Searches using only OR Keyword" +
                    "s", new string[] {
                        "acl",
                        "Settings",
                        "KeywordSearches",
                        "NeedsCleanup",
                        "Ignore"});
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given("I login as \'ACL Keyword Automation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
 testRunner.And("the API test data \'KeywordSearchesTestData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
  testRunner.When("I perform a POST on MediaMonitoring endpoint to create a \'SAMPLE\' Keyword Search " +
                    "with \'OR\' Keywords with a search name with \'200\' characters and search term \'A A" +
                    "ND B AND Z\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.And("I perform a POST on MediaMonitoring endpoint to create a \'NEW\' Keyword Search wit" +
                    "h \'OR\' Keywords with a search name with \'200\' characters and search term \'A AND " +
                    "B AND Z\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.Then("MediaMonitoring endpoint POST response code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 27
 testRunner.When("I perform a GET on MediaMonitoring endpoint for \'(Default)\' datagroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then("MediaMonitoring endpoint GET response code should be 200 for \'(Default)\' datagrou" +
                    "p", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 29
 testRunner.And("Verify that Name matchs with just created Keyword Search for \'(Default)\' datagrou" +
                    "p", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.When("I perform a PUT on MediaMonitoring endpoint to update just created Keyword Search" +
                    ".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
 testRunner.Then("MediaMonitoring endpoint PUT response code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 32
 testRunner.And("Modified Name and Keyword matchs with just updated Keyword Search for a \'ANDandOR" +
                    "\' search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An Admin User can create, list, and edit a Keyword Searches using both AND and NO" +
            "T Keywords")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("KeywordSearches")]
        [NUnit.Framework.CategoryAttribute("NeedsCleanup")]
        public virtual void AnAdminUserCanCreateListAndEditAKeywordSearchesUsingBothANDAndNOTKeywords()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An Admin User can create, list, and edit a Keyword Searches using both AND and NO" +
                    "T Keywords", new string[] {
                        "acl",
                        "Settings",
                        "KeywordSearches",
                        "NeedsCleanup",
                        "Ignore"});
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
 testRunner.Given("I login as \'ACL Keyword Automation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
 testRunner.And("the API test data \'KeywordSearchesTestData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
  testRunner.When("I perform a POST on MediaMonitoring endpoint to create a \'SAMPLE\' Keyword Search " +
                    "with \'ANDandNOT\' Keywords with a search name with \'200\' characters and search te" +
                    "rm \'A AND B AND Z\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
 testRunner.And("I perform a POST on MediaMonitoring endpoint to create a \'NEW\' Keyword Search wit" +
                    "h \'ANDandNOT\' Keywords with a search name with \'200\' characters and search term " +
                    "\'A AND B AND Z\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.Then("MediaMonitoring endpoint POST response code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
 testRunner.When("I perform a GET on MediaMonitoring endpoint for \'(Default)\' datagroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
 testRunner.Then("MediaMonitoring endpoint GET response code should be 200 for \'(Default)\' datagrou" +
                    "p", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 43
 testRunner.And("Verify that Name matchs with just created Keyword Search for \'(Default)\' datagrou" +
                    "p", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.When("I perform a PUT on MediaMonitoring endpoint to update just created Keyword Search" +
                    ".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.Then("MediaMonitoring endpoint PUT response code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 46
 testRunner.And("Modified Name and Keyword matchs with just updated Keyword Search for a \'ANDandOR" +
                    "\' search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An Admin User can create, list, and edit a Keyword Searches using both OR and NOT" +
            " Keywords")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("KeywordSearches")]
        [NUnit.Framework.CategoryAttribute("NeedsCleanup")]
        public virtual void AnAdminUserCanCreateListAndEditAKeywordSearchesUsingBothORAndNOTKeywords()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An Admin User can create, list, and edit a Keyword Searches using both OR and NOT" +
                    " Keywords", new string[] {
                        "acl",
                        "Settings",
                        "KeywordSearches",
                        "NeedsCleanup",
                        "Ignore"});
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
 testRunner.Given("I login as \'ACL Keyword Automation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
 testRunner.And("the API test data \'KeywordSearchesTestData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
  testRunner.When("I perform a POST on MediaMonitoring endpoint to create a \'SAMPLE\' Keyword Search " +
                    "with \'ORandNOT\' Keywords with a search name with \'200\' characters and search ter" +
                    "m \'A AND B AND Z\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.And("I perform a POST on MediaMonitoring endpoint to create a \'NEW\' Keyword Search wit" +
                    "h \'ORandNOT\' Keywords with a search name with \'200\' characters and search term \'" +
                    "A AND B AND Z\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.Then("MediaMonitoring endpoint POST response code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 55
 testRunner.When("I perform a GET on MediaMonitoring endpoint for \'(Default)\' datagroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
 testRunner.Then("MediaMonitoring endpoint GET response code should be 200 for \'(Default)\' datagrou" +
                    "p", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 57
 testRunner.And("Verify that Name matchs with just created Keyword Search for \'(Default)\' datagrou" +
                    "p", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
 testRunner.When("I perform a PUT on MediaMonitoring endpoint to update just created Keyword Search" +
                    ".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
 testRunner.Then("MediaMonitoring endpoint PUT response code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 60
 testRunner.And("Modified Name and Keyword matchs with just updated Keyword Search for a \'ANDandOR" +
                    "\' search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An Admin User can create, list, and edit a Keyword Searches using all AND, OR and" +
            " NOT Keywords")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("KeywordSearches")]
        [NUnit.Framework.CategoryAttribute("NeedsCleanup")]
        public virtual void AnAdminUserCanCreateListAndEditAKeywordSearchesUsingAllANDORAndNOTKeywords()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An Admin User can create, list, and edit a Keyword Searches using all AND, OR and" +
                    " NOT Keywords", new string[] {
                        "acl",
                        "Settings",
                        "KeywordSearches",
                        "NeedsCleanup",
                        "Ignore"});
#line 63
this.ScenarioSetup(scenarioInfo);
#line 64
 testRunner.Given("I login as \'ACL Keyword Automation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 65
 testRunner.And("the API test data \'KeywordSearchesTestData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
  testRunner.When("I perform a POST on MediaMonitoring endpoint to create a \'SAMPLE\' Keyword Search " +
                    "with \'ANDORandNOT\' Keywords with a search name with \'200\' characters and search " +
                    "term \'A AND B AND Z\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 67
 testRunner.And("I perform a POST on MediaMonitoring endpoint to create a \'NEW\' Keyword Search wit" +
                    "h \'ANDORandNOT\' Keywords with a search name with \'200\' characters and search ter" +
                    "m \'A AND B AND Z\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.Then("MediaMonitoring endpoint POST response code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 69
 testRunner.When("I perform a GET on MediaMonitoring endpoint for \'(Default)\' datagroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.Then("MediaMonitoring endpoint GET response code should be 200 for \'(Default)\' datagrou" +
                    "p", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 71
 testRunner.And("Verify that Name matchs with just created Keyword Search for \'(Default)\' datagrou" +
                    "p", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.When("I perform a PUT on MediaMonitoring endpoint to update just created Keyword Search" +
                    ".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 73
 testRunner.Then("MediaMonitoring endpoint PUT response code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 74
 testRunner.And("Modified Name and Keyword matchs with just updated Keyword Search for a \'ANDandOR" +
                    "\' search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An Admin User should have different Keyword Searches results using different data" +
            "groups.")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("KeywordSearches")]
        public virtual void AnAdminUserShouldHaveDifferentKeywordSearchesResultsUsingDifferentDatagroups_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An Admin User should have different Keyword Searches results using different data" +
                    "groups.", new string[] {
                        "acl",
                        "Settings",
                        "KeywordSearches"});
#line 77
this.ScenarioSetup(scenarioInfo);
#line 78
 testRunner.Given("I login as \'Visible ON Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 79
 testRunner.And("the API test data \'KeywordSearchesTestData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
 testRunner.When("Change datagroup to \'(Default)\' datagroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 81
 testRunner.And("I perform a GET on MediaMonitoring endpoint for \'(Default)\' datagroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
 testRunner.Then("MediaMonitoring endpoint GET response code should be 200 for \'(Default)\' datagrou" +
                    "p", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 83
 testRunner.And("Returned Keyword Searches results should include \'(Default)\' datagroup result sea" +
                    "rch.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
 testRunner.When("Change datagroup to \'otro\' datagroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 85
 testRunner.And("I perform a GET on MediaMonitoring endpoint for \'otro\' datagroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.Then("MediaMonitoring endpoint GET response code should be 200 for \'otro\' datagroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 87
 testRunner.And("Returned Keyword Searches results should include \'otro\' datagroup result search.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An Admin User should have different Earned Media Keyword Searches results using d" +
            "ifferent datagroups.")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("KeywordSearches")]
        public virtual void AnAdminUserShouldHaveDifferentEarnedMediaKeywordSearchesResultsUsingDifferentDatagroups_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An Admin User should have different Earned Media Keyword Searches results using d" +
                    "ifferent datagroups.", new string[] {
                        "acl",
                        "Settings",
                        "KeywordSearches"});
#line 90
this.ScenarioSetup(scenarioInfo);
#line 91
 testRunner.Given("I login as \'Earned Media Enabled Company - Sysadmin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 92
 testRunner.And("the API test data \'KeywordSearchesTestData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
 testRunner.When("Change datagroup to \'(Default)\' datagroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 94
 testRunner.And("I perform a GET on MediaMonitoring endpoint for Earned Media \'(Default)\' datagrou" +
                    "p", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
 testRunner.Then("Earned Media MediaMonitoring endpoint GET response code should be 200 for \'(Defau" +
                    "lt)\' datagroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 96
 testRunner.And("Returned Earned Media Keyword Searches results should include \'(Default)\' datagro" +
                    "up result search.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
 testRunner.When("Change datagroup to \'Data Group 2\' datagroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 98
 testRunner.And("I perform a GET on MediaMonitoring endpoint for Earned Media \'Data Group 2\' datag" +
                    "roup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
 testRunner.Then("Earned Media MediaMonitoring endpoint GET response code should be 200 for \'Data G" +
                    "roup 2\' datagroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 100
 testRunner.And("Returned Earned Media Keyword Searches results should include \'Data Group 2\' data" +
                    "group result search.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An Admin User shouldn\'t be able to delete a Non-user created search (both Support" +
            " and EarnedM Media)")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("KeywordSearches")]
        public virtual void AnAdminUserShouldntBeAbleToDeleteANon_UserCreatedSearchBothSupportAndEarnedMMedia()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An Admin User shouldn\'t be able to delete a Non-user created search (both Support" +
                    " and EarnedM Media)", new string[] {
                        "acl",
                        "Settings",
                        "KeywordSearches"});
#line 103
this.ScenarioSetup(scenarioInfo);
#line 104
 testRunner.Given("I login as \'Visible ON Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 105
 testRunner.And("the API test data \'KeywordSearchesTestData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
 testRunner.When("Change datagroup to \'(Default)\' datagroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 107
 testRunner.Then("Delete a non user created (both Support and EarnedM Media) Keyword Search and res" +
                    "ponse code should be 403 and message \'You can not edit or delete a non user crea" +
                    "ted search.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An Admin User shouldn be able to get all Visible Keyword Search information for C" +
            "ountries, Languages and Sources combo boxes")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("KeywordSearches")]
        public virtual void AnAdminUserShouldnBeAbleToGetAllVisibleKeywordSearchInformationForCountriesLanguagesAndSourcesComboBoxes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An Admin User shouldn be able to get all Visible Keyword Search information for C" +
                    "ountries, Languages and Sources combo boxes", new string[] {
                        "acl",
                        "Settings",
                        "KeywordSearches"});
#line 110
this.ScenarioSetup(scenarioInfo);
#line 111
 testRunner.Given("I login as \'Visible ON Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 112
 testRunner.When("I perform a GET on NewsArchiveCountries endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 113
 testRunner.Then("NewsArchiveCountries endpoint GET response code should be 200 and returned data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 114
 testRunner.When("I perform a GET on NewsArchiveLanguages endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 115
 testRunner.Then("NewsArchiveLanguages endpoint GET response code should be 200 and returned data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 116
 testRunner.When("I perform a GET on NewsArchiveSources endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 117
 testRunner.Then("NewsArchiveSources endpoint GET response code should be 200 and returned data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An Admin User can create a Sample Keyword Search using all AND, OR and NOT Keywor" +
            "ds")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("KeywordSearches")]
        public virtual void AnAdminUserCanCreateASampleKeywordSearchUsingAllANDORAndNOTKeywords()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An Admin User can create a Sample Keyword Search using all AND, OR and NOT Keywor" +
                    "ds", new string[] {
                        "acl",
                        "Settings",
                        "KeywordSearches",
                        "Ignore"});
#line 120
this.ScenarioSetup(scenarioInfo);
#line 121
 testRunner.Given("I login as \'ACL Keyword Automation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 122
 testRunner.And("the API test data \'KeywordSearchesTestData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
 testRunner.When("I perform a POST on MediaMonitoring endpoint to create a \'SAMPLE\' Keyword Search " +
                    "with \'AND\' Keywords with a search name with \'200\' characters and search term \'A " +
                    "AND B AND Z\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 124
 testRunner.Then("Sample MediaMonitoring Search endpoint POST response code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 125
 testRunner.And("Verify return results are correct for \'SAMPLE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An Admin User can verify 200 Character Limit for Name Keyword Search field using " +
            "a over limit value.")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("KeywordSearches")]
        public virtual void AnAdminUserCanVerify200CharacterLimitForNameKeywordSearchFieldUsingAOverLimitValue_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An Admin User can verify 200 Character Limit for Name Keyword Search field using " +
                    "a over limit value.", new string[] {
                        "acl",
                        "Settings",
                        "KeywordSearches",
                        "Ignore"});
#line 128
this.ScenarioSetup(scenarioInfo);
#line 129
 testRunner.Given("I login as \'ACL Keyword Automation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 130
 testRunner.And("the API test data \'KeywordSearchesTestData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
 testRunner.When("I perform a POST on MediaMonitoring endpoint to create a \'SAMPLE\' Keyword Search " +
                    "with \'NAMELIMIT\' Keywords with a search name with \'201\' characters and search te" +
                    "rm \'A AND B AND Z\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 132
 testRunner.And("I perform a POST on MediaMonitoring endpoint to create a \'NEWNAMELIMIT\' Keyword S" +
                    "earch with \'AND\' Keywords with a search name with \'201\' characters and search te" +
                    "rm \'A AND B AND Z\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 133
 testRunner.Then("MediaMonitoring endpoint POST response code should be 500", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 134
 testRunner.And("returned message is \'Search name cannot be more than 200 characters long\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An Admin User can verify 200 Character Limit for Name Keyword Search field using " +
            "a under limit value.")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("KeywordSearches")]
        [NUnit.Framework.CategoryAttribute("NeedsCleanup")]
        public virtual void AnAdminUserCanVerify200CharacterLimitForNameKeywordSearchFieldUsingAUnderLimitValue_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An Admin User can verify 200 Character Limit for Name Keyword Search field using " +
                    "a under limit value.", new string[] {
                        "acl",
                        "Settings",
                        "KeywordSearches",
                        "NeedsCleanup"});
#line 137
this.ScenarioSetup(scenarioInfo);
#line 138
 testRunner.Given("I login as \'ACL Keyword Automation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 139
 testRunner.And("the API test data \'KeywordSearchesTestData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
 testRunner.When("I perform a POST on MediaMonitoring endpoint to create a \'SAMPLE\' Keyword Search " +
                    "with \'NAMELIMIT\' Keywords with a search name with \'200\' characters and search te" +
                    "rm \'A AND B AND Z\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 141
 testRunner.And("I perform a POST on MediaMonitoring endpoint to create a \'NEWNAMELIMIT\' Keyword S" +
                    "earch with \'AND\' Keywords with a search name with \'200\' characters and search te" +
                    "rm \'A AND B AND Z\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
 testRunner.Then("MediaMonitoring endpoint POST response code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An Admin User can create, list, and edit a Keyword Searches using Advanced Boolea" +
            "n Keywords.")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("KeywordSearches")]
        [NUnit.Framework.CategoryAttribute("NeedsCleanup")]
        public virtual void AnAdminUserCanCreateListAndEditAKeywordSearchesUsingAdvancedBooleanKeywords_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An Admin User can create, list, and edit a Keyword Searches using Advanced Boolea" +
                    "n Keywords.", new string[] {
                        "acl",
                        "Settings",
                        "KeywordSearches",
                        "NeedsCleanup"});
#line 145
this.ScenarioSetup(scenarioInfo);
#line 146
 testRunner.Given("I login as \'ACL Keyword Automation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 147
 testRunner.And("the API test data \'KeywordSearchesTestData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
  testRunner.When("I perform a POST on MediaMonitoring endpoint to create a \'SAMPLE\' Keyword Search " +
                    "with \'ADVANCED\' Keywords with a search name with \'200\' characters and search ter" +
                    "m A AND B AND Z", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 149
 testRunner.And("I perform a POST on MediaMonitoring endpoint to create a \'NEW\' Keyword Search wit" +
                    "h \'ANDandOR\' Keywords with a search name with \'200\' characters and search term A" +
                    " AND B AND Z", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.Then("MediaMonitoring endpoint POST response code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 151
 testRunner.When("I perform a GET on MediaMonitoring endpoint for \'(Default)\' datagroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 152
 testRunner.Then("MediaMonitoring endpoint GET response code should be 200 for \'(Default)\' datagrou" +
                    "p", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 153
 testRunner.And("Verify that Name matchs with just created Keyword Search for \'(Default)\' datagrou" +
                    "p", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 154
 testRunner.When("I perform a PUT on MediaMonitoring endpoint to update just created Keyword Search" +
                    ".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 155
    testRunner.Then("MediaMonitoring endpoint PUT response code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 156
 testRunner.And("Modified Name and Keyword matchs with just updated Keyword Search for a \'ADVANCED" +
                    "\' search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Manager User should NOT be allow to Save a Advanced Boolean Keywords search wit" +
            "h invalid values")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("KeywordSearches")]
        [NUnit.Framework.TestCaseAttribute("a w/2(b and c)", "Proximity matches must be used with either single terms or OR lists of terms on b" +
            "oth sides (left: OrionTerm, right: MultiTermAndFilter)", "110", null)]
        [NUnit.Framework.TestCaseAttribute("atleast2(a and b)", "Atleast2() can only be used with a single term", "110", null)]
        [NUnit.Framework.TestCaseAttribute("a and not atleast2(b)", "Multiple mentions cannot be used with NOT", "110", null)]
        [NUnit.Framework.TestCaseAttribute("a w/2 b*", "Cannot have a wildcard term with proximity search", "110", null)]
        [NUnit.Framework.TestCaseAttribute("A (AND B)", "Search term is not preceded/followed by a search term (current token: AND, curren" +
            "t position: 3, current search: A (AND B))", "110", null)]
        [NUnit.Framework.TestCaseAttribute("a or (not b)", "OR (NOT is not valid syntax", "111", null)]
        [NUnit.Framework.TestCaseAttribute("(a", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 1, current search: (a)", "104", null)]
        [NUnit.Framework.TestCaseAttribute("A headline() AND B", "Search clause contains a query modifier that does not precede a search term (curr" +
            "ent token: (, current position: 10, current search: A headline() AND B)", "108", null)]
        [NUnit.Framework.TestCaseAttribute("AND a", "AND cannot be at the beginning of the query (current token: AND, current position" +
            ": 0, current search: AND a)", "103", null)]
        [NUnit.Framework.TestCaseAttribute("OR a", "OR cannot be at the beginning of the query (current token: OR, current position: " +
            "0, current search: OR a)", "103", null)]
        [NUnit.Framework.TestCaseAttribute("a AND", "AND/OR cannot be at the end of the query (current token: , current position: 4, c" +
            "urrent search: a AND)", "102", null)]
        [NUnit.Framework.TestCaseAttribute("a OR", "AND/OR cannot be at the end of the query (current token: , current position: 3, c" +
            "urrent search: a OR)", "102", null)]
        [NUnit.Framework.TestCaseAttribute("", "Search cannot be blank", "100", null)]
        [NUnit.Framework.TestCaseAttribute("\"unending", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 8, current search: \"unending)", "104", null)]
        [NUnit.Framework.TestCaseAttribute("\"unending quotes", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 15, current search: \"unending quotes)", "104", null)]
        [NUnit.Framework.TestCaseAttribute("\"\"", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 1, current search: \"\")", "104", null)]
        [NUnit.Framework.TestCaseAttribute("\"", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 0, current search: \")", "104", null)]
        [NUnit.Framework.TestCaseAttribute("AND \"foo\"", "AND cannot be at the beginning of the query (current token: AND, current position" +
            ": 0, current search: AND \"foo\")", "103", null)]
        [NUnit.Framework.TestCaseAttribute("\"foo\" AND", "AND/OR cannot be at the end of the query (current token: , current position: 8, c" +
            "urrent search: \"foo\" AND)", "102", null)]
        [NUnit.Framework.TestCaseAttribute("OR \"foo\"", "OR cannot be at the beginning of the query (current token: OR, current position: " +
            "0, current search: OR \"foo\")", "103", null)]
        [NUnit.Framework.TestCaseAttribute("\"foo\" OR", "AND/OR cannot be at the end of the query (current token: , current position: 7, c" +
            "urrent search: \"foo\" OR)", "102", null)]
        [NUnit.Framework.TestCaseAttribute("foo AND NOT", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 10, current search: foo AND NOT)", "104", null)]
        [NUnit.Framework.TestCaseAttribute("AND NOT foo", "AND cannot be at the beginning of the query (current token: AND, current position" +
            ": 0, current search: AND NOT foo)", "103", null)]
        [NUnit.Framework.TestCaseAttribute("\"foo\" AND NOT", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 12, current search: \"foo\" AND NOT)", "104", null)]
        [NUnit.Framework.TestCaseAttribute("AND NOT \"foo\"", "AND cannot be at the beginning of the query (current token: AND, current position" +
            ": 0, current search: AND NOT \"foo\")", "103", null)]
        [NUnit.Framework.TestCaseAttribute("()", "Search clause cannot end with a query modifier or  Search clause contains a boole" +
            "an AND/OR operator that is not followed by a search term (current token: ), curr" +
            "ent position: 1, current search: ())", "105", null)]
        [NUnit.Framework.TestCaseAttribute("(())", "Search clause cannot end with a query modifier or  Search clause contains a boole" +
            "an AND/OR operator that is not followed by a search term (current token: ), curr" +
            "ent position: 2, current search: (()))", "105", null)]
        [NUnit.Framework.TestCaseAttribute("(foo", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 3, current search: (foo)", "104", null)]
        [NUnit.Framework.TestCaseAttribute("(\"foo\"", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 5, current search: (\"foo\")", "104", null)]
        [NUnit.Framework.TestCaseAttribute("foo)", "Search clause cannot end with a query modifier or  Search clause contains a boole" +
            "an AND/OR operator that is not followed by a search term (current token: ), curr" +
            "ent position: 3, current search: foo))", "105", null)]
        [NUnit.Framework.TestCaseAttribute("\"foo\")", "Search clause cannot end with a query modifier or  Search clause contains a boole" +
            "an AND/OR operator that is not followed by a search term (current token: ), curr" +
            "ent position: 5, current search: \"foo\"))", "105", null)]
        [NUnit.Framework.TestCaseAttribute("cs()", "Search clause cannot end with a query modifier or  Search clause contains a boole" +
            "an AND/OR operator that is not followed by a search term (current token: ), curr" +
            "ent position: 3, current search: cs())", "105", null)]
        [NUnit.Framework.TestCaseAttribute("cs(\"foo\"", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 7, current search: cs(\"foo\")", "104", null)]
        [NUnit.Framework.TestCaseAttribute("cs(foo", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 5, current search: cs(foo)", "104", null)]
        [NUnit.Framework.TestCaseAttribute("CS(\"foo\")", "The given key was not present in the dictionary.", "110", null)]
        [NUnit.Framework.TestCaseAttribute("HEADLINE(\"FOO\")", "The given key was not present in the dictionary.", "110", null)]
        [NUnit.Framework.TestCaseAttribute("headline()", "Search clause cannot end with a query modifier or  Search clause contains a boole" +
            "an AND/OR operator that is not followed by a search term (current token: ), curr" +
            "ent position: 9, current search: headline())", "105", null)]
        [NUnit.Framework.TestCaseAttribute("headline(\"foo\"", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 13, current search: headline(\"foo\")", "104", null)]
        [NUnit.Framework.TestCaseAttribute("headline(foo", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 11, current search: headline(foo)", "104", null)]
        [NUnit.Framework.TestCaseAttribute("publication()", "Search clause cannot end with a query modifier or  Search clause contains a boole" +
            "an AND/OR operator that is not followed by a search term (current token: ), curr" +
            "ent position: 12, current search: publication())", "105", null)]
        [NUnit.Framework.TestCaseAttribute("PUBLICATION(\"foo\")", "The given key was not present in the dictionary.", "110", null)]
        [NUnit.Framework.TestCaseAttribute("publication(\"foo\"", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 16, current search: publication(\"foo\")", "104", null)]
        [NUnit.Framework.TestCaseAttribute("publication(foo", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 14, current search: publication(foo)", "104", null)]
        [NUnit.Framework.TestCaseAttribute("atleast2()", "Search clause cannot end with a query modifier or  Search clause contains a boole" +
            "an AND/OR operator that is not followed by a search term (current token: ), curr" +
            "ent position: 9, current search: atleast2())", "105", null)]
        [NUnit.Framework.TestCaseAttribute("ATLEAST2(\"foo\")", "The given key was not present in the dictionary.", "110", null)]
        [NUnit.Framework.TestCaseAttribute("atleast2(\"foo\"", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 13, current search: atleast2(\"foo\")", "104", null)]
        [NUnit.Framework.TestCaseAttribute("atleast2(foo", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 11, current search: atleast2(foo)", "104", null)]
        [NUnit.Framework.TestCaseAttribute("author()", "Search clause cannot end with a query modifier or  Search clause contains a boole" +
            "an AND/OR operator that is not followed by a search term (current token: ), curr" +
            "ent position: 7, current search: author())", "105", null)]
        [NUnit.Framework.TestCaseAttribute("author(\"foo\"", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 11, current search: author(\"foo\")", "104", null)]
        [NUnit.Framework.TestCaseAttribute("author(foo", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 9, current search: author(foo)", "104", null)]
        [NUnit.Framework.TestCaseAttribute("pageid()", "Search clause cannot end with a query modifier or  Search clause contains a boole" +
            "an AND/OR operator that is not followed by a search term (current token: ), curr" +
            "ent position: 7, current search: pageid())", "105", null)]
        [NUnit.Framework.TestCaseAttribute("pageid(", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 6, current search: pageid()", "104", null)]
        [NUnit.Framework.TestCaseAttribute("pageid(12345", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 11, current search: pageid(12345)", "104", null)]
        [NUnit.Framework.TestCaseAttribute("sitedomain()", "Search clause cannot end with a query modifier or  Search clause contains a boole" +
            "an AND/OR operator that is not followed by a search term (current token: ), curr" +
            "ent position: 11, current search: sitedomain())", "105", null)]
        [NUnit.Framework.TestCaseAttribute("sitedomain(\"\")", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 13, current search: sitedomain(\"\"))", "104", null)]
        [NUnit.Framework.TestCaseAttribute("sitedomain(", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 10, current search: sitedomain()", "104", null)]
        [NUnit.Framework.TestCaseAttribute("sitedomain(domain.com", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 20, current search: sitedomain(domain.com)", "104", null)]
        [NUnit.Framework.TestCaseAttribute("sitedomain(\"domain.com\"", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 22, current search: sitedomain(\"domain.com\")", "104", null)]
        [NUnit.Framework.TestCaseAttribute("w/5 \"bar\"", "Snytax error and should contact support for help (current token: w/5, current pos" +
            "ition: 0, current search: w/5 \"bar\")", "110", null)]
        [NUnit.Framework.TestCaseAttribute("\"foo\" w/5", "Search is missing qoute/paran or contains unbalanced paratheses (current token: ," +
            " current position: 8, current search: \"foo\" w/5)", "104", null)]
        [NUnit.Framework.TestCaseAttribute("\"foo\" w/1.5 \"bar\"", "Proximity matches must be used with either single terms or OR lists of terms on b" +
            "oth sides (left: OrionTerm, right: MultiTermAndFilter)", "110", null)]
        [NUnit.Framework.TestCaseAttribute("*foo", "Snytax error and should contact support for help (current token: *, current posit" +
            "ion: 0, current search: *foo)", "110", null)]
        [NUnit.Framework.TestCaseAttribute("fo*o", "Snytax error and should contact support for help (current token: o, current posit" +
            "ion: 3, current search: fo*o)", "110", null)]
        [NUnit.Framework.TestCaseAttribute("(foo)*", "Snytax error and should contact support for help (current token: *, current posit" +
            "ion: 5, current search: (foo)*)", "110", null)]
        [NUnit.Framework.TestCaseAttribute("*", "Snytax error and should contact support for help (current token: *, current posit" +
            "ion: 0, current search: *)", "110", null)]
        [NUnit.Framework.TestCaseAttribute("(*)", "Snytax error and should contact support for help (current token: *, current posit" +
            "ion: 1, current search: (*))", "110", null)]
        [NUnit.Framework.TestCaseAttribute("foo AND OR bar", "Search clause contains a syntax error or Search clause contains a boolean AND/OR " +
            "operator that is not preceded by a search term (current token: OR, current posit" +
            "ion: 8, current search: foo AND OR bar)", "110", null)]
        [NUnit.Framework.TestCaseAttribute("foo AND AND NOT bar", "Search term is not preceded/followed by a search term (current token: AND, curren" +
            "t position: 8, current search: foo AND AND NOT bar)", "110", null)]
        [NUnit.Framework.TestCaseAttribute("(foo AND bar) OR OR baz", "Search clause contains a syntax error or Search clause contains a boolean AND/OR " +
            "operator that is not preceded by a search term (current token: OR, current posit" +
            "ion: 17, current search: (foo AND bar) OR OR baz)", "110", null)]
        public virtual void AManagerUserShouldNOTBeAllowToSaveAAdvancedBooleanKeywordsSearchWithInvalidValues(string searchTerm, string message, string errorCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "acl",
                    "Settings",
                    "KeywordSearches"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Manager User should NOT be allow to Save a Advanced Boolean Keywords search wit" +
                    "h invalid values", @__tags);
#line 159
this.ScenarioSetup(scenarioInfo);
#line 160
 testRunner.Given("I login as \'ACL Keyword Automation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 161
 testRunner.And("the API test data \'KeywordSearchesTestData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 162
 testRunner.When(string.Format("I perform a POST on MediaMonitoring endpoint to create a \'SAMPLEINVALID\' Keyword " +
                        "Search with \'ADVANCED\' Keywords with a search name with \'200\' characters and sea" +
                        "rch term {0}", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 163
 testRunner.Then(string.Format("Monitoring Sample POST endpoint response code should be 400 and validation messag" +
                        "e should be {0} and Error code {1}", message, errorCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An Admin User should be able to rename his Boolean Advanced Keyword Search.")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("KeywordSearches")]
        [NUnit.Framework.CategoryAttribute("Rename")]
        public virtual void AnAdminUserShouldBeAbleToRenameHisBooleanAdvancedKeywordSearch_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An Admin User should be able to rename his Boolean Advanced Keyword Search.", new string[] {
                        "acl",
                        "Settings",
                        "KeywordSearches",
                        "Rename"});
#line 237
this.ScenarioSetup(scenarioInfo);
#line 238
 testRunner.Given("I login as \'ACL Keyword Automation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 239
 testRunner.And("the API test data \'KeywordSearchesTestData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 240
 testRunner.When("I perform a PUT on MediaMonitoring name endpoint to rename ADVANCED Keyword Searc" +
                    "h", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 241
 testRunner.Then("MediaMonitoring name endpoint PUT response code for Advanced Boolean Search shoul" +
                    "d be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An Admin User should be able to rename his Regular Keyword Search.")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("KeywordSearches")]
        [NUnit.Framework.CategoryAttribute("Rename")]
        public virtual void AnAdminUserShouldBeAbleToRenameHisRegularKeywordSearch_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An Admin User should be able to rename his Regular Keyword Search.", new string[] {
                        "acl",
                        "Settings",
                        "KeywordSearches",
                        "Rename"});
#line 244
this.ScenarioSetup(scenarioInfo);
#line 245
 testRunner.Given("I login as \'ACL Keyword Automation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 246
 testRunner.And("the API test data \'KeywordSearchesTestData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 247
 testRunner.When("I perform a PUT on MediaMonitoring name endpoint to rename REGULAR Keyword Search" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 248
 testRunner.Then("MediaMonitoring name endpoint PUT response code for Regular Search should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Read Only User should NOT be allow to run a Sample Advanced Boolean Keywords se" +
            "arch")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("KeywordSearches")]
        [NUnit.Framework.CategoryAttribute("security")]
        public virtual void AReadOnlyUserShouldNOTBeAllowToRunASampleAdvancedBooleanKeywordsSearch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Read Only User should NOT be allow to run a Sample Advanced Boolean Keywords se" +
                    "arch", new string[] {
                        "acl",
                        "Settings",
                        "KeywordSearches",
                        "security"});
#line 251
this.ScenarioSetup(scenarioInfo);
#line 252
 testRunner.Given("I login as \'ACL ReadOnly User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 253
 testRunner.And("the API test data \'KeywordSearchesTestData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 254
 testRunner.When("I perform a POST on MediaMonitoring endpoint to create a \'SAMPLEINVALID\' Keyword " +
                    "Search with \'ADVANCED\' Keywords with a search name with \'200\' characters and sea" +
                    "rch term <SearchTerm>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 255
 testRunner.Then("Monitoring Sample POST endpoint response code should be 403 and validation messag" +
                    "e should be Security error. and Error code 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Standard User should NOT be allow to run a Sample Advanced Boolean Keywords sea" +
            "rch")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("KeywordSearches")]
        [NUnit.Framework.CategoryAttribute("security")]
        public virtual void AStandardUserShouldNOTBeAllowToRunASampleAdvancedBooleanKeywordsSearch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Standard User should NOT be allow to run a Sample Advanced Boolean Keywords sea" +
                    "rch", new string[] {
                        "acl",
                        "Settings",
                        "KeywordSearches",
                        "security"});
#line 258
this.ScenarioSetup(scenarioInfo);
#line 259
 testRunner.Given("I login as \'ACL Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 260
 testRunner.And("the API test data \'KeywordSearchesTestData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 261
 testRunner.When("I perform a POST on MediaMonitoring endpoint to create a \'SAMPLEINVALID\' Keyword " +
                    "Search with \'ADVANCED\' Keywords with a search name with \'200\' characters and sea" +
                    "rch term <SearchTerm>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 262
 testRunner.Then("Monitoring Sample POST endpoint response code should be 403 and validation messag" +
                    "e should be Security error. and Error code 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An Readonly User should NOT be able to rename his Regular Keyword Search.")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("KeywordSearches")]
        [NUnit.Framework.CategoryAttribute("Rename")]
        public virtual void AnReadonlyUserShouldNOTBeAbleToRenameHisRegularKeywordSearch_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An Readonly User should NOT be able to rename his Regular Keyword Search.", new string[] {
                        "acl",
                        "Settings",
                        "KeywordSearches",
                        "Rename"});
#line 265
this.ScenarioSetup(scenarioInfo);
#line 266
 testRunner.Given("I login as \'ACL ReadOnly User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 267
 testRunner.And("the API test data \'KeywordSearchesTestData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 268
 testRunner.When("I perform a PUT on MediaMonitoring name endpoint to rename REGULAR Keyword Search" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 269
 testRunner.Then("MediaMonitoring name endpoint PUT response code for Regular Search should be 403", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An Standard User should NOT be able to rename his Boolean Advanced Keyword Search" +
            ".")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("KeywordSearches")]
        [NUnit.Framework.CategoryAttribute("Rename")]
        public virtual void AnStandardUserShouldNOTBeAbleToRenameHisBooleanAdvancedKeywordSearch_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An Standard User should NOT be able to rename his Boolean Advanced Keyword Search" +
                    ".", new string[] {
                        "acl",
                        "Settings",
                        "KeywordSearches",
                        "Rename"});
#line 272
this.ScenarioSetup(scenarioInfo);
#line 273
 testRunner.Given("I login as \'ACL Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 274
 testRunner.And("the API test data \'KeywordSearchesTestData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 275
 testRunner.When("I perform a PUT on MediaMonitoring name endpoint to rename ADVANCED Keyword Searc" +
                    "h", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 276
 testRunner.Then("MediaMonitoring name endpoint PUT response code for Advanced Boolean Search shoul" +
                    "d be 403", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An Readonly User can NOT create a Keyword Searches")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("KeywordSearches")]
        [NUnit.Framework.CategoryAttribute("Security")]
        public virtual void AnReadonlyUserCanNOTCreateAKeywordSearches()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An Readonly User can NOT create a Keyword Searches", new string[] {
                        "acl",
                        "Settings",
                        "KeywordSearches",
                        "Security"});
#line 279
this.ScenarioSetup(scenarioInfo);
#line 280
 testRunner.Given("I login as \'ACL ReadOnly User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 281
 testRunner.And("the API test data \'KeywordSearchesTestData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 282
  testRunner.When("I perform a POST on MediaMonitoring endpoint to create a \'SAMPLE\' Keyword Search " +
                    "with \'ADVANCED\' Keywords with a search name with \'200\' characters and search ter" +
                    "m A AND B AND Z", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 283
 testRunner.And("I perform a POST on MediaMonitoring endpoint to create a \'NEW\' Keyword Search wit" +
                    "h \'ANDandOR\' Keywords with a search name with \'200\' characters and search term A" +
                    " AND B AND Z", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 284
 testRunner.Then("MediaMonitoring endpoint POST response code should be 403", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

