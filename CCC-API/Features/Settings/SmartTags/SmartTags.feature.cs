// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CCC_API.Features.Settings.SmartTags
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Settings - SmartTags Config Endpoint")]
    public partial class Settings_SmartTagsConfigEndpointFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SmartTags.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Settings - SmartTags Config Endpoint", "\tTo verify that SmartTags Settings can be retrieved and modified\r\n\tAs a valid CCC" +
                    " user from a company with parameter Elysium-CustomFields-Enabled set to true\r\n\tI" +
                    " want to call the SmartTags Config endpoint - news/smartTags/config", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Manager User should be allow to view Smart Tags config values in Settings Area " +
            "for a company that has Automatic News Typing (Smart Tags) enabled")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("SmartTagsConfig")]
        public virtual void AManagerUserShouldBeAllowToViewSmartTagsConfigValuesInSettingsAreaForACompanyThatHasAutomaticNewsTypingSmartTagsEnabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Manager User should be allow to view Smart Tags config values in Settings Area " +
                    "for a company that has Automatic News Typing (Smart Tags) enabled", new string[] {
                        "acl",
                        "Settings",
                        "SmartTagsConfig",
                        "Ignore"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I login as \'Smart Tag ON Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("I perform a GET on SmartTags Config endpoint endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("SmartTags Config GET endpoint response code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Manager User should be allow to edit Smart Tags with valid config values in Set" +
            "tings Area for a company that has Automatic News Typing (Smart Tags) enabled")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("SmartTagsConfig")]
        public virtual void AManagerUserShouldBeAllowToEditSmartTagsWithValidConfigValuesInSettingsAreaForACompanyThatHasAutomaticNewsTypingSmartTagsEnabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Manager User should be allow to edit Smart Tags with valid config values in Set" +
                    "tings Area for a company that has Automatic News Typing (Smart Tags) enabled", new string[] {
                        "acl",
                        "Settings",
                        "SmartTagsConfig",
                        "Ignore"});
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("I login as \'Smart Tag ON Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
 testRunner.When("I perform a PUT on SmartTags Config endpoint with these config values 1 and 1 and" +
                    " 1 and 1 and test", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("SmartTags Config PUT endpoint response code should be 200 and message should be O" +
                    "K", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Manager User should NOT be allow to edit Smart Tags with invalid config values " +
            "in Settings Area for a company that has Automatic News Typing (Smart Tags) enabl" +
            "ed")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("acl")]
        [NUnit.Framework.CategoryAttribute("Settings")]
        [NUnit.Framework.CategoryAttribute("SmartTagsConfig")]
        [NUnit.Framework.TestCaseAttribute("1", "1", "1", "1", "", "Search clause cannot be blank.", null)]
        [NUnit.Framework.TestCaseAttribute("0", "0", "0", "0", "test", "All number inputs must be greater than 0.", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "1", "1", "(test", "Search is missing an opening or closing parenthesis", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "1", "1", "\\\"disney\\\"{", "Search contains one or more invalid characters.", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "1", "1", "\\\"disney\\\" AND", "Search cannot end with boolean AND/OR operators", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "1", "1", "\\\"disney\\\" OR", "Search cannot end with boolean AND/OR operators", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "1", "1", "AND \\\"disney\\\"", "Search cannot start with boolean AND/OR operators.", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "1", "1", "OR \\\"disney\\\"", "Search cannot start with boolean AND/OR operators.", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "1", "1", "\\\"disney", "Search is missing an opening or closing quotation mark", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "1", "1", "\\\"disney world\\\" [headline]", "Search cannot end with a query modifier.", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "1", "1", "\\\"disney world\\\" (OR \\\"mouse\\\")", "Search contains a syntax error.", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "1", "1", "\\\"disney world\\\" (\\\"mouse\\\" AND)", "Search contains a boolean AND/OR operator that is not followed by a search term.", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "1", "1", "\\\"disney world\\\" OR AND NOT \\\"mouse\\\"", "Search contains a boolean AND/OR operator that is not followed by a search term", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "1", "1", "\\\"disney world\\\" ( AND \\\"mouse\\\")", "Search contains a boolean AND/OR operator that is not preceded by a search term.\"" +
            "", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "1", "1", "\\\"disney world\\\" AND NOT OR \\\"mouse\\\"", "Search contains a boolean AND/OR operator that is not preceded by a search term.", null)]
        public virtual void AManagerUserShouldNOTBeAllowToEditSmartTagsWithInvalidConfigValuesInSettingsAreaForACompanyThatHasAutomaticNewsTypingSmartTagsEnabled(string featureMentions, string featureWords, string briefMentions, string briefWords, string searchTerm, string message, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "acl",
                    "Settings",
                    "SmartTagsConfig",
                    "Ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Manager User should NOT be allow to edit Smart Tags with invalid config values " +
                    "in Settings Area for a company that has Automatic News Typing (Smart Tags) enabl" +
                    "ed", @__tags);
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("I login as \'Smart Tag ON Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.When(string.Format("I perform a PUT on SmartTags Config endpoint with these config values {0} and {1}" +
                        " and {2} and {3} and {4}", featureMentions, featureWords, briefMentions, briefWords, searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then(string.Format("SmartTags Config PUT endpoint response code should be 400 and message should be {" +
                        "0}", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

