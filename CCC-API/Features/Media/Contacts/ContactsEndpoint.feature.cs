// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CCC_API.Features.Media.Contacts
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ContactsEndpoint")]
    public partial class ContactsEndpointFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ContactsEndpoint.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ContactsEndpoint", "\tIn order to find media contacts\r\n\tAs a standard user\r\n\tI want to query contacts " +
                    "via Contacts Endpoint", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search Contacts by Contact Name")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void SearchContactsByContactName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search Contacts by Contact Name", new string[] {
                        "Influencers"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I login as \'Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'cooper, " +
                    "anderson\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("all returned Contacts should contain \'cooper, anderson\' in their sortname", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search Contacts by Contact Name in first name, last name order")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void SearchContactsByContactNameInFirstNameLastNameOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search Contacts by Contact Name in first name, last name order", new string[] {
                        "Influencers",
                        "ignore"});
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("I login as \'Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
 testRunner.When("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'Chris Cu" +
                    "omo\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("all returned Contacts should contain \'Cuomo, Chris\' in their sortname", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search Contacts by Outlet Name")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void SearchContactsByOutletName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search Contacts by Outlet Name", new string[] {
                        "Influencers",
                        "ignore"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("I login as \'Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.When("I perform a GET for Contacts by \'Outlet_Name\' criteria with a value of \'new yorke" +
                    "r,the\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("all returned Contacts should contain \'The New Yorker\' in their outlet name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search Contacts by Talking About")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void SearchContactsByTalkingAbout()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search Contacts by Talking About", new string[] {
                        "Influencers"});
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("I login as \'Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
 testRunner.When("I perform a GET for Contacts by \'Influencer_Keyword\' criteria with a value of \'te" +
                    "ch\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then("the Contact response code should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 29
 testRunner.And("the search should return contacts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search Contacts by Subject \'Academic Certification\'")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void SearchContactsBySubjectAcademicCertification()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search Contacts by Subject \'Academic Certification\'", new string[] {
                        "Influencers",
                        "ignore"});
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
 testRunner.Given("I login as \'Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 34
 testRunner.When("I perform a GET for Contacts by \'Subject\' criteria with a value of \'100000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
 testRunner.Then("all returned contact objects should contain \'Academic Certification\' in their sub" +
                    "jects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search Contacts by Outlet Location City \'Chicago, Illinois, United States of Amer" +
            "ica\'")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("4-5946", "Chicago", null)]
        public virtual void SearchContactsByOutletLocationCityChicagoIllinoisUnitedStatesOfAmerica(string id, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search Contacts by Outlet Location City \'Chicago, Illinois, United States of Amer" +
                    "ica\'", @__tags);
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.Given("I login as \'Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
 testRunner.When(string.Format("I perform a GET for Contacts by \'Outlet_Location\' criteria with a value of \'{0}\'", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 41
 testRunner.And("I perform a GET for an Outlet by Id using the first contact\'s outlet id from the " +
                    "previous search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.Then(string.Format("the returned outlet object should have \'{0}\' as their city", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify if the Twitter filter is applied")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyIfTheTwitterFilterIsApplied()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify if the Twitter filter is applied", new string[] {
                        "Influencers"});
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
 testRunner.Given("I login as \'Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
 testRunner.When("I perform a GET for Contacts by \'Subject\' Education ID:\'319000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
 testRunner.And("I perfom a GET using the Twitter filter \'1247750878\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.Then("the filter should be applied  for \'twitter\' value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify if the Linkedin filter is applied")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyIfTheLinkedinFilterIsApplied()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify if the Linkedin filter is applied", new string[] {
                        "Influencers",
                        "ignore"});
#line 56
this.ScenarioSetup(scenarioInfo);
#line 57
 testRunner.Given("I login as \'social filter\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 58
 testRunner.When("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'young\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
 testRunner.And("I perform a GET using the Linkedin filter \'1154326215\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.Then("the filter should be applied  for \'linkedin\' value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify if the Facebook filter is applied")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyIfTheFacebookFilterIsApplied()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify if the Facebook filter is applied", new string[] {
                        "Influencers",
                        "ignore"});
#line 63
this.ScenarioSetup(scenarioInfo);
#line 64
 testRunner.Given("I login as \'social filter\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 65
 testRunner.When("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'young\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
 testRunner.And("I perform a GET using the Facebook filter \'1168361333\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
 testRunner.Then("the filter should be applied  for \'facebook\' value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that similar contacts endpoint retrieve data")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatSimilarContactsEndpointRetrieveData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that similar contacts endpoint retrieve data", new string[] {
                        "Influencers",
                        "ignore"});
#line 70
this.ScenarioSetup(scenarioInfo);
#line 71
 testRunner.Given("I login as \'Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 72
 testRunner.When("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'Storms, " +
                    "Kimberly\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 73
 testRunner.And("I perform a GET for Similar Contacts using the first id from the previous search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.Then("I should see Similarity Score property greater than 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new list after contact search")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void CreateNewListAfterContactSearch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new list after contact search", new string[] {
                        "Influencers"});
#line 77
this.ScenarioSetup(scenarioInfo);
#line 78
 testRunner.Given("I login as \'Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 79
 testRunner.When("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'cooper\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
 testRunner.And("I perform a Post for creating a list with a random name using the top three ids", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
 testRunner.Then("the list created should return a non-null response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify new list cannot have a name greater than 255 characters")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyNewListCannotHaveANameGreaterThan255Characters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify new list cannot have a name greater than 255 characters", new string[] {
                        "Influencers",
                        "ignore"});
#line 84
this.ScenarioSetup(scenarioInfo);
#line 85
 testRunner.Given("I login as \'Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 86
 testRunner.When("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'cooper\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 87
 testRunner.And("I perform a Post for creating a list with a long name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
 testRunner.Then("the response will be an error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a list by name")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void DeleteAListByName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a list by name", new string[] {
                        "Influencers",
                        "ignore"});
#line 91
this.ScenarioSetup(scenarioInfo);
#line 92
 testRunner.Given("I login as \'Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 93
 testRunner.When("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'cooper\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 94
 testRunner.And("I perform a Post for creating a list with a random name using the top three ids", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
 testRunner.And("I perform a DELETE for the list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.Then("the response should contain the list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subject must be provided in Send Email")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void SubjectMustBeProvidedInSendEmail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subject must be provided in Send Email", new string[] {
                        "Influencers",
                        "ignore"});
#line 99
this.ScenarioSetup(scenarioInfo);
#line 100
 testRunner.Given("I login as \'Manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 101
 testRunner.When("I perform a POST for exporting contact \'2449491\' without a subject", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 102
 testRunner.Then("the response should return invalid because \'\"Subject must be provided.\"\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Influencer rankings appear in incremental order")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void InfluencerRankingsAppearInIncrementalOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Influencer rankings appear in incremental order", new string[] {
                        "Influencers",
                        "ignore"});
#line 105
this.ScenarioSetup(scenarioInfo);
#line 106
 testRunner.Given("I login as \'Manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 107
 testRunner.When("I perform a GET for Contact \'stephanie lee fatta\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
 testRunner.And("I perform a GET for her influencer ranking charts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
 testRunner.Then("the response\'s first item should be ranked one and the rest should be ordered inc" +
                    "rementally", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Contact search by pubic record type")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void ContactSearchByPubicRecordType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Contact search by pubic record type", new string[] {
                        "Influencers",
                        "ignore"});
#line 112
this.ScenarioSetup(scenarioInfo);
#line 113
 testRunner.Given("I login as \'manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 114
 testRunner.When("I perform a GET for Contacts by \'Record_Type\' criteria with a value of \'public\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 115
 testRunner.Then("all returned contact objects should contain \'false\' in their IsProprietaryContact" +
                    " property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Contact search by private record type")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void ContactSearchByPrivateRecordType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Contact search by private record type", new string[] {
                        "Influencers",
                        "ignore"});
#line 118
this.ScenarioSetup(scenarioInfo);
#line 119
 testRunner.Given("I login as \'manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 120
 testRunner.When("I perform a GET for Contacts by \'Record_Type\' criteria with a value of \'proprieta" +
                    "ry\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 121
 testRunner.Then("all returned contact objects should contain \'true\' in their IsProprietaryContact " +
                    "property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that new properties on Contacts lists are not null")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatNewPropertiesOnContactsListsAreNotNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that new properties on Contacts lists are not null", new string[] {
                        "Influencers",
                        "ignore"});
#line 124
this.ScenarioSetup(scenarioInfo);
#line 125
 testRunner.Given("I login as \'manager user with lists\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 126
 testRunner.When("I perform a POST for searching all \'MediaContact\' lists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 127
 testRunner.Then("all returned lists should contain not null values for the owner, modified date an" +
                    "d creation date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify lists returned by outlet id")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyListsReturnedByOutletId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify lists returned by outlet id", new string[] {
                        "Influencers",
                        "ignore"});
#line 130
this.ScenarioSetup(scenarioInfo);
#line 131
 testRunner.Given("I login as \'manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 132
 testRunner.When("I perform a POST for searching all \'MediaOutlet\' lists and using the \'chicago onl" +
                    "ine\' id sorted by name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 133
 testRunner.Then("all returned lists should have the id of the outlet in the response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a private contact")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("292", "United Kingdom", null)]
        public virtual void DeleteAPrivateContact(string id, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a private contact", @__tags);
#line 136
this.ScenarioSetup(scenarioInfo);
#line 137
 testRunner.Given("I login as \'manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 138
 testRunner.When(string.Format("I create a new contact data associated with outlet \'chicago online\' and the count" +
                        "ry \'{0}\'", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 139
 testRunner.And("I delete the contact created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
 testRunner.Then("I should get the \'200\' status code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Not nulls id after multiple list deleted")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void NotNullsIdAfterMultipleListDeleted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Not nulls id after multiple list deleted", new string[] {
                        "Influencers",
                        "ignore"});
#line 147
this.ScenarioSetup(scenarioInfo);
#line 148
 testRunner.Given("I login as \'manager user with lists\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 149
 testRunner.When("I perform a POST for searching all \'MediaContact\' lists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 150
 testRunner.And("I delete the first two list ids", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 151
 testRunner.Then("I should not get null response after multiple list deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that a recent contact search is saved")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatARecentContactSearchIsSaved()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that a recent contact search is saved", new string[] {
                        "Influencers",
                        "ignore"});
#line 154
this.ScenarioSetup(scenarioInfo);
#line 155
 testRunner.Given("I login as \'manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 156
 testRunner.When("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'cooper\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 157
 testRunner.And("I perform a POST to save the search using the key generated before", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 158
 testRunner.And("I perform a get for recent searches endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 159
 testRunner.Then("I should find the recent searched saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Contact child suggestion from contact search")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void ContactChildSuggestionFromContactSearch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Contact child suggestion from contact search", new string[] {
                        "Influencers",
                        "ignore"});
#line 162
this.ScenarioSetup(scenarioInfo);
#line 163
 testRunner.Given("I login as \'manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 164
 testRunner.When("I perform a GET for Contacts suggestion using the key \'mossberg\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 165
 testRunner.Then("I should see \'mossberg\' in contact name as a suggestion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that a saved search was created properly")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatASavedSearchWasCreatedProperly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that a saved search was created properly", new string[] {
                        "Influencers",
                        "ignore"});
#line 168
this.ScenarioSetup(scenarioInfo);
#line 169
 testRunner.Given("I login as \'Manager Standard user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 170
 testRunner.When("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'cooper\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 171
 testRunner.And("I perform a POST to keep the contact search using the key generated before", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 172
 testRunner.And("I perform a GET for saved searches endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 173
 testRunner.Then("I should find the saved searched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 174
 testRunner.Then("The saved searched is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that a contact saved searched was deleted properly")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatAContactSavedSearchedWasDeletedProperly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that a contact saved searched was deleted properly", new string[] {
                        "Influencers"});
#line 177
this.ScenarioSetup(scenarioInfo);
#line 178
 testRunner.Given("I login as \'Manager Standard user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 179
 testRunner.When("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'cooper\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 180
 testRunner.And("I perform a POST to keep the contact search using the key generated before", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 181
 testRunner.And("I perform a DELETE for the saved search created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 182
 testRunner.And("I perform a GET for saved searches endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 183
 testRunner.Then("the saved search should be deleted properly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that Datagroup id is on contact recent searches response")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatDatagroupIdIsOnContactRecentSearchesResponse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that Datagroup id is on contact recent searches response", new string[] {
                        "Influencers",
                        "ignore"});
#line 186
this.ScenarioSetup(scenarioInfo);
#line 187
 testRunner.Given("I login as \'Standard User with default DG\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 188
 testRunner.When("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'cooper\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 189
 testRunner.And("I save the current Datagroup id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 190
 testRunner.And("I perform a POST to save the search using the key generated before", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 191
 testRunner.And("I perform a get for recent searches endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 192
 testRunner.Then("I should find the recent searched saved with the proper Datagroup id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that Datagroup id is on contact saved searches response")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatDatagroupIdIsOnContactSavedSearchesResponse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that Datagroup id is on contact saved searches response", new string[] {
                        "Influencers",
                        "ignore"});
#line 195
this.ScenarioSetup(scenarioInfo);
#line 196
 testRunner.Given("I login as \'Standard User with default DG\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 197
 testRunner.When("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'cooper\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 198
 testRunner.And("I save the current Datagroup id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 199
 testRunner.And("I perform a POST to keep the contact search using the key generated before", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 200
 testRunner.And("I perform a GET for saved searches endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 201
 testRunner.Then("I should find the saved searched with the proper Datagroup id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that a contact saved seach is edited properly")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatAContactSavedSeachIsEditedProperly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that a contact saved seach is edited properly", new string[] {
                        "Influencers",
                        "ignore"});
#line 204
this.ScenarioSetup(scenarioInfo);
#line 205
 testRunner.Given("I login as \'Manager Standard user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 206
 testRunner.When("I perform a GET for saved searches endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 207
 testRunner.And("I edit the name of the first contact saved search listed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 208
 testRunner.Then("I should see the name edited of the contact saved search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that the contacts are consolidated when the parameter is on true on my lis" +
            "ts")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatTheContactsAreConsolidatedWhenTheParameterIsOnTrueOnMyLists()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that the contacts are consolidated when the parameter is on true on my lis" +
                    "ts", new string[] {
                        "Influencers",
                        "ignore"});
#line 211
this.ScenarioSetup(scenarioInfo);
#line 212
 testRunner.Given("I login as \'Manager Standard user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 213
 testRunner.When("I perform a GET for Contacts by \'Contact_Name_Consolidated\'criteria with a value " +
                    "of \'cooper\' and the consolidated profiles as \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 214
 testRunner.And("I add all results to a random list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 215
 testRunner.And("I perform a GET for Contacts by \'Contact_List\'criteria with a consolidated profil" +
                    "es as \'true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 216
 testRunner.Then("I should get consolidated contacts when the parameter is on true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify error when new list from contact profile has special characters")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyErrorWhenNewListFromContactProfileHasSpecialCharacters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify error when new list from contact profile has special characters", new string[] {
                        "Influencers",
                        "ignore"});
#line 219
this.ScenarioSetup(scenarioInfo);
#line 220
 testRunner.Given("I login as \'Manager Standard user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 221
 testRunner.When("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'cooper\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 222
 testRunner.And("I add the first result to a new list with special characters using the profile en" +
                    "dpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 223
 testRunner.Then("I should get a response indicating the request was invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that a company returns huge results with consolidated profiles parameter e" +
            "nabled")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatACompanyReturnsHugeResultsWithConsolidatedProfilesParameterEnabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that a company returns huge results with consolidated profiles parameter e" +
                    "nabled", new string[] {
                        "Influencers",
                        "ignore"});
#line 226
this.ScenarioSetup(scenarioInfo);
#line 227
 testRunner.Given("I login as \'Company with huge results setted\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 228
 testRunner.When("I perform a GET for Contacts by \'Record_Type\' criteria with a value of \'public\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 229
 testRunner.Then("I should get all \'false\' on proprietary information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that Has Multiple Outlets field is sortable")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("Influecers")]
        public virtual void VerifyThatHasMultipleOutletsFieldIsSortable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that Has Multiple Outlets field is sortable", new string[] {
                        "Influecers",
                        "ignore"});
#line 232
this.ScenarioSetup(scenarioInfo);
#line 233
 testRunner.Given("I login as \'Manager Standard user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 234
 testRunner.When("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'cooper\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 235
 testRunner.And("I sort Contacts items \'-HasMultipleOutlets\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 236
 testRunner.Then("all items returned should be sorted by \'descending\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that outlet news focus search is returning properly results")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("629", "International", null)]
        [NUnit.Framework.TestCaseAttribute("630", "National", null)]
        [NUnit.Framework.TestCaseAttribute("631", "Regional", null)]
        [NUnit.Framework.TestCaseAttribute("632", "Local", null)]
        [NUnit.Framework.TestCaseAttribute("633", "Community", null)]
        public virtual void VerifyThatOutletNewsFocusSearchIsReturningProperlyResults(string id, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that outlet news focus search is returning properly results", @__tags);
#line 239
this.ScenarioSetup(scenarioInfo);
#line 240
 testRunner.Given("I login as \'Manager Standard user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 241
 testRunner.When(string.Format("I perform a GET for Contacts by \'News_Focus\' criteria with a value of \'{0}\'", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 242
 testRunner.Then(string.Format("all items returned should have the \'{0}\' in their outlet", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that a contact search by outlet subjects return properly results")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("101000", "Accounting", null)]
        public virtual void VerifyThatAContactSearchByOutletSubjectsReturnProperlyResults(string id_Subject, string subject_Value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that a contact search by outlet subjects return properly results", @__tags);
#line 253
this.ScenarioSetup(scenarioInfo);
#line 254
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 255
 testRunner.When(string.Format("I perform a GET for Contacts by \'Outlet_Subjects\' criteria with a value of \'{0}\'", id_Subject), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 256
 testRunner.Then(string.Format("I should see the contacts that have the \'{0}\' in their outlet information", subject_Value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that a contact search by opted out contacts return proper results")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatAContactSearchByOptedOutContactsReturnProperResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that a contact search by opted out contacts return proper results", new string[] {
                        "Influencers",
                        "ignore"});
#line 263
this.ScenarioSetup(scenarioInfo);
#line 264
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 265
 testRunner.When("I perform a GET for Contacts by \'Optedout\' criteria with a value of \'true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 266
 testRunner.Then("I should see the contacts that have the \'true\' in their Opted out property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that a contact search using support accents in their searches")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("Gonçalves", null)]
        [NUnit.Framework.TestCaseAttribute("Jürgen", null)]
        [NUnit.Framework.TestCaseAttribute("José", null)]
        [NUnit.Framework.TestCaseAttribute("Ñáñez", null)]
        public virtual void VerifyThatAContactSearchUsingSupportAccentsInTheirSearches(string value_Accents, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that a contact search using support accents in their searches", @__tags);
#line 269
this.ScenarioSetup(scenarioInfo);
#line 270
 testRunner.Given("I login as \'Manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 271
 testRunner.When(string.Format("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'{0}\'", value_Accents), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 272
 testRunner.Then(string.Format("I should contain any results with the \'{0}\'", value_Accents), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify contact search with multiple criteria returns proper results")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyContactSearchWithMultipleCriteriaReturnsProperResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify contact search with multiple criteria returns proper results", new string[] {
                        "Influencers",
                        "ignore"});
#line 282
this.ScenarioSetup(scenarioInfo);
#line 283
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "criteriaName",
                        "criteriaValue"});
            table1.AddRow(new string[] {
                        "Contact_Name",
                        "smith"});
            table1.AddRow(new string[] {
                        "Outlet_Name",
                        "tribune"});
#line 284
 testRunner.When("I perform a GET for Contacts by the following criteria:", ((string)(null)), table1, "When ");
#line 288
 testRunner.Then("all returned Contacts should have \'smith\' in their sortname", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 289
 testRunner.And("all returned Contacts should have \'tribune\' in their outlet name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Export contacts to Csv")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("/Firstname", null)]
        [NUnit.Framework.TestCaseAttribute("/Lastname", null)]
        [NUnit.Framework.TestCaseAttribute("/OutletName", null)]
        [NUnit.Framework.TestCaseAttribute("/Outlet/CountyName", null)]
        public virtual void ExportContactsToCsv(string field, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Export contacts to Csv", @__tags);
#line 293
this.ScenarioSetup(scenarioInfo);
#line 294
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 295
 testRunner.When("I perform a GET for Contacts by \'Record_Type\' criteria with a value of \'public\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 296
 testRunner.And(string.Format("I perform a POST to export Contacts including \'{0}\' field", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 297
 testRunner.And("I perform a GET for Contacts jobs with the id from the export", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 298
 testRunner.Then("the job response status code is \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that notes are added on contacts lists properly")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatNotesAreAddedOnContactsListsProperly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that notes are added on contacts lists properly", new string[] {
                        "Influencers",
                        "ignore"});
#line 308
this.ScenarioSetup(scenarioInfo);
#line 309
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 310
 testRunner.When("I perform a GET for Contacts by \'Optedout\' criteria with a value of \'true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 311
 testRunner.And("I perform a Post for creating a list with a random name using the top three ids", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 312
 testRunner.And("I perform a Patch for the list created before adding some ramdom notes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 313
 testRunner.Then("I should see notes on response properly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that the keyword searched for is in the contacts Title")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatTheKeywordSearchedForIsInTheContactsTitle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that the keyword searched for is in the contacts Title", new string[] {
                        "Influencers",
                        "ignore"});
#line 316
this.ScenarioSetup(scenarioInfo);
#line 317
 testRunner.Given("I login as \'Manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 318
 testRunner.When("I perform a GET for Contacts by \'Keyword_Title\' criteria with a value of \'Directo" +
                    "r\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 319
 testRunner.Then("I should see the contacts that have \'Director\' in their title", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that the keyword searched for is in the contacts Email")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatTheKeywordSearchedForIsInTheContactsEmail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that the keyword searched for is in the contacts Email", new string[] {
                        "Influencers",
                        "ignore"});
#line 322
this.ScenarioSetup(scenarioInfo);
#line 323
 testRunner.Given("I login as \'Manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 324
 testRunner.When("I perform a GET for Contacts by \'Keyword_Email\' criteria with a value of \'Times\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 325
 testRunner.Then("I should see the contacts that have \'Times\' in their email address", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that contact search by outlet location using radius")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("4-5946", "IL", null)]
        public virtual void VerifyThatContactSearchByOutletLocationUsingRadius(string location_Id, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that contact search by outlet location using radius", @__tags);
#line 328
this.ScenarioSetup(scenarioInfo);
#line 329
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "criteriaName",
                        "criteriaValue"});
            table2.AddRow(new string[] {
                        "Outlet_Location",
                        string.Format("{0}", location_Id)});
            table2.AddRow(new string[] {
                        "LocationRadius",
                        "10"});
#line 330
 testRunner.When("I perform a GET for Contacts by the following criteria:", ((string)(null)), table2, "When ");
#line 334
 testRunner.Then(string.Format("the results should match with the \'{0}\' location", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that recent tweets are displayed for contact")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatRecentTweetsAreDisplayedForContact()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that recent tweets are displayed for contact", new string[] {
                        "Influencers",
                        "ignore"});
#line 341
this.ScenarioSetup(scenarioInfo);
#line 342
 testRunner.Given("I login as \'Standard User with default DG\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 343
 testRunner.When("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'Fallon, " +
                    "Jimmy\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 344
 testRunner.And("I save the first ID of the response gotten from the GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 345
 testRunner.And("I perform a GET for Contacts recent tweets endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 346
 testRunner.Then("I should see the contacts recent tweets in the response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Basic Account Cannot Search Contacts by Talking About")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void BasicAccountCannotSearchContactsByTalkingAbout()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Basic Account Cannot Search Contacts by Talking About", new string[] {
                        "Influencers",
                        "ignore"});
#line 349
this.ScenarioSetup(scenarioInfo);
#line 350
 testRunner.Given("I login as \'Basic Edition - Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 351
 testRunner.When("I perform a GET for Contacts by \'Influencer_Keyword\' criteria with a value of \'nh" +
                    "l\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 352
 testRunner.Then("the Contact response code should be \'403\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that a user with read_only permission cannot create a private contact")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("316", "United States", null)]
        public virtual void VerifyThatAUserWithRead_OnlyPermissionCannotCreateAPrivateContact(string id, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that a user with read_only permission cannot create a private contact", @__tags);
#line 355
this.ScenarioSetup(scenarioInfo);
#line 356
testRunner.Given("shared session for \'read_only\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 357
testRunner.When(string.Format("I create a new private contact with country \'{0}\'", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 358
testRunner.Then("I should get an error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Basic Account Cannot Search Contacts by News Talking About")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void BasicAccountCannotSearchContactsByNewsTalkingAbout()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Basic Account Cannot Search Contacts by News Talking About", new string[] {
                        "Influencers",
                        "ignore"});
#line 366
this.ScenarioSetup(scenarioInfo);
#line 367
 testRunner.Given("I login as \'Basic Edition - Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 368
 testRunner.When("I perform a GET for Contacts by \'NewsInfluencer_Keyword\' criteria with a value of" +
                    " \'nhl\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 369
 testRunner.Then("the Contact response code should be \'403\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sort Media Contacts")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("SortName", "Ascending", null)]
        [NUnit.Framework.TestCaseAttribute("SortName", "Descending", null)]
        [NUnit.Framework.TestCaseAttribute("OutletName", "Ascending", null)]
        [NUnit.Framework.TestCaseAttribute("CirculationAudience", "Ascending", null)]
        [NUnit.Framework.TestCaseAttribute("CirculationAudience", "Descending", null)]
        [NUnit.Framework.TestCaseAttribute("UniqueVisitorsPerMonth", "Ascending", null)]
        [NUnit.Framework.TestCaseAttribute("UniqueVisitorsPerMonth", "Descending", null)]
        public virtual void SortMediaContacts(string field, string direction, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort Media Contacts", @__tags);
#line 372
this.ScenarioSetup(scenarioInfo);
#line 373
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 374
 testRunner.When("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'smith\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 375
 testRunner.And(string.Format("I sort Contacts \'{0}\' by \'{1}\'", direction, field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 376
 testRunner.Then(string.Format("all Contacts item \'{0}\' are sorted \'{1}\'", field, direction), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that optin request return a valid response")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("316", "United States", null)]
        public virtual void VerifyThatOptinRequestReturnAValidResponse(string id, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that optin request return a valid response", @__tags);
#line 390
this.ScenarioSetup(scenarioInfo);
#line 391
 testRunner.Given("I login as \'Standard User with default DG\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 392
 testRunner.When(string.Format("I create a new contact without list data associated with outlet \'chicago online\' " +
                        "and the country \'{0}\'", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 393
 testRunner.And("I perform a PATCH for opted out the private contact created setting as \'true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 394
 testRunner.And("I perform a POST for opt in request using the same private contact created before" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 395
 testRunner.Then("I should see the contact name in the opt in request response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 396
 testRunner.Then("the contact is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that Opt In request for PATCH operation is properly performed")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("316", "United States", null)]
        public virtual void VerifyThatOptInRequestForPATCHOperationIsProperlyPerformed(string id, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that Opt In request for PATCH operation is properly performed", @__tags);
#line 403
this.ScenarioSetup(scenarioInfo);
#line 404
 testRunner.Given("I login as \'Standard User with default DG\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 405
 testRunner.When(string.Format("I create a new contact without list data associated with outlet \'chicago online\' " +
                        "and the country \'{0}\'", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 406
 testRunner.And("I perform a PATCH for opted out the private contact created setting as \'true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 407
 testRunner.And("I perform a POST for opt in request using the same private contact created before" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 408
 testRunner.And("I perform a PATCH to edit the Has Opted in value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 409
 testRunner.Then("I should see the property already updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 410
 testRunner.Then("the contact is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the contact location search by county")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("3-1873", "New York", null)]
        public virtual void VerifyTheContactLocationSearchByCounty(string location_Id, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the contact location search by county", @__tags);
#line 417
this.ScenarioSetup(scenarioInfo);
#line 418
 testRunner.Given("I login as \'manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 419
 testRunner.When(string.Format("I perform a GET for Contacts by \'Outlet_Location\' criteria with a value of \'{0}\'", location_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 420
 testRunner.Then(string.Format("I should see the proper \'{0}\' on the contacts response", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that contact name search can be performed using multiples values")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatContactNameSearchCanBePerformedUsingMultiplesValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that contact name search can be performed using multiples values", new string[] {
                        "Influencers",
                        "ignore"});
#line 427
this.ScenarioSetup(scenarioInfo);
#line 428
 testRunner.Given("I login as \'manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 429
 testRunner.When("I perform a GET for contacts ids for the following contacts \'Stephanie Lee Fatta," +
                    "Dave Boyer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 430
 testRunner.Then("I should see results with the given contacts names", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a private contact with read only user should return 403 status code")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void DeleteAPrivateContactWithReadOnlyUserShouldReturn403StatusCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a private contact with read only user should return 403 status code", new string[] {
                        "Influencers",
                        "ignore"});
#line 434
this.ScenarioSetup(scenarioInfo);
#line 435
 testRunner.Given("I login as \'Read Only PositiveTest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 436
 testRunner.When("I perform a GET for Contacts by \'Record_Type\' criteria with a value of \'proprieta" +
                    "ry\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 437
 testRunner.And("I delete the first item returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 438
 testRunner.Then("I should get the \'403\' status code for the item selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search contacts by outlet target area")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("2119290", "Chicago", null)]
        public virtual void SearchContactsByOutletTargetArea(string id, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search contacts by outlet target area", @__tags);
#line 442
this.ScenarioSetup(scenarioInfo);
#line 443
 testRunner.Given("I login as \'manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 444
 testRunner.When(string.Format("I perform a GET for Contacts by \'OutletTarget_Area\' criteria with a value of \'{0}" +
                        "\'", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 445
 testRunner.Then(string.Format("I should see \'{0}\' for contact response on target area location", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Duplicate a contact list")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void DuplicateAContactList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Duplicate a contact list", new string[] {
                        "Influencers",
                        "ignore"});
#line 452
this.ScenarioSetup(scenarioInfo);
#line 453
 testRunner.Given("I login as \'manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 454
 testRunner.When("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'cooper\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 455
 testRunner.And("I perform a Post for creating a list with a random name using the top three ids", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 456
 testRunner.And("I duplicate the list for the same datagroup changing the name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 457
 testRunner.And("I retrieve the list information recently duplicated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 458
 testRunner.Then("I should see the same results that the original one", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Upload bulk import when creating a bulk import process")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("ImportSample.csv", "OK", null)]
        public virtual void UploadBulkImportWhenCreatingABulkImportProcess(string filepath, string status, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Upload bulk import when creating a bulk import process", @__tags);
#line 462
this.ScenarioSetup(scenarioInfo);
#line 463
 testRunner.Given("I login as \'Posdemo Manager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 464
 testRunner.When(string.Format("I upload a file {0} to create a import process for contacts", filepath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 465
 testRunner.Then(string.Format("The result should be {0} for the import process", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Upload bulk import with list info for private contacts")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("ImportSampleList.csv", "OK", null)]
        public virtual void UploadBulkImportWithListInfoForPrivateContacts(string filepath, string status, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Upload bulk import with list info for private contacts", @__tags);
#line 472
this.ScenarioSetup(scenarioInfo);
#line 473
 testRunner.Given("I login as \'Posdemo Manager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 474
 testRunner.When(string.Format("I upload a file {0} to create a import process for contacts", filepath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 475
 testRunner.Then(string.Format("The result should be {0} for the import process", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

