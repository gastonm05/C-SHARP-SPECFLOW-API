// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CCC_API.Features.Media.Contacts
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ContactSearchResultsFiltering")]
    public partial class ContactSearchResultsFilteringFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ContactSearchResultsFiltering.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ContactSearchResultsFiltering", "\tIn order to find relevant contacts\r\n\tAs a CCC standard user\r\n\tI want to be able " +
                    "to filter contact search results", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filtering Contact search results by single subject returns only contacts with sel" +
            "ected subject")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void FilteringContactSearchResultsBySingleSubjectReturnsOnlyContactsWithSelectedSubject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering Contact search results by single subject returns only contacts with sel" +
                    "ected subject", new string[] {
                        "Influencers"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("I perform a GET for Contacts by \'record_type\' criteria with a value of \'public\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.And("I perform a GET for Contacts with the filter \'Education\' in the filter category \'" +
                    "mediacontactsubject\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.Then("all contacts should contain \'Education\' as their Subject", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filtering Contact search results by Contacts List")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void FilteringContactSearchResultsByContactsList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering Contact search results by Contacts List", new string[] {
                        "Influencers",
                        "ignore"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("I login as \'Standard User with lists\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.When("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'cooper\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.And("I perform a GET for Contacts with the group \'Contact List\' in the filter category" +
                    " \'entitylistitemid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.And("I perform a GET for the first contact listed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.Then("I should get the list created in the contact details response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filtering Contact search results by Country returns only contacts with selected C" +
            "ountry")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void FilteringContactSearchResultsByCountryReturnsOnlyContactsWithSelectedCountry()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering Contact search results by Country returns only contacts with selected C" +
                    "ountry", new string[] {
                        "Influencers",
                        "ignore"});
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
 testRunner.When("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'cooper\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.And("I perform a GET for Contacts with the filter \'United States\' in the filter catego" +
                    "ry \'country\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.Then("all filtered contacts returned should have \'United States\' as their Outlet Countr" +
                    "y", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filtering Contact search results by City returns only contacts with selected City" +
            "")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void FilteringContactSearchResultsByCityReturnsOnlyContactsWithSelectedCity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering Contact search results by City returns only contacts with selected City" +
                    "", new string[] {
                        "Influencers",
                        "ignore"});
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
 testRunner.When("I perform a GET for Contacts by \'Keyword_Profile\' criteria with a value of \'illin" +
                    "ois\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
 testRunner.And("I perform a GET for Contacts with the filter \'Chicago\' in the filter category \'ci" +
                    "ty\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.Then("all filtered contacts returned should have \'Chicago\' as their Outlet City", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filtering Contact search results by Outlet Type returns only contacts with select" +
            "ed Outlet Type")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void FilteringContactSearchResultsByOutletTypeReturnsOnlyContactsWithSelectedOutletType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering Contact search results by Outlet Type returns only contacts with select" +
                    "ed Outlet Type", new string[] {
                        "Influencers",
                        "ignore"});
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 38
 testRunner.When("I perform a GET for Contacts by \'Keyword_Profile\' criteria with a value of \'illin" +
                    "ois\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
 testRunner.And("I perform a GET for Contacts with the filter \'Newspaper\' in the filter category \'" +
                    "mediaoutlettypeid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.Then("all filtered contacts returned should have \'Newspaper\' as their Outlet Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filtering Contact search results by DMA returns only contacts with selected DMA")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void FilteringContactSearchResultsByDMAReturnsOnlyContactsWithSelectedDMA()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering Contact search results by DMA returns only contacts with selected DMA", new string[] {
                        "Influencers",
                        "ignore"});
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
 testRunner.When("I perform a GET for Contacts by \'Keyword_Profile\' criteria with a value of \'illin" +
                    "ois\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
 testRunner.And("I perform a GET for Contacts with the filter \'Chicago, IL\' in the filter category" +
                    " \'dmaid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.Then("all filtered contacts returned should have \'Chicago, IL\' as their DMA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filtering Contact search results applying two filters")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void FilteringContactSearchResultsApplyingTwoFilters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering Contact search results applying two filters", new string[] {
                        "Influencers",
                        "ignore"});
#line 50
this.ScenarioSetup(scenarioInfo);
#line 51
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 52
 testRunner.When("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'cooper\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.And("I perform a GET for Contacts with the filter \'United States\' in the filter catego" +
                    "ry \'country\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.And("I perform a GET for Contacts applying a second filter \'Newspaper\' in the filter c" +
                    "ategory \'mediaoutlettypeid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
 testRunner.Then("all returned contacts should have \'United States\' as ther country and \'Newspaper\'" +
                    " as their Outlet Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filtering Contact search results by Record type returns only contact with selecte" +
            "d record type")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void FilteringContactSearchResultsByRecordTypeReturnsOnlyContactWithSelectedRecordType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering Contact search results by Record type returns only contact with selecte" +
                    "d record type", new string[] {
                        "Influencers",
                        "ignore"});
#line 58
this.ScenarioSetup(scenarioInfo);
#line 59
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 60
 testRunner.When("I perform a GET for Contacts by \'Outlet_Name\' criteria with a value of \'chicago\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 61
 testRunner.And("I perform a GET for Contacts with the filter \'public\' in the filter category \'pub" +
                    "licprivate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.Then("all filtered contacts returned should have FALSE as their IsProprietary value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filtering Contact search results by Contact Language returns only contacts with s" +
            "elected Language")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void FilteringContactSearchResultsByContactLanguageReturnsOnlyContactsWithSelectedLanguage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering Contact search results by Contact Language returns only contacts with s" +
                    "elected Language", new string[] {
                        "Influencers",
                        "ignore"});
#line 65
this.ScenarioSetup(scenarioInfo);
#line 66
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 67
 testRunner.When("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'cooper\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 68
 testRunner.And("I perform a GET for Contacts with the filter \'Spanish\' in the filter category \'wo" +
                    "rkinglanguage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
 testRunner.Then("all filtered contacts returned should have \'Spanish\' as their language", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filtering contact search results by outlet county return only contacts with the s" +
            "elected value")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void FilteringContactSearchResultsByOutletCountyReturnOnlyContactsWithTheSelectedValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering contact search results by outlet county return only contacts with the s" +
                    "elected value", new string[] {
                        "Influencers",
                        "ignore"});
#line 72
this.ScenarioSetup(scenarioInfo);
#line 73
 testRunner.Given("shared session for \'read_only\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 74
 testRunner.When("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'cooper\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
 testRunner.And("I perform a GET for Contacts with the filter \'Denver\' in the filter category \'cou" +
                    "nty\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
 testRunner.Then("I should see results with \'Denver\' as their county for contacts results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filtering Contact search results by by medium & type returns only contacts with s" +
            "elected medium")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void FilteringContactSearchResultsByByMediumTypeReturnsOnlyContactsWithSelectedMedium()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering Contact search results by by medium & type returns only contacts with s" +
                    "elected medium", new string[] {
                        "Influencers",
                        "ignore"});
#line 79
this.ScenarioSetup(scenarioInfo);
#line 80
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 81
 testRunner.When("I perform a GET for Contacts by \'Contact_Name\' criteria with a value of \'cooper\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 82
 testRunner.And("I perform a GET for Contacts with the filter \'Newspaper\' in the filter category \'" +
                    "mediaoutlettypeid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
 testRunner.Then("all filtered contacts returned should have \'Newspaper\' as their Outlet Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

