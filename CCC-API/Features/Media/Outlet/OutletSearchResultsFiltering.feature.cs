// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CCC_API.Features.Media.Outlet
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("OutletSearchResultsFiltering")]
    public partial class OutletSearchResultsFilteringFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "OutletSearchResultsFiltering.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "OutletSearchResultsFiltering", "\tIn order to find relevant outlets\r\n\tAs a CCC standard user\r\n\tI want to be able t" +
                    "o filter outlet search results", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filtering Outlet search results by media type returns only outlets with selected " +
            "media type")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void FilteringOutletSearchResultsByMediaTypeReturnsOnlyOutletsWithSelectedMediaType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering Outlet search results by media type returns only outlets with selected " +
                    "media type", new string[] {
                        "Influencers",
                        "ignore"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'Chicago\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.And("I perform a GET for Outlets with the filter \'Blog, consumer\' in the filter catego" +
                    "ry \'mediaoutlettypeid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.Then("all filtered outlets returned should have \'Blog, consumer\' as their Outlet Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filtering Outlet search results by DMA returns only outlets with selected media t" +
            "ype")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void FilteringOutletSearchResultsByDMAReturnsOnlyOutletsWithSelectedMediaType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering Outlet search results by DMA returns only outlets with selected media t" +
                    "ype", new string[] {
                        "Influencers",
                        "ignore"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'Chicago\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.And("I perform a GET for Outlets with the filter \'Chicago, IL\' in the filter category " +
                    "\'dmaid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.Then("all filtered outlets returned should have \'Chicago, IL\' as their Outlet DMA Name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filtering Outlet search results by subject returns only outlets with selected sub" +
            "ject")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void FilteringOutletSearchResultsBySubjectReturnsOnlyOutletsWithSelectedSubject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering Outlet search results by subject returns only outlets with selected sub" +
                    "ject", new string[] {
                        "Influencers"});
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'Washington\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.And("I perform a GET for Outlets with the filter \'International News\' in the filter ca" +
                    "tegory \'mediaoutletsubject\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.Then("all filtered outlets returned should have \'International News\' as their subject", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filtering Outlet search results by state returns only outlets with selected state" +
            "")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void FilteringOutletSearchResultsByStateReturnsOnlyOutletsWithSelectedState()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering Outlet search results by state returns only outlets with selected state" +
                    "", new string[] {
                        "Influencers",
                        "ignore"});
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.Given("shared session for \'read_only\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'Chicago\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
 testRunner.And("I perform a GET for Outlets with the filter \'Illinois\' in the filter category \'st" +
                    "ate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.Then("all filtered outlets returned should have \'IL\' as their state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filtering Outlet search results by record type returns only outlets with the sele" +
            "cted record type")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void FilteringOutletSearchResultsByRecordTypeReturnsOnlyOutletsWithTheSelectedRecordType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering Outlet search results by record type returns only outlets with the sele" +
                    "cted record type", new string[] {
                        "Influencers",
                        "ignore"});
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
 testRunner.Given("shared session for \'read_only\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'Chicago\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
 testRunner.And("I perform a GET for Outlets with the filter \'public\' in the filter category \'publ" +
                    "icprivate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.Then("all filtered outlets returned should have \'false\' as their proprietary data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filtering outlet search results by outlet city returns only outlets with the sele" +
            "cted city")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void FilteringOutletSearchResultsByOutletCityReturnsOnlyOutletsWithTheSelectedCity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering outlet search results by outlet city returns only outlets with the sele" +
                    "cted city", new string[] {
                        "Influencers",
                        "ignore"});
#line 42
this.ScenarioSetup(scenarioInfo);
#line 43
 testRunner.Given("shared session for \'read_only\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 44
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'Washington\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.And("I perform a GET for Outlets with the filter \'Washington\' in the filter category \'" +
                    "city\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.Then("all filtered outlets returned should have \'Washington\' as their Outlet city", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filtering outlet search results by outlet working language returns only outlets w" +
            "ith the selected language")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void FilteringOutletSearchResultsByOutletWorkingLanguageReturnsOnlyOutletsWithTheSelectedLanguage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering outlet search results by outlet working language returns only outlets w" +
                    "ith the selected language", new string[] {
                        "Influencers",
                        "ignore"});
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
 testRunner.Given("shared session for \'read_only\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'Washington\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
 testRunner.And("I perform a GET for Outlets with the filter \'English\' in the filter category \'med" +
                    "iaoutletworkinglanguage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.Then("all filtered outlets returned should have \'English\' as their outlet language", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filtering outlet search results by affiliated media exclusion returns only proper" +
            " outlets")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void FilteringOutletSearchResultsByAffiliatedMediaExclusionReturnsOnlyProperOutlets()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering outlet search results by affiliated media exclusion returns only proper" +
                    " outlets", new string[] {
                        "Influencers",
                        "ignore"});
#line 56
this.ScenarioSetup(scenarioInfo);
#line 57
 testRunner.Given("shared session for \'read_only\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 58
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'Washington\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
 testRunner.And("I perform a GET for Outlets with the filter \'affiliatedmediaExcluded\' in the filt" +
                    "er category \'affiliatedmedia\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.Then("I should see the outlets with non affiliated media", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filtering outlet search results by outlet county return only outlets with the sel" +
            "ected value")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void FilteringOutletSearchResultsByOutletCountyReturnOnlyOutletsWithTheSelectedValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering outlet search results by outlet county return only outlets with the sel" +
                    "ected value", new string[] {
                        "Influencers",
                        "ignore"});
#line 63
this.ScenarioSetup(scenarioInfo);
#line 64
 testRunner.Given("shared session for \'read_only\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 65
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'Washington\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
 testRunner.And("I perform a GET for Outlets with the filter \'Denver\' in the filter category \'coun" +
                    "ty\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
 testRunner.Then("I should see results with \'Denver\' as their county", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filtering outlet search results by medium & type return only outlets with the sel" +
            "ected value")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void FilteringOutletSearchResultsByMediumTypeReturnOnlyOutletsWithTheSelectedValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering outlet search results by medium & type return only outlets with the sel" +
                    "ected value", new string[] {
                        "Influencers",
                        "ignore"});
#line 70
this.ScenarioSetup(scenarioInfo);
#line 71
 testRunner.Given("shared session for \'read_only\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 72
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'Chicago\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 73
 testRunner.And("I perform a GET for Outlets with the filter \'Online, consumer\' in the filter cate" +
                    "gory \'mediaoutlettypeid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.Then("all filtered outlets returned should have \'Online, consumer\' as their Outlet Type" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filtering Outlet search results by outlets List")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void FilteringOutletSearchResultsByOutletsList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering Outlet search results by outlets List", new string[] {
                        "Influencers",
                        "ignore"});
#line 77
this.ScenarioSetup(scenarioInfo);
#line 78
 testRunner.Given("I login as \'Standard User with lists\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 79
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'Washington\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
 testRunner.And("I perform a GET for Outlets with the group \'Outlet List\' in the filter category \'" +
                    "entitylistitemid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
 testRunner.And("I perform a GET for the first outlet list listed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
 testRunner.Then("I should get the list created in the outlet details response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

