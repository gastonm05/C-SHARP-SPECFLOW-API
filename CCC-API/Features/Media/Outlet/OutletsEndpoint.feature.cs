// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CCC_API.Features.Media.Outlet
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("OutletsEndpoint")]
    public partial class OutletsEndpointFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "OutletsEndpoint.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "OutletsEndpoint", "\tIn order to find outlets\r\n\tAs a standard user\r\n\tI want to query outlets via the " +
                    "outlets endpoint", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search Outlets by Outlet Name")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("media")]
        public virtual void SearchOutletsByOutletName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search Outlets by Outlet Name", new string[] {
                        "Influencers",
                        "ignore"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I login as \'Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'Chicago\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("all returned outlet objects should contain \'Chicago\' in their name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search Outlets by Outlet Location City \'Chicago, Illinois, United States of Ameri" +
            "ca\'")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void SearchOutletsByOutletLocationCityChicagoIllinoisUnitedStatesOfAmerica()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search Outlets by Outlet Location City \'Chicago, Illinois, United States of Ameri" +
                    "ca\'", new string[] {
                        "Influencers",
                        "ignore"});
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("I login as \'Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
 testRunner.When("I perform a GET for Outlets by \'OutletLocation\' \'4-5946\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("all returned outlet objects should have \'Chicago\' as their city", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search Outlets by Outlet Location State \'Illinois, United States of America\'")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("media")]
        public virtual void SearchOutletsByOutletLocationStateIllinoisUnitedStatesOfAmerica()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search Outlets by Outlet Location State \'Illinois, United States of America\'", new string[] {
                        "Influencers",
                        "ignore"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("I login as \'Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.When("I perform a GET for Outlets by \'OutletLocation\' \'2-14\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("all returned outlet objects should have \'IL\' as their state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search Outlets by Outlet Location Country \'United States of America\'")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("media")]
        public virtual void SearchOutletsByOutletLocationCountryUnitedStatesOfAmerica()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search Outlets by Outlet Location Country \'United States of America\'", new string[] {
                        "Influencers",
                        "ignore"});
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("I login as \'Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
 testRunner.When("I perform a GET for Outlets by \'OutletLocation\' \'1-1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then("all returned outlet objects should have \'United States\' as their country", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search Outlets by Outlet Type \'Blog, consumer\'")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("media")]
        public virtual void SearchOutletsByOutletTypeBlogConsumer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search Outlets by Outlet Type \'Blog, consumer\'", new string[] {
                        "Influencers",
                        "ignore"});
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("I login as \'Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.When("I perform a GET for Outlets by \'OutletType\' \'170000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then("all returned outlet objects should have \'Blog, consumer\' as their outlet type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search Outlets by Subject \'Academic Certification\'")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("media")]
        public virtual void SearchOutletsBySubjectAcademicCertification()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search Outlets by Subject \'Academic Certification\'", new string[] {
                        "Influencers",
                        "ignore"});
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
 testRunner.Given("I login as \'Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
 testRunner.When("I perform a GET for Outlets by \'Subject\' \'100000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("all returned outlet objects should contain \'Academic Certification\' in their subj" +
                    "ects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search Outlets by DMA \'Abilene-Sweetwater, TX\'")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("media")]
        public virtual void SearchOutletsByDMAAbilene_SweetwaterTX()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search Outlets by DMA \'Abilene-Sweetwater, TX\'", new string[] {
                        "Influencers",
                        "ignore"});
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.Given("I login as \'Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
 testRunner.When("I perform a GET for Outlets by \'DMA\' \'101\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
 testRunner.Then("all returned outlet objects should have \'Abilene-Sweetwater, TX\' as their DMA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Outlet results should contain a UVPM value equal to or greater than zero")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("media")]
        public virtual void OutletResultsShouldContainAUVPMValueEqualToOrGreaterThanZero()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Outlet results should contain a UVPM value equal to or greater than zero", new string[] {
                        "Influencers",
                        "ignore"});
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
 testRunner.Given("I login as \'Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'Chicago\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
 testRunner.Then("all returned outlet objects should have a UVPM value equal to or greater than zer" +
                    "o", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Outlet results should contain Medium value")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("media")]
        public virtual void OutletResultsShouldContainMediumValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Outlet results should contain Medium value", new string[] {
                        "Influencers",
                        "ignore"});
#line 55
this.ScenarioSetup(scenarioInfo);
#line 56
 testRunner.Given("I login as \'Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 57
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'Chicago\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
 testRunner.Then("all returned outlet objects should have a Medium value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Outlet child suggestion from outlet search")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("media")]
        public virtual void OutletChildSuggestionFromOutletSearch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Outlet child suggestion from outlet search", new string[] {
                        "Influencers",
                        "ignore"});
#line 61
this.ScenarioSetup(scenarioInfo);
#line 62
 testRunner.Given("I login as \'Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 63
 testRunner.When("I perform a GET for Outlet suggestion using the key \'chicago\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 64
 testRunner.Then("I should see \'chicago\' in outlet name as a suggestion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that a recent outlet search is saved")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatARecentOutletSearchIsSaved()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that a recent outlet search is saved", new string[] {
                        "Influencers",
                        "ignore"});
#line 67
this.ScenarioSetup(scenarioInfo);
#line 68
 testRunner.Given("I login as \'manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 69
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'Chicago\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.And("I perform a POST to save the outlet search using the key generated before", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
 testRunner.And("I perform a get for recent outlet searches endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.Then("I should find the recent searched saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Regional Focus on Outlets always returns a non-null value in search results")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("media")]
        public virtual void RegionalFocusOnOutletsAlwaysReturnsANon_NullValueInSearchResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Regional Focus on Outlets always returns a non-null value in search results", new string[] {
                        "Influencers",
                        "ignore"});
#line 76
this.ScenarioSetup(scenarioInfo);
#line 77
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 78
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'Chicago\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 79
 testRunner.Then("all returned outlets have a non-null Regional Focus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that a outlet search is saved")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatAOutletSearchIsSaved()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that a outlet search is saved", new string[] {
                        "Influencers",
                        "ignore"});
#line 82
this.ScenarioSetup(scenarioInfo);
#line 83
 testRunner.Given("I login as \'manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 84
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'Chicago\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 85
 testRunner.And("I perform a POST to keep the outlet search using the key generated before with a " +
                    "random name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.And("I perform a get for saved outlet searches endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
 testRunner.Then("I should find the saved searched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 88
 testRunner.Then("The saved searched is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that an outlet saved searched was deleted properly")]
        [NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatAnOutletSavedSearchedWasDeletedProperly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that an outlet saved searched was deleted properly", new string[] {
                        "Influencers"});
#line 91
this.ScenarioSetup(scenarioInfo);
#line 92
 testRunner.Given("I login as \'Manager Standard user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 93
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'Chicago\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 94
 testRunner.And("I perform a POST to keep the outlet search using the key generated before with a " +
                    "random name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
 testRunner.And("I perform a DELETE for the outlet saved search created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.And("I perform a get for saved outlet searches endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
 testRunner.Then("the outlet saved search should be deleted properly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that Datagroup id is on outlet recent searches response")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatDatagroupIdIsOnOutletRecentSearchesResponse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that Datagroup id is on outlet recent searches response", new string[] {
                        "Influencers",
                        "ignore"});
#line 100
this.ScenarioSetup(scenarioInfo);
#line 101
 testRunner.Given("I login as \'Standard User with default DG\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 102
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'Chicago\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 103
 testRunner.And("I save the current Datagroup id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
 testRunner.And("I perform a POST to save the outlet search using the key generated before", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
 testRunner.And("I perform a get for recent outlet searches endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
 testRunner.Then("I should find the recent searched saved with the proper Datagroup id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that Datagroup id is on outlet saved searches response")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatDatagroupIdIsOnOutletSavedSearchesResponse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that Datagroup id is on outlet saved searches response", new string[] {
                        "Influencers",
                        "ignore"});
#line 109
this.ScenarioSetup(scenarioInfo);
#line 110
 testRunner.Given("I login as \'Standard User with default DG\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 111
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'Chicago\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 112
 testRunner.And("I save the current Datagroup id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
 testRunner.And("I perform a POST to keep the outlet search using the key generated before with a " +
                    "random name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
 testRunner.And("I perform a get for saved outlet searches endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
 testRunner.Then("I should find the saved searched with the proper Datagroup id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that a outlet saved seach is edited properly")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatAOutletSavedSeachIsEditedProperly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that a outlet saved seach is edited properly", new string[] {
                        "Influencers",
                        "ignore"});
#line 118
this.ScenarioSetup(scenarioInfo);
#line 119
 testRunner.Given("I login as \'Manager Standard user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 120
 testRunner.When("I perform a get for saved outlet searches endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 121
 testRunner.And("I edit the name of the first outlet saved search listed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
 testRunner.Then("I should see the name edited of the outlet saved search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that the outlet search by list name is returning proper results")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatTheOutletSearchByListNameIsReturningProperResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that the outlet search by list name is returning proper results", new string[] {
                        "Influencers",
                        "ignore"});
#line 125
this.ScenarioSetup(scenarioInfo);
#line 126
 testRunner.Given("I login as \'Manager Standard user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 127
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'Chicago\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 128
 testRunner.And("I perform a Post for creating an outlet list with a random name using the top thr" +
                    "ee ids", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 129
 testRunner.And("I perform a GET for Outlets by \'OutletListName\' with the list created before", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 130
 testRunner.Then("I should see the outlets returned properly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that an outlet search using support accents in their searches")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("Süddeutsche Zeitung", null)]
        [NUnit.Framework.TestCaseAttribute("O Diário da Região", null)]
        [NUnit.Framework.TestCaseAttribute("Associação", null)]
        [NUnit.Framework.TestCaseAttribute("Cataluña", null)]
        public virtual void VerifyThatAnOutletSearchUsingSupportAccentsInTheirSearches(string value_Accents, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that an outlet search using support accents in their searches", @__tags);
#line 133
this.ScenarioSetup(scenarioInfo);
#line 134
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 135
 testRunner.When(string.Format("I perform a GET for Outlets by \'OutletName\' \'{0}\'", value_Accents), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 136
 testRunner.Then(string.Format("I should contain any outlets results with the \'{0}\'", value_Accents), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify outlet search by outlet news focus")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("629", "International", null)]
        [NUnit.Framework.TestCaseAttribute("630", "National", null)]
        [NUnit.Framework.TestCaseAttribute("631", "Regional", null)]
        [NUnit.Framework.TestCaseAttribute("632", "Local", null)]
        [NUnit.Framework.TestCaseAttribute("633", "Community", null)]
        public virtual void VerifyOutletSearchByOutletNewsFocus(string id, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify outlet search by outlet news focus", @__tags);
#line 146
this.ScenarioSetup(scenarioInfo);
#line 147
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 148
 testRunner.When(string.Format("I perform a GET for Outlets by \'Outlet_NewsFocus\' \'{0}\'", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 149
 testRunner.Then(string.Format("all items returned should have the \'{0}\' in their Regional Focus field", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that an outlet search by Outlet language is saved properly on recent searc" +
            "h")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("24000", "English", null)]
        public virtual void VerifyThatAnOutletSearchByOutletLanguageIsSavedProperlyOnRecentSearch(string id, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that an outlet search by Outlet language is saved properly on recent searc" +
                    "h", @__tags);
#line 160
this.ScenarioSetup(scenarioInfo);
#line 161
 testRunner.Given("I login as \'manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 162
 testRunner.When(string.Format("I perform a GET for Outlets by \'Outlet_WorkingLanguage\' \'{0}\'", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 163
 testRunner.And("I perform a POST to save the outlet search using the key generated before", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
 testRunner.Then(string.Format("I should see the results and the \'{0}\' in the recent searches", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that an outlet search by Outlet frecuency is returning properly results")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("20500", "Daily", null)]
        public virtual void VerifyThatAnOutletSearchByOutletFrecuencyIsReturningProperlyResults(string id, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that an outlet search by Outlet frecuency is returning properly results", @__tags);
#line 171
this.ScenarioSetup(scenarioInfo);
#line 172
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 173
 testRunner.When(string.Format("I perform a GET for Outlets by \'Outlet_Frecuency\' \'{0}\'", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 174
 testRunner.Then(string.Format("I should see the \'{0}\' for frecuency property on outlets response", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that a new private outlet is created properly")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("316", "United States", null)]
        public virtual void VerifyThatANewPrivateOutletIsCreatedProperly(string id, string country, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that a new private outlet is created properly", @__tags);
#line 181
this.ScenarioSetup(scenarioInfo);
#line 182
 testRunner.Given("I login as \'manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 183
 testRunner.When(string.Format("I perform a POST to create a new outlet using a random name and the \'{0}\'", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 184
 testRunner.Then(string.Format("I should see the outlet created with the proper country \'{0}\'", country), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Edit a private outlet")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("316", "United States", null)]
        public virtual void EditAPrivateOutlet(string id, string country, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit a private outlet", @__tags);
#line 191
this.ScenarioSetup(scenarioInfo);
#line 192
 testRunner.Given("I login as \'manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 193
 testRunner.When(string.Format("I perform a POST to create a new outlet using a random name and the \'{0}\'", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 194
 testRunner.And("I perform a PATCH to edit the name of the outlet created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 195
 testRunner.Then("I should see the private outlet with the data edited", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that an outlet search by reach is returning proper results")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("Outlet_AudienceReach", null)]
        [NUnit.Framework.TestCaseAttribute("Outlet_UVPM", null)]
        public virtual void VerifyThatAnOutletSearchByReachIsReturningProperResults(string criteria, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that an outlet search by reach is returning proper results", @__tags);
#line 202
this.ScenarioSetup(scenarioInfo);
#line 203
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 204
 testRunner.When(string.Format("I perform a GET for Outlets \'{0}\' between \'1\' and \'500\' values", criteria), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 205
 testRunner.Then("I should see results returned between \'1\' and \'500\' values on the range", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a private outlet")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("316", "United States", null)]
        public virtual void DeleteAPrivateOutlet(string id, string country, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a private outlet", @__tags);
#line 213
this.ScenarioSetup(scenarioInfo);
#line 214
 testRunner.Given("I login as \'manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 215
 testRunner.When(string.Format("I perform a POST to create a new outlet using a random name and the \'{0}\'", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 216
 testRunner.And("I delete the private  outlet created previously", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 217
 testRunner.Then("I should get the \'200\' status code returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Export outlets to Csv")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("/SortName", null)]
        public virtual void ExportOutletsToCsv(string field, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "influencers"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Export outlets to Csv", @__tags);
#line 224
this.ScenarioSetup(scenarioInfo);
#line 225
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 226
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'Chicago\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 227
 testRunner.And(string.Format("I perform a POST to export Outlets including \'{0}\' field", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 228
 testRunner.And("I perform a GET for Outlet jobs with the id from the export", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 229
 testRunner.Then("the job response status code is \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that outlet search by record type return proper results")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("public", "false", null)]
        [NUnit.Framework.TestCaseAttribute("proprietary", "true", null)]
        public virtual void VerifyThatOutletSearchByRecordTypeReturnProperResults(string recordtype, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that outlet search by record type return proper results", @__tags);
#line 236
this.ScenarioSetup(scenarioInfo);
#line 237
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 238
 testRunner.When(string.Format("I perform a GET for Outlets by \'Outlet_Recordtype\' \'{0}\'", recordtype), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 239
 testRunner.Then(string.Format("all results returned should have \'{0}\' in ther IsProprietaryOutlet value", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that list are patched properly on private outlets")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("316", "United States", null)]
        public virtual void VerifyThatListArePatchedProperlyOnPrivateOutlets(string id, string country, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that list are patched properly on private outlets", @__tags);
#line 247
this.ScenarioSetup(scenarioInfo);
#line 248
 testRunner.Given("I login as \'manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 249
 testRunner.When(string.Format("I perform a POST to create a new outlet using a random name and the \'{0}\'", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 250
 testRunner.And("I perform a post to get all \'MediaOutlet\' lists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 251
 testRunner.And("I perform a PATCH to add a list for that outlet taking the first id and name for " +
                    "the list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 252
 testRunner.Then("I should see the list added properly on response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that recent tweets are displayed for outlets")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatRecentTweetsAreDisplayedForOutlets()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that recent tweets are displayed for outlets", new string[] {
                        "Influencers",
                        "ignore"});
#line 259
this.ScenarioSetup(scenarioInfo);
#line 260
 testRunner.Given("I login as \'Standard User with default DG\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 261
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'chicago tribune\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 262
 testRunner.And("I save the fist id of the response getted before", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 263
 testRunner.And("I perform a GET for the recent twitter endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 264
 testRunner.Then("I should see proper data on response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that notes are added on outlets lists properly")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatNotesAreAddedOnOutletsListsProperly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that notes are added on outlets lists properly", new string[] {
                        "Influencers",
                        "ignore"});
#line 267
this.ScenarioSetup(scenarioInfo);
#line 268
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 269
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'Chicago\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 270
 testRunner.And("I perform a Post for creating an outlet list with a random name using the top thr" +
                    "ee ids", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 271
 testRunner.And("I perform a Patch for the outlet list created before adding some ramdom notes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 272
 testRunner.Then("I should see notes for outlet list on response properly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that using the word \"the\" outlet name should return same numbers of result" +
            "s than without it")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatUsingTheWordTheOutletNameShouldReturnSameNumbersOfResultsThanWithoutIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that using the word \"the\" outlet name should return same numbers of result" +
                    "s than without it", new string[] {
                        "Influencers",
                        "ignore"});
#line 275
this.ScenarioSetup(scenarioInfo);
#line 276
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 277
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'new york times\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 278
 testRunner.And("I perform a second GET for Outlets by \'OutletName\' \'the new york times\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 279
 testRunner.Then("I should get the same numbers of results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that outlet search by news only outlet return proper results")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatOutletSearchByNewsOnlyOutletReturnProperResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that outlet search by news only outlet return proper results", new string[] {
                        "Influencers",
                        "ignore"});
#line 282
this.ScenarioSetup(scenarioInfo);
#line 283
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 284
 testRunner.When("I perform a GET for Outlets by \'Outlet_NewsOnlyOutlets\' \'true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 285
 testRunner.Then("I should see any NOD only outlet returned on response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that outlet search by outlet location using radius")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("4-5946", "IL", null)]
        public virtual void VerifyThatOutletSearchByOutletLocationUsingRadius(string location_Id, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that outlet search by outlet location using radius", @__tags);
#line 288
this.ScenarioSetup(scenarioInfo);
#line 289
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "criteriaName",
                        "criteriaValue"});
            table1.AddRow(new string[] {
                        "OutletLocation",
                        string.Format("{0}", location_Id)});
            table1.AddRow(new string[] {
                        "Outlet_LocationRadius",
                        "10"});
#line 290
 testRunner.When("I perform a GET for Outlets by the following criteria:", ((string)(null)), table1, "When ");
#line 294
 testRunner.Then(string.Format("the results should match with the \'{0}\' location on outlets response", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that multiple search can be perform for media outlets")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatMultipleSearchCanBePerformForMediaOutlets()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that multiple search can be perform for media outlets", new string[] {
                        "Influencers",
                        "ignore"});
#line 301
this.ScenarioSetup(scenarioInfo);
#line 302
 testRunner.Given("I login as \'manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "criteriaName",
                        "criteriaValue"});
            table2.AddRow(new string[] {
                        "OutletName",
                        "Chicago"});
            table2.AddRow(new string[] {
                        "Outlet_Recordtype",
                        "public"});
#line 303
 testRunner.When("I perform a GET for Outlets by the following criteria:", ((string)(null)), table2, "When ");
#line 307
 testRunner.Then("all returned Outlets should have \'chicago\' in their fullname and the false in the" +
                    " proprietary", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the outlets location search by county")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("3-1873", "New York", null)]
        public virtual void VerifyTheOutletsLocationSearchByCounty(string location_Id, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the outlets location search by county", @__tags);
#line 310
this.ScenarioSetup(scenarioInfo);
#line 311
 testRunner.Given("I login as \'manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 312
 testRunner.When(string.Format("I perform a GET for Outlets by \'OutletLocation\' \'{0}\'", location_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 313
 testRunner.Then(string.Format("I should see the proper \'{0}\' on the response", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that outlet name can be performed using multiples values")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatOutletNameCanBePerformedUsingMultiplesValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that outlet name can be performed using multiples values", new string[] {
                        "Influencers",
                        "ignore"});
#line 320
this.ScenarioSetup(scenarioInfo);
#line 321
 testRunner.Given("I login as \'manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 322
 testRunner.When("I perform a GET for outlets ids for the following outlets \'chicago online,chicago" +
                    " tribune\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 323
 testRunner.Then("I should see results with the given names", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search outlets by target")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("2119290", "Chicago", null)]
        public virtual void SearchOutletsByTarget(string id, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search outlets by target", @__tags);
#line 326
this.ScenarioSetup(scenarioInfo);
#line 327
 testRunner.Given("I login as \'manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 328
 testRunner.When(string.Format("I perform a GET for Outlets by \'OutletTarget_Ids\' \'{0}\'", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 329
 testRunner.Then(string.Format("I should see \'{0}\' as target area location", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Duplicate an outlet list")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void DuplicateAnOutletList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Duplicate an outlet list", new string[] {
                        "Influencers",
                        "ignore"});
#line 337
this.ScenarioSetup(scenarioInfo);
#line 338
 testRunner.Given("I login as \'manager Standard User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 339
 testRunner.When("I perform a GET for Outlets by \'OutletName\' \'new york times\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 340
 testRunner.And("I perform a Post for creating an outlet list with a random name using the top thr" +
                    "ee ids", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 341
 testRunner.And("I duplicate the oulet list for the same datagroup changing the name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 342
 testRunner.And("I retrieve the outlet list information recently duplicated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 343
 testRunner.Then("I should see the same results that the original one on outlets lists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that outlet search by opted out from emails return relevant results")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        public virtual void VerifyThatOutletSearchByOptedOutFromEmailsReturnRelevantResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that outlet search by opted out from emails return relevant results", new string[] {
                        "Influencers",
                        "ignore"});
#line 346
this.ScenarioSetup(scenarioInfo);
#line 347
 testRunner.Given("I login as \'Posdemo Manager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 348
 testRunner.When("I perform a GET for Outlets by \'OutletOptedOut\' \'true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 349
 testRunner.Then("I should see outlets results with the \'True\' value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that a outlet created is opted out properly")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
[NUnit.Framework.CategoryAttribute("media")]
        [NUnit.Framework.TestCaseAttribute("316", "United States", null)]
        public virtual void VerifyThatAOutletCreatedIsOptedOutProperly(string id, string country, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Influencers",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that a outlet created is opted out properly", @__tags);
#line 352
this.ScenarioSetup(scenarioInfo);
#line 353
 testRunner.Given("I login as \'Posdemo Manager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 354
 testRunner.When(string.Format("I perform a POST to create a new outlet using a random name and the \'{0}\'", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 355
 testRunner.And("I perform a PATCH for opted out the private outlet created setting as \'true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 356
 testRunner.Then("I should see the \'true\' value on outlet edited", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 357
 testRunner.And("the outlet is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

