// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CCC_API.Features.Common
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Language")]
    public partial class LanguageFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Language.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Language", "\tIn order to see all available languages\r\n\tI want an endpoint to return available" +
                    " languages", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Languages endpoint returns correct languages")]
        [NUnit.Framework.CategoryAttribute("configuration")]
        [NUnit.Framework.TestCaseAttribute("German", "1031", "de-de", "True", null)]
        [NUnit.Framework.TestCaseAttribute("English", "1033", "en-us", "True", null)]
        [NUnit.Framework.TestCaseAttribute("Spanish", "1034", "es-es", "False", null)]
        [NUnit.Framework.TestCaseAttribute("Finnish", "1035", "fi-fi", "False", null)]
        [NUnit.Framework.TestCaseAttribute("French", "1036", "fr-fr", "True", null)]
        [NUnit.Framework.TestCaseAttribute("Italian", "1040", "it-it", "False", null)]
        [NUnit.Framework.TestCaseAttribute("Dutch", "1043", "nl-nl", "True", null)]
        [NUnit.Framework.TestCaseAttribute("Norwegian (Bokmål)", "1044", "no-no", "False", null)]
        [NUnit.Framework.TestCaseAttribute("Portuguese", "1046", "pt-br", "False", null)]
        [NUnit.Framework.TestCaseAttribute("Swedish", "1053", "sv-se", "False", null)]
        [NUnit.Framework.TestCaseAttribute("Chinese", "2052", "zh-cn", "False", null)]
        [NUnit.Framework.TestCaseAttribute("English", "2057", "en-gb", "True", null)]
        [NUnit.Framework.TestCaseAttribute("Spanish", "2058", "es-mx", "False", null)]
        [NUnit.Framework.TestCaseAttribute("French", "3084", "fr-ca", "True", null)]
        [NUnit.Framework.TestCaseAttribute("English", "4105", "en-ca", "True", null)]
        public virtual void LanguagesEndpointReturnsCorrectLanguages(string lang, string id, string code, string status, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "acl"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Languages endpoint returns correct languages", @__tags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.When("I perform a GET for all languages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.Then("the languages endpoint returns 16 languages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 9
 testRunner.And(string.Format("the languages response contains the language \'{0}\' with an id of \'{1}\' a code of " +
                        "\'{2}\' and a status of \'{3}\'", lang, id, code, status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
