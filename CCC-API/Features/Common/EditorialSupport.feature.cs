// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CCC_API.Features.Common
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("EditorialSupport")]
    public partial class EditorialSupportFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EditorialSupport.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "EditorialSupport", "\tTo verify Editorial Contact feature it\'s working properly we validate all possib" +
                    "le scenarios \r\n\tin the creation of Editorial Contact requests", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A User creates a Editorial Contact requests for a supported country (with Editori" +
            "al support link)")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("configuration")]
        [NUnit.Framework.CategoryAttribute("UserManagement")]
        [NUnit.Framework.CategoryAttribute("Request")]
        [NUnit.Framework.CategoryAttribute("Editorial")]
        [NUnit.Framework.CategoryAttribute("Contact")]
        public virtual void AUserCreatesAEditorialContactRequestsForASupportedCountryWithEditorialSupportLink()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A User creates a Editorial Contact requests for a supported country (with Editori" +
                    "al support link)", new string[] {
                        "acl",
                        "UserManagement",
                        "Request",
                        "Editorial",
                        "Contact",
                        "Ignore"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("the API test data \'EditorialSupportData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("I login as \'Global Portal On Canadian Language Company - Manager User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.When("I perform a POST for contact/editorial endpoint to send a Editorial Contact Reque" +
                    "st using a \'VALID\' EditorialContactDetailsId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("Editorial Contact endpoint response should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A User creates a Editorial Contact requests for a unsupported country (without Ed" +
            "itorial support link)")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("configuration")]
        [NUnit.Framework.CategoryAttribute("UserManagement")]
        [NUnit.Framework.CategoryAttribute("Request")]
        [NUnit.Framework.CategoryAttribute("Editorial")]
        [NUnit.Framework.CategoryAttribute("Contact")]
        public virtual void AUserCreatesAEditorialContactRequestsForAUnsupportedCountryWithoutEditorialSupportLink()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A User creates a Editorial Contact requests for a unsupported country (without Ed" +
                    "itorial support link)", new string[] {
                        "acl",
                        "UserManagement",
                        "Request",
                        "Editorial",
                        "Contact",
                        "Ignore"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("the API test data \'EditorialSupportData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.And("I login as \'Global Portal On Company - Manager User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.When("I perform a POST for contact/editorial endpoint to send a Editorial Contact Reque" +
                    "st using a \'VALID\' EditorialContactDetailsId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then("Editorial Contact endpoint response should be \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 19
 testRunner.And("Editorial Contact Endpoint response message should be \'Invalid EditorialContactDe" +
                    "tailsId was specified\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A User creates a Editorial Contact requests using an invalid LanguageKey")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("configuration")]
        [NUnit.Framework.CategoryAttribute("UserManagement")]
        [NUnit.Framework.CategoryAttribute("Request")]
        [NUnit.Framework.CategoryAttribute("Editorial")]
        [NUnit.Framework.CategoryAttribute("Contact")]
        public virtual void AUserCreatesAEditorialContactRequestsUsingAnInvalidLanguageKey()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A User creates a Editorial Contact requests using an invalid LanguageKey", new string[] {
                        "acl",
                        "UserManagement",
                        "Request",
                        "Editorial",
                        "Contact",
                        "Ignore"});
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("the API test data \'EditorialSupportData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
 testRunner.And("I login as \'Global Portal On Company - Manager User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.When("I perform a POST for contact/editorial endpoint to send a Editorial Contact Reque" +
                    "st using a \'INVALID\' EditorialContactDetailsId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
 testRunner.Then("Editorial Contact endpoint response should be \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 27
 testRunner.And("Editorial Contact Endpoint response message should be \'Invalid EditorialContactDe" +
                    "tailsId was specified\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

