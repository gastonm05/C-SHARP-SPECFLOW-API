// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CCC_API.Features.Common
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Export - Templates")]
    public partial class Export_TemplatesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ExportTemplate.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Export - Templates", "\tTo verify that export templates can be created, retrieved, modified and deleted\r" +
                    "\n\tusing a valid CCC user I want to call the UI/Grid endpoint - api/v1/exporttemp" +
                    "lates", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Admin User can modify a \'Outlet\' template and save it")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("configuration")]
        [NUnit.Framework.CategoryAttribute("ExportTemplates")]
        public virtual void AAdminUserCanModifyAOutletTemplateAndSaveIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Admin User can modify a \'Outlet\' template and save it", new string[] {
                        "acl",
                        "ExportTemplates",
                        "Ignore"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
    testRunner.Given("the API test data \'ExportTemplateData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And("I login as \'API Manager User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.When("I perform a GET on export template endpoint using a \'Outlet\' exporttemplateid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("Get ExportTemplate endpoint response code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
 testRunner.When("I perform a PUT on Export Template endpoint using a \'Outlet\' exporttemplateid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.Then("Export Template endpoint \'PUT\' response code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 13
 testRunner.And("I verify all Export Template data was changed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Admin User can modify a \'News\' template and save it")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("configuration")]
        [NUnit.Framework.CategoryAttribute("ExportTemplates")]
        public virtual void AAdminUserCanModifyANewsTemplateAndSaveIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Admin User can modify a \'News\' template and save it", new string[] {
                        "acl",
                        "ExportTemplates",
                        "Ignore"});
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
    testRunner.Given("the API test data \'ExportTemplateData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
 testRunner.And("I login as \'API Manager User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.When("I perform a GET on export template endpoint using a \'News\' exporttemplateid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
 testRunner.Then("Get ExportTemplate endpoint response code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 21
 testRunner.When("I perform a PUT on Export Template endpoint using a \'News\' exporttemplateid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("Export Template endpoint \'PUT\' response code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 23
 testRunner.And("I verify all Export Template data was changed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Admin User can modify a \'Contact\' template and save it")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("configuration")]
        [NUnit.Framework.CategoryAttribute("ExportTemplates")]
        public virtual void AAdminUserCanModifyAContactTemplateAndSaveIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Admin User can modify a \'Contact\' template and save it", new string[] {
                        "acl",
                        "ExportTemplates",
                        "Ignore"});
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("the API test data \'ExportTemplateData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
    testRunner.And("I login as \'API Manager User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.When("I perform a GET on export template endpoint using a \'Contact\' exporttemplateid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then("Get ExportTemplate endpoint response code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 31
 testRunner.When("I perform a PUT on Export Template endpoint using a \'Contact\' exporttemplateid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
 testRunner.Then("Export Template endpoint \'PUT\' response code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 33
 testRunner.And("I verify all Export Template data was changed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Admin User can create a \'Contact\' template and delete it")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("configuration")]
        [NUnit.Framework.CategoryAttribute("ExportTemplates")]
        public virtual void AAdminUserCanCreateAContactTemplateAndDeleteIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Admin User can create a \'Contact\' template and delete it", new string[] {
                        "acl",
                        "ExportTemplates",
                        "Ignore"});
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
    testRunner.Given("the API test data \'ExportTemplateData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 38
 testRunner.And("I login as \'API Manager User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.When("I perform a POST on export template endpoint with export type \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("Export Template endpoint \'POST\' response code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
 testRunner.When("I perform a DELETE on export template endpoint to delete just created export temp" +
                    "late", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
 testRunner.Then("Delete ExportTemplate endpoint response code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Admin User can create a \'Outlet\' template and delete it")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("configuration")]
        [NUnit.Framework.CategoryAttribute("ExportTemplates")]
        public virtual void AAdminUserCanCreateAOutletTemplateAndDeleteIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Admin User can create a \'Outlet\' template and delete it", new string[] {
                        "acl",
                        "ExportTemplates",
                        "Ignore"});
#line 45
this.ScenarioSetup(scenarioInfo);
#line 46
    testRunner.Given("the API test data \'ExportTemplateData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 47
 testRunner.And("I login as \'API Manager User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.When("I perform a POST on export template endpoint with export type \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
 testRunner.Then("Export Template endpoint \'POST\' response code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 50
 testRunner.When("I perform a DELETE on export template endpoint to delete just created export temp" +
                    "late", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
 testRunner.Then("Delete ExportTemplate endpoint response code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Admin User can create a \'News\' template and delete it")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("configuration")]
        [NUnit.Framework.CategoryAttribute("ExportTemplates")]
        public virtual void AAdminUserCanCreateANewsTemplateAndDeleteIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Admin User can create a \'News\' template and delete it", new string[] {
                        "acl",
                        "ExportTemplates",
                        "Ignore"});
#line 54
this.ScenarioSetup(scenarioInfo);
#line 55
    testRunner.Given("the API test data \'ExportTemplateData.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 56
 testRunner.And("I login as \'API Manager User\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
 testRunner.When("I perform a POST on export template endpoint with export type \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
 testRunner.Then("Export Template endpoint \'POST\' response code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 59
 testRunner.When("I perform a DELETE on export template endpoint to delete just created export temp" +
                    "late", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
 testRunner.Then("Delete ExportTemplate endpoint response code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

