// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CCC_API.Features.News
{
    using TechTalk.SpecFlow;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("NewsSavedSearches")]
    public partial class NewsSavedSearchesFeature
    {

        private TechTalk.SpecFlow.ITestRunner testRunner;

#line 1 "NewsSavedSearches.feature"
#line hidden

        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "NewsSavedSearches", "\tIn order to revisit searches\r\n\tAs a C3 User\r\n\tI want to be able to save my searc" +
                    "hes", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }

        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }

        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create and Delete a News Saved Search")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void CreateAndDeleteANewsSavedSearch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and Delete a News Saved Search", new string[] {
                        "herdOfGnus"});
#line 7
            this.ScenarioSetup(scenarioInfo);
#line 8
            testRunner.Given("I login as \'Manager with Default DataGroup\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
            testRunner.When("I perform a GET for all news", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
            testRunner.And("I perform a POST to Saved Searches endpoint with name \'Automation Saved Search\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
            testRunner.Then("the Saved Search endpoint should respond with a \'201\' for creating an item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 12
            testRunner.And("the Saved Search endpoint should respond with a \'200\' for deleting an item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("All saved searches are returned with name and id")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void AllSavedSearchesAreReturnedWithNameAndId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All saved searches are returned with name and id", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 15
            this.ScenarioSetup(scenarioInfo);
#line 16
            testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
            testRunner.When("I get all saved searches", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
            testRunner.Then("all saved searches returned have a name and id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get single saved search")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        [NUnit.Framework.CategoryAttribute("smokeProd")]
        public virtual void GetSingleSavedSearch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get single saved search", new string[] {
                        "herdOfGnus"});
#line 21
            this.ScenarioSetup(scenarioInfo);
#line 22
            testRunner.Given("I login as \'analytics manager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
            testRunner.When("I get all saved searches", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
            testRunner.And("I search for a single saved search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
            testRunner.Then("the saved search is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User can save a news search that doesn\'t have any results")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void UserCanSaveANewsSearchThatDoesntHaveAnyResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User can save a news search that doesn\'t have any results", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 28
            this.ScenarioSetup(scenarioInfo);
#line 29
            testRunner.Given("I login as \'ESA Standard User with Default DG\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
            testRunner.When("I search for news by \'Keywords\' with a value of \'3gru6hd95\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
            testRunner.Then("No news results are returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 32
            testRunner.When("I perform a POST to Saved Searches endpoint with name \'Empty search\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
            testRunner.Then("the Saved Search endpoint should respond with a \'201\' for creating an item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 34
            testRunner.And("the Saved Search endpoint should respond with a \'200\' for deleting an item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Read Only user cannot save news search")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void ReadOnlyUserCannotSaveNewsSearch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read Only user cannot save news search", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 37
            this.ScenarioSetup(scenarioInfo);
#line 38
            testRunner.Given("shared session for \'read_only\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
            testRunner.When("I search for news by \'Keywords\' with a value of \'weather\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
            testRunner.And("I perform a POST to Saved Searches endpoint with name \'Test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
            testRunner.Then("the Saved Search endpoint should respond with a \'403\' for creating an item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate News Details Search Criteria on Saved Search")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void ValidateNewsDetailsSearchCriteriaOnSavedSearch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate News Details Search Criteria on Saved Search", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 44
            this.ScenarioSetup(scenarioInfo);
#line 45
            testRunner.Given("I login as \'Manager with Default DataGroup\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 46
            testRunner.When("I search for news by all news details criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
            testRunner.And("I save the search with name \'News Detail Saved Search\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
            testRunner.Then("the Saved Search endpoint should respond with a \'201\' for creating an item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 49
            testRunner.When("I perform a GET for Saved Search criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
            testRunner.Then("I should see that the saved search includes the search criteria for news details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 51
            testRunner.And("the Saved Search endpoint should respond with a \'200\' for deleting an item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate Saved Search Criteria Update")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void ValidateSavedSearchCriteriaUpdate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Saved Search Criteria Update", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 54
            this.ScenarioSetup(scenarioInfo);
#line 55
            testRunner.Given("I login as \'Manager with Default DataGroup\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 56
            testRunner.When("I create a new saved search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
            testRunner.And("I perform a GET for Saved Search criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
            testRunner.Then("I should see that the saved search includes the value \'basketball\' for keywords c" +
                               "riteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 59
            testRunner.When("I perform a PATCH to update Saved Search keywords criteria with a value of \'playg" +
                               "round\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
            testRunner.Then("I should see that the Saved Search value for keywords criteria was updated to \'pl" +
                               "ayground\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 61
            testRunner.And("the Saved Search endpoint should respond with a \'200\' for deleting an item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

