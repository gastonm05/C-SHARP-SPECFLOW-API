// ------------------------------------------------------------------------------
// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CCC_API.Features.News
{
    using TechTalk.SpecFlow;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("NewsSearch")]
    public partial class NewsSearchFeature
    {

        private TechTalk.SpecFlow.ITestRunner testRunner;

#line 1 "NewsSearch.feature"
#line hidden

        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "NewsSearch", "\tIn order to get News\r\n\tAs a C3 User\r\n\tI want to be able to search for News", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }

        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }

        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("News - Search News by Keyword - 1 Phrase")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void News_SearchNewsByKeyword_1Phrase()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("News - Search News by Keyword - 1 Phrase", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 7
            this.ScenarioSetup(scenarioInfo);
#line 8
            testRunner.Given("I login as \'Default_DG_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
            testRunner.When("I search for news by \'Keywords\' with a value of \'\"donald trump\"\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
            testRunner.Then("the News endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
            testRunner.And("the News endpoint has news with value \'trump\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("News - Search News by Keyword - 2 Terms")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void News_SearchNewsByKeyword_2Terms()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("News - Search News by Keyword - 2 Terms", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 14
            this.ScenarioSetup(scenarioInfo);
#line 15
            testRunner.Given("I login as \'Default_DG_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
            testRunner.When("I search for news by \'Keywords\' with a value of \'sports forecast\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
            testRunner.Then("the News endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
            testRunner.And("the News endpoint has news with value \'sports\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
            testRunner.And("the News endpoint has news with value \'forecast\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("News - Search News by Keyword - 2 Terms - PLUS")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void News_SearchNewsByKeyword_2Terms_PLUS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("News - Search News by Keyword - 2 Terms - PLUS", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 22
            this.ScenarioSetup(scenarioInfo);
#line 23
            testRunner.Given("I login as \'Default_DG_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
            testRunner.When("I search for news by \'Keywords\' with a value of \'sports+forecast\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
            testRunner.Then("the News endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 26
            testRunner.And("the News endpoint has news with value \'sports\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
            testRunner.And("the News endpoint has news with value \'forecast\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("News - Search News by Keyword - 1 Term")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void News_SearchNewsByKeyword_1Term()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("News - Search News by Keyword - 1 Term", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 30
            this.ScenarioSetup(scenarioInfo);
#line 31
            testRunner.Given("I login as \'Default_DG_2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
            testRunner.When("I search for news by \'Keywords\' with a value of \'owl\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
            testRunner.Then("the News endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 34
            testRunner.And("the News endpoint has news with value \'owl\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("News - Search News by Keyword with no parameters")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void News_SearchNewsByKeywordWithNoParameters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("News - Search News by Keyword with no parameters", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 37
            this.ScenarioSetup(scenarioInfo);
#line 38
            testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
            testRunner.When("I search for news by \'Keywords\' with a value of \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
            testRunner.Then("the News endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("News - Search News returns no results")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void News_SearchNewsReturnsNoResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("News - Search News returns no results", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 43
            this.ScenarioSetup(scenarioInfo);
#line 44
            testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
            testRunner.When("I search for news by \'Keywords\' with a value of \'ThisSearchHasNoResults\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
            testRunner.Then("the News endpoint has no results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("News - Search News by Keyword - AND - OR - PARENS - Phrases - Asterisk")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void News_SearchNewsByKeyword_AND_OR_PARENS_Phrases_Asterisk()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("News - Search News by Keyword - AND - OR - PARENS - Phrases - Asterisk", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 49
            this.ScenarioSetup(scenarioInfo);
#line 50
            testRunner.Given("I login as \'Default_DG_4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
            testRunner.When("I search for \'1000\' news by \'Keywords\' with a value of \'pence AND (mike and \"dona" +
                               "ld trump\") OR (united and states) OR president OR Kore*\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
            testRunner.Then("the News endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 53
            testRunner.And("the News endpoint has news with values \'pence\' and \'mike\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
            testRunner.And("the News endpoint has news with values \'pence\' and \'donald trump\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
            testRunner.And("the News endpoint has news with values \'mike\' and \'donald trump\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
            testRunner.And("the News endpoint has news with values \'united\' and \'states\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
            testRunner.And("the News endpoint has news with value \'president\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
            testRunner.And("the News endpoint has news with value \'Korea\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("News - Search News by Keyword - Headline Logic")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void News_SearchNewsByKeyword_HeadlineLogic()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("News - Search News by Keyword - Headline Logic", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 62
            this.ScenarioSetup(scenarioInfo);
#line 63
            testRunner.Given("I login as \'Default_DG_5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 64
            testRunner.When("I search for news by \'Keywords\' with a value of \'[Headline] nhl\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
            testRunner.Then("the News endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 66
            testRunner.And("the News endpoint has news with value \'nhl\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
            testRunner.And("all returned results contain \'nhl\' in the headline", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("News Search by Keywords, Start Date & End Date")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        [NUnit.Framework.CategoryAttribute("smokeProd")]
        public virtual void NewsSearchByKeywordsStartDateEndDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("News Search by Keywords, Start Date & End Date", new string[] {
                        "herdOfGnus"});
#line 70
            this.ScenarioSetup(scenarioInfo);
#line 71
            testRunner.Given("I login as \'analytics manager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 72
            testRunner.When("I perform a GET for news by Keywords \'\' and Start Date \'3/1/2020\' and End Date \'6" +
                               "/15/2020\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 73
            testRunner.Then("the News Endpoint response should be \'200\' for keywords, start date and end date " +
                               "news search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 74
            testRunner.And("all the news clips are within the expected date range", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search News by Company Tone Negative")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void SearchNewsByCompanyToneNegative()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search News by Company Tone Negative", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 77
            this.ScenarioSetup(scenarioInfo);
#line 78
            testRunner.Given("I login as \'ESAManager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 79
            testRunner.When("I search for news by Company Tone with value \'-1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
            testRunner.Then("the News endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 81
            testRunner.And("all news clips Company Tone include the value \'-1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search News by Company Tone Neutral")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void SearchNewsByCompanyToneNeutral()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search News by Company Tone Neutral", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 84
            this.ScenarioSetup(scenarioInfo);
#line 85
            testRunner.Given("I login as \'ESAManager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 86
            testRunner.When("I search for news by Company Tone with value \'-2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 87
            testRunner.Then("the News endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 88
            testRunner.And("all news clips Company Tone include the value \'-2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search News by Company Tone Positive")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void SearchNewsByCompanyTonePositive()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search News by Company Tone Positive", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 91
            this.ScenarioSetup(scenarioInfo);
#line 92
            testRunner.Given("I login as \'ESAManager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 93
            testRunner.When("I search for news by Company Tone with value \'-3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 94
            testRunner.Then("the News endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 95
            testRunner.And("all news clips Company Tone include the value \'-3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search for news with start date only returns news items with news date on or afte" +
            "r start date")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void SearchForNewsWithStartDateOnlyReturnsNewsItemsWithNewsDateOnOrAfterStartDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for news with start date only returns news items with news date on or afte" +
                    "r start date", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 98
            this.ScenarioSetup(scenarioInfo);
#line 99
            testRunner.Given("session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 100
            testRunner.When("I search for news by start date with a value of \'Today minus 30 days\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 101
            testRunner.Then("all returned news results have a date greater than or equal to \'Today minus 30 da" +
                               "ys\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search for news with end date only returns news items with news date on or before" +
            " end date")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void SearchForNewsWithEndDateOnlyReturnsNewsItemsWithNewsDateOnOrBeforeEndDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for news with end date only returns news items with news date on or before" +
                    " end date", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 104
            this.ScenarioSetup(scenarioInfo);
#line 105
            testRunner.Given("session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 106
            testRunner.When("I search for news by end date with a value of \'Today\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 107
            testRunner.Then("all returned news results have a date less than or equal to \'Today\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search for news by date range returns news items with news date within date range" +
            "")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void SearchForNewsByDateRangeReturnsNewsItemsWithNewsDateWithinDateRange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for news by date range returns news items with news date within date range" +
                    "", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 110
            this.ScenarioSetup(scenarioInfo);
#line 111
            testRunner.Given("session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 112
            testRunner.When("I search for news with a start date or \'Today minus 30 days\' and an end date of \'" +
                               "Today\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 113
            testRunner.Then("all returned news results have a news date that is greater than or equal to \'Toda" +
                               "y minus 30 days\' and less than or equal to \'Today plus 1 day\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search for News by Social Location")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void SearchForNewsBySocialLocation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for News by Social Location", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 116
            this.ScenarioSetup(scenarioInfo);
#line 117
            testRunner.Given("I login as \'Social Location Manager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 118
            testRunner.When("I perform a GET for social locations by name \'united\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 119
            testRunner.And("I perform a GET for news searching by Social Locations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 120
            testRunner.Then("the News endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 121
            testRunner.When("I perform a GET for all available facets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 122
            testRunner.Then("I should see a facet with name \'Outlet Country\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search for News by Media Type")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void SearchForNewsByMediaType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for News by Media Type", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 125
            this.ScenarioSetup(scenarioInfo);
#line 126
            testRunner.Given("I login as \'analytics manager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 127
            testRunner.When("I perform a GET for news searching by Media Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 128
            testRunner.Then("the News endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 129
            testRunner.And("all news have media type \'Blog, consumer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate News Item includes VTKey")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void ValidateNewsItemIncludesVTKey()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate News Item includes VTKey", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 132
            this.ScenarioSetup(scenarioInfo);
#line 133
            testRunner.Given("I login as \'analytics manager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 134
            testRunner.When("I perform a GET for all news", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 135
            testRunner.Then("the News endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 136
            testRunner.When("I perform GET to a single news item from search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 137
            testRunner.Then("I should see the VTKey attribute is present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

