// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CCC_API.Features.News
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("NewsOutlets")]
    public partial class NewsOutletsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "NewsOutlets.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "NewsOutlets", "\tIn order to manage News\r\n\tAs a C3 User\r\n\tI want to be able to sort/filter/search" +
                    " by Outlets", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Exclude Outlet List in Search My Coverage")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void ExcludeOutletListInSearchMyCoverage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Exclude Outlet List in Search My Coverage", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I login as \'ESAManager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("I perform a GET for news by \'Outlet_List\' using the \'Exclude\' operator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("the News Endpoint responds with a \'200\' for search by Exclude field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
 testRunner.And("none of the items should be from the excluded outlet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Include Outlet List in Search My Coverage")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void IncludeOutletListInSearchMyCoverage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Include Outlet List in Search My Coverage", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("I login as \'ESAManager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.When("I perform a GET for news by \'Outlet_List\' using the \'Include\' operator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.Then("the News Endpoint responds with a \'200\' for search by Include field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
 testRunner.And("all items should be from the included outlet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Outlet Medium on News clips always returns a non-null value in search results")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void OutletMediumOnNewsClipsAlwaysReturnsANon_NullValueInSearchResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Outlet Medium on News clips always returns a non-null value in search results", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given("session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
 testRunner.When("I perform a GET for all news", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.Then("all returned news results have a non-null Outlet Medium", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("News Search by including particular Outlet")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void NewsSearchByIncludingParticularOutlet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("News Search by including particular Outlet", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
 testRunner.When("I perform a GET for news by \'Outlet_Name\' using the \'Include\' operator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then("the News Endpoint responds with a \'200\' for search by Include field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 31
 testRunner.And("all items should be from the included outlet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("News Search by excluding particular Outlet")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void NewsSearchByExcludingParticularOutlet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("News Search by excluding particular Outlet", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
 testRunner.Given("session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
 testRunner.When("I perform a GET for news by \'Outlet_Name\' using the \'Exclude\' operator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.Then("the News Endpoint responds with a \'200\' for search by Exclude field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 38
 testRunner.And("none of the items should be from the excluded outlet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("News Search by Invalid Outlet ID")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        public virtual void NewsSearchByInvalidOutletID()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("News Search by Invalid Outlet ID", new string[] {
                        "herdOfGnus",
                        "ignore"});
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("I login as \'C3ShakedownAutomation Manager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
 testRunner.When("I perform a GET for news by \'Invalid_Outlet_Name\' using the \'Include\' operator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
 testRunner.Then("the News Endpoint responds with a \'400\' for invalid Outlet Id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sort News Results by valid Outlet field and direction")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        [NUnit.Framework.TestCaseAttribute("OutletName", "Ascending", "Name", null)]
        [NUnit.Framework.TestCaseAttribute("OutletName", "Descending", "Name", null)]
        [NUnit.Framework.TestCaseAttribute("OutletMedium", "Ascending", "OutletMedium", null)]
        [NUnit.Framework.TestCaseAttribute("OutletMedium", "Descending", "OutletMedium", null)]
        public virtual void SortNewsResultsByValidOutletFieldAndDirection(string sortField, string direction, string field, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "herdOfGnus",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort News Results by valid Outlet field and direction", @__tags);
#line 47
this.ScenarioSetup(scenarioInfo);
#line 48
 testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 49
 testRunner.When("I search for news by start date with a value of \'Today minus 10 days\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
 testRunner.And(string.Format("I sort news results field \'{0}\' by direction \'{1}\'", sortField, direction), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.Then(string.Format("all news results Outlet field \'{0}\' should be sorted \'{1}\'", field, direction), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search News by Outlet Location")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("herdOfGnus")]
        [NUnit.Framework.CategoryAttribute("news")]
        [NUnit.Framework.TestCaseAttribute("Outlet_Locations", "Chicago", "Chicago", "City", null)]
        [NUnit.Framework.TestCaseAttribute("Outlet_Locations", "Illinois", "IL", "State", null)]
        [NUnit.Framework.TestCaseAttribute("Outlet_Locations", "United States", "United States", "CountryName", null)]
        [NUnit.Framework.TestCaseAttribute("Outlet_Location", "Chicago", "Chicago", "City", null)]
        [NUnit.Framework.TestCaseAttribute("Outlet_Location", "Illinois", "IL", "State", null)]
        [NUnit.Framework.TestCaseAttribute("Outlet_Location", "United States", "United States", "CountryName", null)]
        public virtual void SearchNewsByOutletLocation(string criteria, string location, string text, string field, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "herdOfGnus",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search News by Outlet Location", @__tags);
#line 60
this.ScenarioSetup(scenarioInfo);
#line 61
 testRunner.Given("I login as \'C3ShakedownAutomation Manager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 62
 testRunner.When(string.Format("I search for news by location criteria \'{0}\' with a value of \'{1}\'", criteria, location), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
 testRunner.Then(string.Format("all returned news items have an Outlet \'{0}\' equal to \'{1}\'", field, text), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

