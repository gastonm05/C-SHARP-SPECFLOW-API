// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CCC_API.Features.Analytics
{
    using TechTalk.SpecFlow;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Analytics View - Views End Point")]
    public partial class AnalyticsView_ViewsEndPointFeature
    {

        private TechTalk.SpecFlow.ITestRunner testRunner;

#line 1 "AnalyticsViewEndPoint.feature"
#line hidden

        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Analytics View - Views End Point", "\tTo verify that a list of analytics views can be retrieved\r\n\tAs a valid CCC user " +
                    "with system parameter Analytics-ViewBuilding-Enabled set to true or false\r\n\tI wa" +
                    "nt to call the analytics views endpoint", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }

        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }

        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Views - Get List of Views")]
        [NUnit.Framework.CategoryAttribute("HeartsAndCharts")]
        [NUnit.Framework.CategoryAttribute("AnalyticsView")]
        [NUnit.Framework.CategoryAttribute("analytics")]
        [NUnit.Framework.CategoryAttribute("smokeProd")]
        public virtual void Views_GetListOfViews()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Views - Get List of Views", new string[] {
                        "HeartsAndCharts",
                        "AnalyticsView"});
#line 7
            this.ScenarioSetup(scenarioInfo);
#line 8
            testRunner.Given("I login as \'analytics manager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
            testRunner.When("I perform a GET for all views", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
            testRunner.Then("the views endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Views - Get List of Views when Analytics-ViewBuilding-Enabled is False")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("HeartsAndCharts")]
        [NUnit.Framework.CategoryAttribute("AnalyticsView")]
        [NUnit.Framework.CategoryAttribute("analytics")]
        public virtual void Views_GetListOfViewsWhenAnalytics_ViewBuilding_EnabledIsFalse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Views - Get List of Views when Analytics-ViewBuilding-Enabled is False", new string[] {
                        "HeartsAndCharts",
                        "AnalyticsView",
                        "ignore"});
#line 13
            this.ScenarioSetup(scenarioInfo);
#line 14
            testRunner.Given("shared session for \'standard\' user with edition \'basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
            testRunner.When("I perform a GET for all views", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
            testRunner.Then("the views endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("View > Add note to a widget")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("publishers")]
        [NUnit.Framework.CategoryAttribute("WidgetNote")]
        [NUnit.Framework.CategoryAttribute("AnalyticsView")]
        [NUnit.Framework.CategoryAttribute("bug")]
        [NUnit.Framework.CategoryAttribute("CCC_7727")]
        [NUnit.Framework.CategoryAttribute("analytics")]
        public virtual void ViewAddNoteToAWidget()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View > Add note to a widget", new string[] {
                        "publishers",
                        "WidgetNote",
                        "AnalyticsView",
                        "bug",
                        "CCC_7727",
                        "ignore"});
#line 19
            this.ScenarioSetup(scenarioInfo);
#line 20
            testRunner.Given("session for \'system_admin\' user with edition \'Publishers social company, custom f" +
                               "ields\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
            testRunner.When("I use a generic automation view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
            testRunner.And("I add (PUT) comment to a widget", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
            testRunner.Then("widget note is saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Available Widgets")]
        [NUnit.Framework.CategoryAttribute("HeartsAndCharts")]
        [NUnit.Framework.CategoryAttribute("AnalyticsView")]
        [NUnit.Framework.CategoryAttribute("analytics")]
        public virtual void AvailableWidgets()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Available Widgets", new string[] {
                        "HeartsAndCharts",
                        "AnalyticsView"});
#line 27
            this.ScenarioSetup(scenarioInfo);
#line 28
            testRunner.Given("I login as \'analytics manager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
            testRunner.When("I perform a GET for \'Analytics\' available widgets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
            testRunner.Then("the available widget endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Custom Categories All Groups")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("HeartsAndCharts")]
        [NUnit.Framework.CategoryAttribute("AnalyticsView")]
        [NUnit.Framework.CategoryAttribute("CustomCategories")]
        [NUnit.Framework.CategoryAttribute("analytics")]
        public virtual void CustomCategoriesAllGroups()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Custom Categories All Groups", new string[] {
                        "HeartsAndCharts",
                        "AnalyticsView",
                        "CustomCategories",
                        "ignore"});
#line 33
            this.ScenarioSetup(scenarioInfo);
#line 34
            testRunner.Given("I login as \'Impact Enabled Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 35
            testRunner.When("I perform a GET for \'Analytics\' available widgets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
            testRunner.Then("the custom categories have all groups", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

