// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CCC_API.Features.Analytics
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AnalyticsFilterByTone")]
    [NUnit.Framework.IgnoreAttribute("Ignored feature")]
    public partial class AnalyticsFilterByToneFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AnalyticsFilterByTone.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AnalyticsFilterByTone", "\tIn order to sort my data by tone\r\n\tI can use Filter by Tone setting\r\n\r\n\"\"\" Pleas" +
                    "e be aware that particular hook will be run to set up data for this feature\r\n\"\"\"" +
                    " BE AWARE IF YOU CHANGE Company edition", ProgrammingLanguage.CSharp, new string[] {
                        "ignore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mentions Chart > Settings > Tones Frequency Calculation Maxseries DataLabel")]
        [NUnit.Framework.CategoryAttribute("publishers")]
        [NUnit.Framework.CategoryAttribute("analytics")]
        [NUnit.Framework.TestCaseAttribute("standard", "mentions_over_time", "Line", "", "Daily", "Hide", "10", "Count", "areaspline", null)]
        [NUnit.Framework.TestCaseAttribute("standard", "mentions_over_time", "Line", "Negative", "Daily", "Hide", "10", "Count", "areaspline", null)]
        [NUnit.Framework.TestCaseAttribute("read_only", "mentions_over_time", "Line", "Positive", "Daily", "Show", "2", "Count", "areaspline", null)]
        [NUnit.Framework.TestCaseAttribute("system_admin", "mentions_over_time", "Line", "Neutral", "Daily", "Hide", "20", "YearOverYear", "areaspline", null)]
        [NUnit.Framework.TestCaseAttribute("standard", "mentions_over_time", "Bar", "Negative", "Daily", "Show", "5", "Count", "column", null)]
        [NUnit.Framework.TestCaseAttribute("standard", "mentions_over_time", "Bar", "Positive", "Daily", "Hide", "10", "YearOverYear", "column", null)]
        [NUnit.Framework.TestCaseAttribute("standard", "mentions_over_time", "Line", "Neutral", "Weekly", "Hide", "10", "Count", "areaspline", null)]
        [NUnit.Framework.TestCaseAttribute("read_only", "mentions_over_time", "Bar", "Negative", "Weekly", "Show", "2", "YearOverYear", "column", null)]
        [NUnit.Framework.TestCaseAttribute("standard", "mentions_over_time", "Line", "", "Weekly", "Hide", "10", "Count", "areaspline", null)]
        [NUnit.Framework.TestCaseAttribute("standard", "mentions_over_time", "Line", "Positive", "Monthly", "Hide", "10", "Count", "areaspline", null)]
        [NUnit.Framework.TestCaseAttribute("system_admin", "mentions_over_time", "Line", "Neutral", "Yearly", "Hide", "10", "Count", "areaspline", null)]
        [NUnit.Framework.TestCaseAttribute("read_only", "mentions_over_time", "Bar", "Positive", "Yearly", "Show", "15", "YearOverYear", "column", null)]
        [NUnit.Framework.TestCaseAttribute("standard", "mentions_over_time", "Bar", "Negative", "Yearly", "Show", "15", "YearOverYear", "column", null)]
        public virtual void MentionsChartSettingsTonesFrequencyCalculationMaxseriesDataLabel(string permissions, string chart, string typeId, string tones, string frequency, string datalabel, string maxseries, string calculation, string expected_Type, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "publishers"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mentions Chart > Settings > Tones Frequency Calculation Maxseries DataLabel", @__tags);
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
 testRunner.Given(string.Format("shared session for \'{0}\' user with edition \'Analytics company with features enabl" +
                        "ed and dynamic news\'", permissions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Chart",
                        "TypeId",
                        "Tones",
                        "Frequency",
                        "Datalabel",
                        "Maxseries",
                        "Calculation"});
            table1.AddRow(new string[] {
                        string.Format("{0}", chart),
                        string.Format("{0}", typeId),
                        string.Format("{0}", tones),
                        string.Format("{0}", frequency),
                        string.Format("{0}", datalabel),
                        string.Format("{0}", maxseries),
                        string.Format("{0}", calculation)});
#line 12
 testRunner.When("I GET a widget with settings:", ((string)(null)), table1, "When ");
#line 16
 testRunner.Then(string.Format("response is OK with type \'{0}\'", expected_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 17
 testRunner.And(string.Format("maxseries is up to \'{0}\'", maxseries), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.And(string.Format("series \'Mentions\' of news filtered by specified tone with \'{0}\' and \'{1}\'", frequency, calculation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Value_Of_Coverage Chart > Tones Frequency Calculation Maxseries DataLabel")]
        [NUnit.Framework.CategoryAttribute("publishers")]
        [NUnit.Framework.CategoryAttribute("analytics")]
        [NUnit.Framework.TestCaseAttribute("standard", "value_of_coverage", "Line", "", "Daily", "Hide", "10", "1", "Count", "areaspline", null)]
        [NUnit.Framework.TestCaseAttribute("standard", "value_of_coverage", "Line", "Negative", "Daily", "Hide", "10", "1", "YearOverYear", "areaspline", null)]
        [NUnit.Framework.TestCaseAttribute("standard", "value_of_coverage", "Line", "Positive", "Weekly", "Show", "10", "0", "Count", "areaspline", null)]
        [NUnit.Framework.TestCaseAttribute("read_only", "value_of_coverage", "Bar", "Neutral", "Monthly", "Hide", "2", "1", "Count", "column", null)]
        [NUnit.Framework.TestCaseAttribute("system_admin", "value_of_coverage", "Bar", "Negative", "Yearly", "Show", "6", "1", "Count", "column", null)]
        [NUnit.Framework.TestCaseAttribute("standard", "value_of_coverage", "Bar", "", "Yearly", "Hide", "8", "0", "YearOverYear", "column", null)]
        public virtual void Value_Of_CoverageChartTonesFrequencyCalculationMaxseriesDataLabel(string permissions, string chart, string typeId, string tones, string frequency, string datalabel, string maxseries, string annotations, string calculation, string expected_Type, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "publishers"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Value_Of_Coverage Chart > Tones Frequency Calculation Maxseries DataLabel", @__tags);
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
 testRunner.Given(string.Format("shared session for \'{0}\' user with edition \'Analytics company with features enabl" +
                        "ed and dynamic news\'", permissions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Chart",
                        "TypeId",
                        "Tones",
                        "Frequency",
                        "Datalabel",
                        "Calculation",
                        "Maxseries",
                        "Annotations"});
            table2.AddRow(new string[] {
                        string.Format("{0}", chart),
                        string.Format("{0}", typeId),
                        string.Format("{0}", tones),
                        string.Format("{0}", frequency),
                        string.Format("{0}", datalabel),
                        string.Format("{0}", calculation),
                        string.Format("{0}", maxseries),
                        string.Format("{0}", annotations)});
#line 39
 testRunner.When("I GET a widget with settings:", ((string)(null)), table2, "When ");
#line 43
 testRunner.Then(string.Format("response is OK with type \'{0}\'", expected_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 44
 testRunner.And(string.Format("maxseries is up to \'{0}\'", maxseries), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.And(string.Format("series \'Publicity Value\' of news filtered by specified tone with \'{0}\' and \'{1}\'", frequency, calculation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Reach Chart > Settings > Tones Frequency Calculation Maxseries DataLabel")]
        [NUnit.Framework.CategoryAttribute("publishers")]
        [NUnit.Framework.CategoryAttribute("analytics")]
        [NUnit.Framework.TestCaseAttribute("standard", "reach", "Line", "", "Daily", "Hide", "2", "0", "Count", "spline", null)]
        [NUnit.Framework.TestCaseAttribute("read_only", "reach", "Line", "Negative", "Weekly", "Show", "2", "1", "YearOverYear", "spline", null)]
        [NUnit.Framework.TestCaseAttribute("system_admin", "reach", "Line", "Positive", "Monthly", "Show", "2", "1", "YearOverYear", "spline", null)]
        [NUnit.Framework.TestCaseAttribute("read_only", "reach", "Line", "Neutral", "Yearly", "Show", "10", "0", "Count", "spline", null)]
        public virtual void ReachChartSettingsTonesFrequencyCalculationMaxseriesDataLabel(string permissions, string chart, string typeId, string tones, string frequency, string datalabel, string maxseries, string annotations, string calculation, string expected_Type, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "publishers"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Reach Chart > Settings > Tones Frequency Calculation Maxseries DataLabel", @__tags);
#line 57
this.ScenarioSetup(scenarioInfo);
#line 58
 testRunner.Given(string.Format("shared session for \'{0}\' user with edition \'Analytics company with features enabl" +
                        "ed and dynamic news\'", permissions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Chart",
                        "TypeId",
                        "Tones",
                        "Frequency",
                        "Datalabel",
                        "Maxseries",
                        "Calculation",
                        "Annotations"});
            table3.AddRow(new string[] {
                        string.Format("{0}", chart),
                        string.Format("{0}", typeId),
                        string.Format("{0}", tones),
                        string.Format("{0}", frequency),
                        string.Format("{0}", datalabel),
                        string.Format("{0}", maxseries),
                        string.Format("{0}", calculation),
                        string.Format("{0}", annotations)});
#line 59
 testRunner.When("I GET a widget with settings:", ((string)(null)), table3, "When ");
#line 63
 testRunner.Then(string.Format("response is OK with type \'{0}\'", expected_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 64
 testRunner.And(string.Format("maxseries is up to \'{0}\'", maxseries), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.And(string.Format("news filtered by tone with \'{0}\' and \'{1}\' for series: \'Reach, UVPM\'", frequency, calculation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sentiment > Settings > Spline > Tones Frequency Calculation Maxseries DataLabel")]
        [NUnit.Framework.CategoryAttribute("publishers")]
        [NUnit.Framework.CategoryAttribute("analytics")]
        [NUnit.Framework.TestCaseAttribute("standard", "sentiment", "Line", "Negative", "Daily", "Show", "10", "0", "YearOverYear", "areaspline", null)]
        [NUnit.Framework.TestCaseAttribute("read_only", "sentiment", "StackedBar", "Positive", "Daily", "Show", "3", "1", "Count", "column", null)]
        [NUnit.Framework.TestCaseAttribute("system_admin", "sentiment", "StackedArea", "Neutral", "Daily", "Hide", "10", "0", "Count", "areaspline", null)]
        [NUnit.Framework.TestCaseAttribute("standard", "sentiment", "StackedBar", "Negative", "Monthly", "Show", "3", "1", "YearOverYear", "column", null)]
        [NUnit.Framework.TestCaseAttribute("read_only", "sentiment", "StackedArea", "Positive", "Monthly", "Show", "5", "0", "Count", "areaspline", null)]
        [NUnit.Framework.TestCaseAttribute("standard", "sentiment", "StackedBar", "Neutral", "Yearly", "Show", "2", "1", "YearOverYear", "column", null)]
        [NUnit.Framework.TestCaseAttribute("read_only", "sentiment", "StackedArea", "Negative", "Yearly", "Hide", "2", "0", "Count", "areaspline", null)]
        public virtual void SentimentSettingsSplineTonesFrequencyCalculationMaxseriesDataLabel(string permissions, string chart, string typeId, string tones, string frequency, string datalabel, string maxseries, string annotations, string calculation, string expected_Type, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "publishers"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sentiment > Settings > Spline > Tones Frequency Calculation Maxseries DataLabel", @__tags);
#line 75
this.ScenarioSetup(scenarioInfo);
#line 76
 testRunner.Given(string.Format("shared session for \'{0}\' user with edition \'Analytics company with features enabl" +
                        "ed and dynamic news\'", permissions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Chart",
                        "TypeId",
                        "Tones",
                        "Frequency",
                        "Datalabel",
                        "Maxseries",
                        "Calculation",
                        "Annotations"});
            table4.AddRow(new string[] {
                        string.Format("{0}", chart),
                        string.Format("{0}", typeId),
                        string.Format("{0}", tones),
                        string.Format("{0}", frequency),
                        string.Format("{0}", datalabel),
                        string.Format("{0}", maxseries),
                        string.Format("{0}", calculation),
                        string.Format("{0}", annotations)});
#line 77
 testRunner.When("I GET a widget with settings:", ((string)(null)), table4, "When ");
#line 81
 testRunner.Then(string.Format("response is OK with type \'{0}\'", expected_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 82
 testRunner.And(string.Format("maxseries is up to \'{0}\'", maxseries), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
 testRunner.And(string.Format("news filtered by tone with \'{0}\' and \'{1}\' for series: \'{2}\'", frequency, calculation, tones), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sentiment > Settings > Donut > Tones Frequency Calculation Maxseries DataLabel")]
        [NUnit.Framework.CategoryAttribute("publishers")]
        [NUnit.Framework.CategoryAttribute("analytics")]
        [NUnit.Framework.TestCaseAttribute("standard", "sentiment", "Donut", "Negative", "Hide", "3", "Negative", "Positive,Neutral", null)]
        [NUnit.Framework.TestCaseAttribute("read_only", "sentiment", "Donut", "Positive", "Show", "2", "Positive", "Negative,Neutral", null)]
        [NUnit.Framework.TestCaseAttribute("system_admin", "sentiment", "Donut", "Neutral", "Hide", "3", "Neutral", "Positive,Negative", null)]
        public virtual void SentimentSettingsDonutTonesFrequencyCalculationMaxseriesDataLabel(string permissions, string chart, string typeId, string tones, string datalabel, string maxseries, string included, string excluded, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "publishers"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sentiment > Settings > Donut > Tones Frequency Calculation Maxseries DataLabel", @__tags);
#line 96
this.ScenarioSetup(scenarioInfo);
#line 97
 testRunner.Given(string.Format("shared session for \'{0}\' user with edition \'Analytics company with features enabl" +
                        "ed and dynamic news\'", permissions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Chart",
                        "TypeId",
                        "Tones",
                        "Datalabel",
                        "Maxseries"});
            table5.AddRow(new string[] {
                        string.Format("{0}", chart),
                        string.Format("{0}", typeId),
                        string.Format("{0}", tones),
                        string.Format("{0}", datalabel),
                        string.Format("{0}", maxseries)});
#line 98
 testRunner.When("I GET a widget with settings:", ((string)(null)), table5, "When ");
#line 102
 testRunner.Then("response is OK with type \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 103
 testRunner.And(string.Format("maxseries is up to \'{0}\'", maxseries), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
 testRunner.And(string.Format("news filtered by tone grouped for period for series: \'{0}\'", included), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
 testRunner.And(string.Format("series not present: \'{0}\'", excluded), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

