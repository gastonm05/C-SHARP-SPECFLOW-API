// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CCC_API.Features.Analytics
{
    using TechTalk.SpecFlow;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Analytics - Activity Counts End Point")]
    [NUnit.Framework.CategoryAttribute("HeartsAndCharts")]

    public partial class Analytics_ActivityCountsEndPointFeature
    {

        private TechTalk.SpecFlow.ITestRunner testRunner;

#line 1 "AnalyticsActivityCountsEndPoint.feature"
#line hidden

        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Analytics - Activity Counts End Point", "\tTo verify activity counts can be retreived by frequency\r\n\tAs a valid CCC user\r\n\t" +
                    "I want to call the activity counts endpoint", ProgrammingLanguage.CSharp, new string[] {
                        "HeartsAndCharts",
                        "ignore"});
            testRunner.OnFeatureStart(featureInfo);
        }

        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }

        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Activity Counts data is correct for different frequencies")]
        [NUnit.Framework.CategoryAttribute("Analytics")]
        [NUnit.Framework.TestCaseAttribute("None", null)]
        [NUnit.Framework.TestCaseAttribute("Daily", null)]
        [NUnit.Framework.TestCaseAttribute("Weekly", null)]
        [NUnit.Framework.TestCaseAttribute("Monthly", null)]
        [NUnit.Framework.TestCaseAttribute("Yearly", null)]
        public virtual void ActivityCountsDataIsCorrectForDifferentFrequencies(string frequency, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Activity Counts data is correct for different frequencies", exampleTags);
#line 7
            this.ScenarioSetup(scenarioInfo);
#line 8
            testRunner.Given("I login as \'analytics manager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
            testRunner.When(string.Format("I perform a GET for activity counts for frequency \'{0}\'", frequency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
            testRunner.Then(string.Format("the activity counts endpoint returns activities by frequency \'{0}\'", frequency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get activity by campaign grouped by a certain field")]
        [NUnit.Framework.CategoryAttribute("Analytics")]
        [NUnit.Framework.CategoryAttribute("smokeProd")]
        [NUnit.Framework.TestCaseAttribute("analytic-mail", "SendMailing", "2", "Eastern Standard Time", "-30", null)]
        [NUnit.Framework.TestCaseAttribute("analytic-mail", "SendMailing", "0", "Central Standard Time", "6", null)]
        [NUnit.Framework.TestCaseAttribute("analytic-other", "Other", "0", "AUS Eastern Standard Time", "25", null)]
        [NUnit.Framework.TestCaseAttribute("analytic-other", "Other", "2", "Pacific Standard Time", "-40", null)]
        [NUnit.Framework.TestCaseAttribute("analytic-callback", "Callback", "2", "Pacific Standard Time", "-30", null)]
        [NUnit.Framework.TestCaseAttribute("analytic-callback", "Callback", "0", "AUS Eastern Standard Time", "10", null)]
        public virtual void GetActivityByCampaignGroupedByACertainField(string title, string type, string state, string timeZoneIdentifier, string scheduleTime, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get activity by campaign grouped by a certain field", exampleTags);
#line 20
            this.ScenarioSetup(scenarioInfo);
#line 21
            testRunner.Given("I login as \'analytics manager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
            testRunner.When(string.Format("I create one campaign \'analytics\' and I assign to it an activity \'{0}\' of type \'{" +
                                   "1}\' with time {2} \'{3}\'", title, type, scheduleTime, timeZoneIdentifier), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
            testRunner.Then(string.Format("I can get the activity by campaignId grouped by \'Type\' with value \'{0}\'", type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 24
            testRunner.And(string.Format("I can get the activity by campaignId grouped by \'PublicationState\' with value \'{0" +
                                  "}\'", state), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
            testRunner.And(string.Format("I can delete the activity with type \'{0}\' and the campaign", type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

