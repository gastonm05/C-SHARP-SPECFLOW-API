// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CCC_API.Features.Analytics
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Analytics - Mentions Momentum")]
    [NUnit.Framework.IgnoreAttribute("Ignored feature")]
    [NUnit.Framework.CategoryAttribute("HeartsAndCharts")]
    public partial class Analytics_MentionsMomentumFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AnalyticsMentionsMomentumEndPoint.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Analytics - Mentions Momentum", "\tTo verify that momentum for total mentions is correct\r\n\tAs a valid CCC user\r\n\tI " +
                    "want to call the mentions over time endpoint with different frequenies over vari" +
                    "ous time periods", ProgrammingLanguage.CSharp, new string[] {
                        "HeartsAndCharts",
                        "ignore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.CategoryAttribute("Analytics")]
        [NUnit.Framework.DescriptionAttribute("Momentum series data is correct for different frequencies")]
        [NUnit.Framework.TestCaseAttribute("same day", "0", "Line", "Daily", "does not have", null)]
        [NUnit.Framework.TestCaseAttribute("one day", "1", "Line", "Daily", "has", null)]
        [NUnit.Framework.TestCaseAttribute("over a week", "8", "Line", "Daily", "has", null)]
        [NUnit.Framework.TestCaseAttribute("over a month", "32", "Line", "Daily", "has", null)]
        [NUnit.Framework.TestCaseAttribute("over a year", "367", "Line", "Daily", "has", null)]
        [NUnit.Framework.TestCaseAttribute("one day", "1", "Line", "Weekly", "does not have", null)]
        [NUnit.Framework.TestCaseAttribute("over a week", "8", "Line", "Weekly", "has", null)]
        [NUnit.Framework.TestCaseAttribute("over a month", "32", "Line", "Weekly", "has", null)]
        [NUnit.Framework.TestCaseAttribute("over a year", "367", "Line", "Weekly", "has", null)]
        [NUnit.Framework.TestCaseAttribute("one day", "1", "Line", "Monthly", "does not have", null)]
        [NUnit.Framework.TestCaseAttribute("over a month", "32", "Line", "Monthly", "has", null)]
        [NUnit.Framework.TestCaseAttribute("over a year", "367", "Line", "Monthly", "has", null)]
        [NUnit.Framework.TestCaseAttribute("one day", "1", "Line", "Yearly", "does not have", null)]
        [NUnit.Framework.TestCaseAttribute("over a year", "367", "Line", "Yearly", "has", null)]
        [NUnit.Framework.TestCaseAttribute("over two years", "732", "Line", "Yearly", "has", null)]
        public virtual void MomentumSeriesDataIsCorrectForDifferentFrequencies(string description, string days, string type, string frequency, string hasData, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Momentum series data is correct for different frequencies", exampleTags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I login as \'analytics manager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When(string.Format("I perform a GET for mentions momentum with days \'{0}\', type \'{1}\' and frequency \'" +
                        "{2}\'", days, type, frequency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then(string.Format("the mentions momentum endpoint {0} series data", hasData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.CategoryAttribute("analytics")]
        [NUnit.Framework.DescriptionAttribute("Momentum series data for the previous year is correct for different frequencies")]
        [NUnit.Framework.TestCaseAttribute("", "Line", "Daily", null)]
        [NUnit.Framework.TestCaseAttribute("", "Line", "Weekly", null)]
        [NUnit.Framework.TestCaseAttribute("bug", "Line", "Monthly", null)]
        [NUnit.Framework.TestCaseAttribute("", "Line", "Yearly", null)]
        public virtual void MomentumSeriesDataForThePreviousYearIsCorrectForDifferentFrequencies(string description, string type, string frequency, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Momentum series data for the previous year is correct for different frequencies", exampleTags);
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given("I login as \'analytics manager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
 testRunner.When(string.Format("I perform a GET for mentions momentum on the last day of the previous year with t" +
                        "ype \'{0}\' and frequency \'{1}\'", type, frequency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then("the mentions momentum endpoint has series data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

