// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CCC_API.Features.Impact
{
    using TechTalk.SpecFlow;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ImpactAnalytics")]
    [NUnit.Framework.CategoryAttribute("impact")]
    public partial class ImpactAnalyticsFeature
    {

        private TechTalk.SpecFlow.ITestRunner testRunner;

#line 1 "ImpactAnalytics.feature"
#line hidden

        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ImpactAnalytics", "\tTo verify that press releases retrieve data per chart\r\n\tAs a valid CCC user\r\n\tI " +
                    "want to call the impact-analytics endpoint", ProgrammingLanguage.CSharp, new string[] {
                        "impact"});
            testRunner.OnFeatureStart(featureInfo);
        }

        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }

        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Reach data is correct on Consolidated view")]
        [NUnit.Framework.TestCaseAttribute("ignoring", null)]
        [NUnit.Framework.TestCaseAttribute("including", null)]
        public virtual void ReachDataIsCorrectOnConsolidatedView(string allAccounts, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Reach data is correct on Consolidated view", exampleTags);
#line 7
            this.ScenarioSetup(scenarioInfo);
#line 8
            testRunner.Given("I login as \'Impact Enabled Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
            testRunner.When(string.Format("I call the views endpoint {0} all accounts", allAccounts), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
            testRunner.Then("the Impact Views endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Engagement data is correct on Consolidated view")]
        [NUnit.Framework.TestCaseAttribute("ignoring", null)]
        [NUnit.Framework.TestCaseAttribute("including", null)]
        public virtual void EngagementDataIsCorrectOnConsolidatedView(string allAccounts, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Engagement data is correct on Consolidated view", exampleTags);
#line 17
            this.ScenarioSetup(scenarioInfo);
#line 18
            testRunner.Given("I login as \'Impact Enabled Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
            testRunner.When(string.Format("I call the engagement endpoint {0} all accounts", allAccounts), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
            testRunner.Then("the Impact Engagement endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("WebEvents data is correct on Consolidated view")]
        [NUnit.Framework.TestCaseAttribute("ignoring", null)]
        [NUnit.Framework.TestCaseAttribute("including", null)]
        public virtual void WebEventsDataIsCorrectOnConsolidatedView(string allAccounts, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WebEvents data is correct on Consolidated view", exampleTags);
#line 27
            this.ScenarioSetup(scenarioInfo);
#line 28
            testRunner.Given("I login as \'Impact Enabled Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
            testRunner.When(string.Format("I call the webEvents endpoint {0} all accounts", allAccounts), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
            testRunner.Then("the Impact web events endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Audience data is correct on Consolidated view")]
        [NUnit.Framework.TestCaseAttribute("ignoring", null)]
        [NUnit.Framework.TestCaseAttribute("including", null)]
        public virtual void AudienceDataIsCorrectOnConsolidatedView(string allAccounts, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Audience data is correct on Consolidated view", exampleTags);
#line 37
            this.ScenarioSetup(scenarioInfo);
#line 38
            testRunner.Given("I login as \'Impact Enabled Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
            testRunner.When(string.Format("I call the audience endpoint {0} all accounts", allAccounts), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
            testRunner.Then("the Impact audience endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Reach data is correct for a single release")]
        [NUnit.Framework.CategoryAttribute("smokeProd")]
        public virtual void ReachDataIsCorrectForASingleRelease()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Reach data is correct for a single release", ((string[])(null)));
#line 47
            this.ScenarioSetup(scenarioInfo);
#line 48
            testRunner.Given("I login as \'analytics manager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 49
            testRunner.When("I call the releases endpoint in order to get the Id and language code for a singl" +
                               "e release", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
            testRunner.Then("the Impact Views endpoint has the correct response for a single release", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Engagement data is correct for a single release")]
        public virtual void EngagementDataIsCorrectForASingleRelease()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Engagement data is correct for a single release", ((string[])(null)));
#line 52
            this.ScenarioSetup(scenarioInfo);
#line 53
            testRunner.Given("I login as \'Impact Enabled Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 54
            testRunner.When("I call the releases endpoint in order to get the Id and language code for a singl" +
                               "e release", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
            testRunner.Then("the Impact Engagement endpoint has the correct response for a single release", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("WebEvents data is correct for a single release")]
        public virtual void WebEventsDataIsCorrectForASingleRelease()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WebEvents data is correct for a single release", ((string[])(null)));
#line 57
            this.ScenarioSetup(scenarioInfo);
#line 58
            testRunner.Given("I login as \'Impact Enabled Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 59
            testRunner.When("I call the releases endpoint in order to get the Id and language code for a singl" +
                               "e release", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
            testRunner.Then("the Impact web events endpoint has the correct response for a single release", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Audience data is correct for a single release")]
        public virtual void AudienceDataIsCorrectForASingleRelease()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Audience data is correct for a single release", ((string[])(null)));
#line 62
            this.ScenarioSetup(scenarioInfo);
#line 63
            testRunner.Given("I login as \'Impact Enabled Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 64
            testRunner.When("I call the releases endpoint in order to get the Id and language code for a singl" +
                               "e release", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
            testRunner.Then("the Impact audience endpoint has the correct response for a single release", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
