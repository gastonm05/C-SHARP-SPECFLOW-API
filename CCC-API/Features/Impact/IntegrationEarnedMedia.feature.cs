// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CCC_API.Features.Impact
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("IntegrationEarnedMedia")]
    [NUnit.Framework.CategoryAttribute("impact")]
    public partial class IntegrationEarnedMediaFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "IntegrationEarnedMedia.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "IntegrationEarnedMedia", "\tTo verify that earned media data is present\r\n\tAs a valid CCC u" +
                    "ser\r\n\tI want to call impact endpoint and to verify we receive content", ProgrammingLanguage.CSharp, new string[] {
                        "impact"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that HC TopOutlet earnedMedia data match with CisionId TopOutlet earnedMed" +
            "ia data")]
        [NUnit.Framework.TestCaseAttribute("90", null)]
        [NUnit.Framework.TestCaseAttribute("30", null)]
        [NUnit.Framework.TestCaseAttribute("7", null)]
        public virtual void VerifyThatHCTopOutletEarnedMediaDataMatchWithCisionIdTopOutletEarnedMediaData(string days, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that HC TopOutlet earnedMedia data match with CisionId TopOutlet earnedMed" +
                    "ia data", exampleTags);
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("I login as \'Impact Enabled Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
  testRunner.And("searches are available for earned media", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.When(string.Format("I call the earned TopOutlet endpoint on the last {0} days", days), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.Then("the earned TopOutlet endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that HC WebEvents earnedMedia data match with CisionId WebEvents earnedMed" +
            "ia data")]
        [NUnit.Framework.TestCaseAttribute("90", null)]
        [NUnit.Framework.TestCaseAttribute("30", null)]
        [NUnit.Framework.TestCaseAttribute("7", null)]
        public virtual void VerifyThatHCWebEventsEarnedMediaDataMatchWithCisionIdWebEventsEarnedMediaData(string days, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that HC WebEvents earnedMedia data match with CisionId WebEvents earnedMed" +
                    "ia data", exampleTags);
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("I login as \'Impact Enabled Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
  testRunner.And("searches are available for earned media", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.When(string.Format("I call the earned WebEvents endpoint on the last {0} days", days), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("the earned WebEvents endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that HC Views earnedMedia data match with CisionId Views earnedMedia data")]
        [NUnit.Framework.TestCaseAttribute("90", null)]
        [NUnit.Framework.TestCaseAttribute("30", null)]
        [NUnit.Framework.TestCaseAttribute("7", null)]
        public virtual void VerifyThatHCViewsEarnedMediaDataMatchWithCisionIdViewsEarnedMediaData(string days, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that HC Views earnedMedia data match with CisionId Views earnedMedia data", exampleTags);
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
 testRunner.Given("I login as \'Impact Enabled Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
  testRunner.And("searches are available for earned media", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.When(string.Format("I call the earned views endpoint on the last {0} days", days), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 41
 testRunner.Then("the earned views endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that HC audience earnedMedia data match with CisionId audience earnedMedia" +
            " data")]
        [NUnit.Framework.TestCaseAttribute("90", null)]
        [NUnit.Framework.TestCaseAttribute("30", null)]
        [NUnit.Framework.TestCaseAttribute("7", null)]
        public virtual void VerifyThatHCAudienceEarnedMediaDataMatchWithCisionIdAudienceEarnedMediaData(string days, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that HC audience earnedMedia data match with CisionId audience earnedMedia" +
                    " data", exampleTags);
#line 50
this.ScenarioSetup(scenarioInfo);
#line 51
 testRunner.Given("I login as \'Impact Enabled Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 52
  testRunner.And("searches are available for earned media", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.When(string.Format("I call the earned Audience endpoint on the last {0} days", days), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
 testRunner.Then("the earned Audience endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
