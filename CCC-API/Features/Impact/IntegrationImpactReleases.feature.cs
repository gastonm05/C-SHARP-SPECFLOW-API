// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CCC_API.Features.Impact
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("IntegrationImpactReleases")]
    [NUnit.Framework.CategoryAttribute("impact")]
    public partial class IntegrationImpactReleasesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "IntegrationImpactReleases.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "IntegrationImpactReleases", "\tTo verify that CisionId releases data match with our release data\r\n\tAs a valid C" +
                    "CC user\r\n\tI want to call both endpoints and compare the data", ProgrammingLanguage.CSharp, new string[] {
                        "impact"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that HC releases data is present")]
        [NUnit.Framework.TestCaseAttribute("Ascending", "headline", "50", "1", "ignoring", null)]
        [NUnit.Framework.TestCaseAttribute("Ascending", "date", "50", "1", "ignoring", null)]
        public virtual void VerifyThatHCReleasesDataMatchWithCisionIdReleasesData(string sorting, string field, string limit, string page, string allAccounts, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that HC releases data is present", exampleTags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I login as \'Impact Enabled Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When(string.Format("I call the releases endpoint with {0} sorting by {1} field, {2} limit and {3} pag" +
                        "e {4} all accounts", sorting, field, limit, page, allAccounts), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("the Impact Views endpoint has the correct response for a single release", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that HC engagement data is present")]
        [NUnit.Framework.TestCaseAttribute("ignoring", null)]
        [NUnit.Framework.TestCaseAttribute("including", null)]
        public virtual void VerifyThatHCEngagementDataMatchWithCisionIdEngagementData(string allAccounts, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that HC engagement data is present", exampleTags);
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("I login as \'Impact Enabled Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
  testRunner.When(string.Format("I call the engagement endpoint {0} all accounts", allAccounts), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("the Impact Engagement endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that HC webEvents data is present")]
        [NUnit.Framework.TestCaseAttribute("ignoring", null)]
        [NUnit.Framework.TestCaseAttribute("including", null)]
        public virtual void VerifyThatHCWebEventsDataMatchWithCisionIdWebEventsData(string allAccounts, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that HC webEvents data is present", exampleTags);
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given("I login as \'Impact Enabled Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
 testRunner.When(string.Format("I call the webEvents endpoint {0} all accounts", allAccounts), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then("the Impact web events endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that HC views data is present")]
        [NUnit.Framework.TestCaseAttribute("ignoring", null)]
        [NUnit.Framework.TestCaseAttribute("including", null)]
        public virtual void VerifyThatHCViewsDataMatchWithCisionIdViewsData(string allAccounts, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that HC views data is present", exampleTags);
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.Given("I login as \'Impact Enabled Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
 testRunner.When(string.Format("I call the views endpoint {0} all accounts", allAccounts), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 41
 testRunner.Then("the Impact Views endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that HC audience data is present")]
        [NUnit.Framework.TestCaseAttribute("ignoring", null)]
        [NUnit.Framework.TestCaseAttribute("including", null)]
        public virtual void VerifyThatHCAudienceDataMatchWithCisionIdAudienceData( string allAccounts, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that HC audience data is present", exampleTags);
#line 48
this.ScenarioSetup(scenarioInfo);
#line 49
 testRunner.Given("I login as \'Impact Enabled Company\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
 testRunner.When(string.Format("I call the audience endpoint {0} all accounts", allAccounts), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
 testRunner.Then("the Impact audience endpoint has the correct response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
